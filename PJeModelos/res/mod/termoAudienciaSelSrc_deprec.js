window.j2.res.mod.termoAudienciaSelSrc.xmlEncode = {      
  load : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLQpUbyBjaGFuZ2UgdGhpcyBsaWNlbnNlIGhlYWRlciwgY2hvb3NlIExpY2Vuc2UgSGVhZGVycyBpbiBQcm9qZWN0IFByb3BlcnRpZXMuClRvIGNoYW5nZSB0aGlzIHRlbXBsYXRlIGZpbGUsIGNob29zZSBUb29scyB8IFRlbXBsYXRlcwphbmQgb3BlbiB0aGUgdGVtcGxhdGUgaW4gdGhlIGVkaXRvci4KLS0+CjxEZWZpbml0aW9ucyB4bWxucz0iaHR0cDovL2oyIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiBpZD0iU2VsZWVjdG9yc0l0ZW1zRGVmaW5pdGlvbnMiIHRhcmdldE5hbWVzcGFjZT0iaHR0cDovL2oyIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9qMiAuLi9YTUwvajIueHNkIj4KICA8c2VsZWN0b3JEZWYgaWQ9InNlbGVjdG9yQmxvY29Bc3NpbmF0dXJhcyIgZ3JvdXBlZD0iZmFsc2UiPgogICAgPGV2ZW50RmlyZSBldmVudD0ic2lnbmF0YXJpby5vbkNoYW5nZSIvPgogICAgPGl0ZW1Gb3JtYXRzPgogICAgICAgIDxlbGVtZW50byB0YWc9InNwYW4iIHNjb3BlPSJOT05FIj4gCiAgICAgICAgICAgIDx0ZXh0SFRNTCBzY29wZT0iTk9ORSI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICA8IVtDREFUQVsje3RleHRDb250ZW50fTxTUEFOPiZuYnNwOzwvU1BBTj5dXT4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC90ZXh0SFRNTD4KICAgICAgICA8L2VsZW1lbnRvPgogICAgPC9pdGVtRm9ybWF0cz4KICAgIDxncm91cHNEZWZzPgogICAgICAgIDxncm91cCBsYWJlbD0iRmFzZXMiPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5GYXNlLkFiZXJ0dXJhIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkZhc2UuQ29uY2lsaWFjYW8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5Db250ZXN0YWNhb09yYWwiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5EZWxpYmVyYWNvZXMiLz4KICAgICAgICAgICAgPCEtLWdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5FbmNlcnJhbWVudG8iLy0tPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5GYXNlLkluc3RydWNhbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5GYXNlLkp1bGdhbWVudG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5SZXF1ZXJpbWVudG9EYXNQYXJ0ZXMiLz4KICAgICAgICA8L2dyb3VwPgoJCTxncm91cCBsYWJlbD0iVsOtZGVvIENvbmZlcsOqbmNpYSB8IFBKZSBNw61kaWFzIj4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5WaWRlb0NvbmZlcmVuY2lhIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlZpZGVvQ29uZmVyZW5jaWEuQWR2ZXJ0aW1lbnRvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkZhc2UubGlua1BKZSIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5saW5rUEplLkluZm9MaW5rIi8+CgkJPC9ncm91cD4KICAgICAgICA8Z3JvdXAgbGFiZWw9IlByZXNlbsOnYSI+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLlByZXNlbmNhLkF1dG9yI3NlbWFkdiIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNjb21hZHYiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuUHJlc2VuY2EuQXV0b3Ijc2VtYWR2UHJlcCIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNjb21hZHZSZXBMZWdhbCIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNzZW1hZHZQcmVwXyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNjb21hZHZQcmVwIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLlByZXNlbmNhLlJldSNzZW1hZHYiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuUHJlc2VuY2EuUmV1I2NvbWFkdiIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5SZXUjc2VtYWR2UHJlcCIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5SZXUjY29tYWR2UHJlcCIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNhZHYiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuUHJlc2VuY2EuUmV1I2FkdiIvPgogICAgICAgIDwvZ3JvdXA+CiAgICAgICAgPGdyb3VwIGxhYmVsPSJBdXPDqm5jaWEiPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5BdXRvciNpbnRpbWFkbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5BdXRvciNuYW9JbnRpbWFkbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5SZXUjaW50aW1hZG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuQXVzZW5jaWEuUmV1I25hb0ludGltYWRvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLkF1c2VuY2lhLlJldSNuYW9JbnRpbWFkb1NlbUFSIi8+CiAgICAgICAgPC9ncm91cD4gICAgICAgIAogICAgICAgIDxncm91cCBsYWJlbD0iQ29uY2lsaWHDp8OjbyI+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkZhc2UuQ29uY2lsaWFjYW8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uRXhwb3NpY2FvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLkFjb3Jkb05hb1JlYWxpemFkbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5TZW1Qcm9wb3N0YXMiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uQWNvcmRvUmVhbGl6YWRvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlByb3Bvc3RhUGFzc2l2byIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5Qcm9wb3N0YUF0aXZvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlJlbm92YWNhbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5GcnVzdHJhZGEuRGVtYW5kYW50ZSIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5GcnVzdHJhZGEuRGVtYW5kYWRvIi8+CiAgICAgICAgPC9ncm91cD4KICAgICAgICA8Z3JvdXAgbGFiZWw9IkNvbmNpbGlhw6fDo28gLSBUZXJtb3MgQWNvcmRvcyI+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlRlcm1vc0Fjb3Jkb3MuUGd0b0NDIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlRlcm1vc0Fjb3Jkb3MuUGd0b0RKTyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5UZXJtb3NBY29yZG9zLkNhbmNlbE9iamV0b0xpZGUiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uVGVybW9zQWNvcmRvcy5DYW5jZWxDTlJDRU1BUiIvPgogICAgICAgIDwvZ3JvdXA+CiAgICAgICAgPGdyb3VwIGxhYmVsPSJDb250ZXN0YcOnw6NvIj4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5Db250ZXN0YWNhb09yYWwiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQ29udGVzdGFjYW8uQXByZXNDb250ZXN0YWNhbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db250ZXN0YWNhby5SZXNwb3N0YVByZWxpbSIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5Db250ZXN0YWNhby5TZW1SZXNwb3N0YVByZWxpbSIvPgogICAgICAgIDwvZ3JvdXA+CiAgICAgICAgPGdyb3VwIGxhYmVsPSJJbnN0cnXDp8OjbyI+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkZhc2UuSW5zdHJ1Y2FvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlJlbm92YWNhbzIiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uUmVub3ZhY2FvLk5vdCIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkluaWNpb1Nlc3Nhb0luc3RydWNhbyIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlBhcnRlc1NlbU5vdmFzUHJvdmFzIi8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkRlbWFuZGFkby5Db250ZXN0YWNhb09yYWwiLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVtYW5kYW50ZU1hbmlmUHJlbGltaW5hcmVzRGlnaXRhZG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkRlbWFuZGFudGVNYW5pZlByZWxpbWluYXJlc0dyYXZhZG8iLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5KdW50YWRhLkF0aXZvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5KdW50YWRhLlBhc3Npdm8iLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5Qcm9kdWNhb1Byb3ZhT3JhbEF1ZGl2aXN1YWwiLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5UZXN0ZW11bmhhLkF0aXZvLmp1c3RpZmljYXRpdmEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlRlc3RlbXVuaGEuUGFzc2l2by5qdXN0aWZpY2F0aXZhIi8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BdGl2b0RlcG9pbWVudG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlBhc3Npdm9EZXBvaW1lbnRvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5UZXN0ZW11bmhhQXRpdm8xIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5UZXN0ZW11bmhhQXRpdm8yIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5UZXN0ZW11bmhhQXRpdm8zIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5UZXN0ZW11bmhhUGFzc2l2bzEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlRlc3RlbXVuaGFQYXNzaXZvMiIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uVGVzdGVtdW5oYVBhc3Npdm8zIi8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGlzcGVuc2FUZXN0ZW11bmhhcyIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkFsZWdGaW4iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkFsZWdGaW4ucmVtaXNzaXZhcyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uQWxlZ0Zpbi5BdGl2by5yZW1pc3NpdmEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkFsZWdGaW4uUGFzc2l2by5yZW1pc3NpdmEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkFsZWdGaW4uQXRpdm8uZGlnaXRhZG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkFsZWdGaW4uUGFzc2l2by5kaWdpdGFkbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uQWxlZ0Zpbi5BdGl2by5ncmF2YWRvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BbGVnRmluLlBhc3Npdm8uZ3JhdmFkbyIvPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRW5jZXJyYW1lbnRvIi8+CiAgICAgICAgICAgIAogICAgICAgIDwvZ3JvdXA+CiAgICAgICAgCiAgICAgICAgPGdyb3VwIGxhYmVsPSJJbnN0cnXDp8OjbyAtIERlcG9pbWVudG8iPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVwb2ltZW50b0VtVmlkZW8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkRlcG9pbWVudG9QZXJnTWFnaXN0cmFkbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVwb2ltZW50b1BlcmdBZHZBdGl2byIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVwb2ltZW50b1BlcmdBZHZQYXNzaXZvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5EZXBvaW1lbnRvUGVyZ0FkdkF0aXZvTmFkYSIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVwb2ltZW50b1BlcmdBZHZQYXNzaXZvTmFkYSIvPgogICAgICAgIDwvZ3JvdXA+ICAgICAgICAKICAgICAgICAKICAgICAgICA8Z3JvdXAgbGFiZWw9Ikp1bGdhbWVudG8iPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5GYXNlLkp1bGdhbWVudG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5Qcm9mZXJpbWVudG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5Db250dW1hY2lhIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkp1bGdhbWVudG8uRGVzaXN0ZW5jaWEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5Ib21vbG9nYWNhby1BSkctU2ltIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkp1bGdhbWVudG8uSG9tb2xvZ2FjYW8tQUpHLU5hbyIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPCEtLWdJdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5TZXJ2aWNvVGVyY2Vpcm8iLy0tPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5KdWxnYW1lbnRvLkNvbGFyU2VudGVuY2EiLz4KICAgICAgICAgICAgPCEtLWdJdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uUmVub3ZhY2FvMiIvLS0+CiAgICAgICAgPC9ncm91cD4KICAgICAgICAKICAgICAgICA8Z3JvdXAgbGFiZWw9IkRlbGliZXJhw6fDtWVzIj4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRmFzZS5EZWxpYmVyYWNvZXMiLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5NYWdpc3RyYWRvLkdlbsOpcmljbyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuTWFnaXN0cmFkby5Db25jbHVzYW9TZW50ZW5jYSIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuTWFnaXN0cmFkby5SYXpvZXNGaW5haXNTZW50ZW5jYSIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuTWFnaXN0cmFkby5EZXNpZ25hw6fDo29BdWRpZW5jaWEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLk1hZ2lzdHJhZG8uSnVsZ2FtbmV0b0RpbGlnZW5jaWEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLk1hZ2lzdHJhZG8uSnVudGFkYUFSIi8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuQ29uY2lsaWFkb3IuRGVzaWdBdWRpZW5jaWEiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLkNvbmNsdXNhb1NlbnRlbmNhIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5Db25jbHVzYW9EZXNwYWNobyIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuQ29uY2lsaWFkb3IuU2VjcmV0YXJpYUV4cGVkacOnw6NvQ29tdW5pY2FjYW8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLkNvbmNsdXNhb1NlbnRlbmNhRGVzcGFjaG8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLlByYXpvQXRpdm9GaW5hbGlkYWRlIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5QcmF6b1Bhc3Npdm9GaW5hbGlkYWRlIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5QcmF6b0p1bnRhZGFEb2N1bWVudG9zIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5TZWNyZXRhcmlhUHJvdmlkZW5jaWEiLz4KICAgICAgICAgICAgCiAgICAgICAgPC9ncm91cD4gICAgIAogICAgICAgIAogICAgICAgIDxncm91cCBsYWJlbD0iUmVxdWVyaW1lbnRvcyI+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLkZhc2UuUmVxdWVyaW1lbnRvRGFzUGFydGVzIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuUmVudW5jaWFQcmF6b1JlY3Vyc2FsIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuUHVibGljYWNhbyIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5HZW5lcmljb0F0aXZvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuR2Vuw6lyaWNvUGFzc2l2byIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9InRybUF1ZC5SZXF1ZXJpbWVudG9zLkRlc2lzdGVuY2lhQXRpdm8iLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuSW5zdHJ1Y2FvQXRpdm8iLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5JbnN0cnVjYW9QYXNzaXZvIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuSW5zdHJ1Y2FvUGFydGVzIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuSnVsZ2FtZW50b0FudGNpcGFkbyIvPgogICAgICAgIDwvZ3JvdXA+ICAgICAgICAKICAgIDwvZ3JvdXBzRGVmcz4KICAgIDxpdGVtcz4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkZhc2UuQWJlcnR1cmEiIGxhYmVsPSJBYmVydHVyYSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7REEgQUJFUlRVUkEgREEgQVVEScOKTkNJQX19OgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkZhc2UuQ29uY2lsaWFjYW8iIGxhYmVsPSJDb25jaWxpYcOnw6NvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCeyM6VXtEQSBDT05DSUxJQcOHw4NPfX06CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRmFzZS5Db250ZXN0YWNhb09yYWwiIGxhYmVsPSJDb250ZXN0YcOnw6NvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCeyM6VXtEQSBDT05URVNUQcOHw4NPfX06CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRmFzZS5EZWxpYmVyYWNvZXMiIGxhYmVsPSJEZWxpYmVyYcOnw7VlcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7REFTIERFTElCRVJBw4fDlUVTfX06CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5GYXNlLkVuY2VycmFtZW50byIgbGFiZWw9IkVuY2VycmFtZW50byIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7RE8gRU5DRVJSQU1FTlRPfX06CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkZhc2UuSW5zdHJ1Y2FvIiBsYWJlbD0iSW5zdHJ1w6fDo28iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7IzpVe0RBIElOU1RSVcOHw4NPfX06CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkZhc2UuSnVsZ2FtZW50byIgbGFiZWw9Ikp1bGdhbWVudG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7IzpVe0RPIEpVTEdBTUVOVE99fToKICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkZhc2UuUmVxdWVyaW1lbnRvRGFzUGFydGVzIiBsYWJlbD0iUmVxdWVyaW1lbnRvcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7RE9TIFJFUVVFUklNRU5UT1MgREFTIFBBUlRFU319OgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkZhc2UuVmlkZW9Db25mZXJlbmNpYSIgbGFiZWw9IlbDrWRlb2NvbmZlcsOqbmNpYSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7REEgVklERU9DT05GRVLDik5DSUF9fToKICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5GYXNlLmxpbmtQSmUiIGxhYmVsPSJQSmUgTcOtZGlhcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7QUNFU1NPIEFPIFBKRSBNw41ESUFTfX06CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIAogICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuUHJlc2VuY2EuQXV0b3Ijc2VtYWR2IiBsYWJlbD0iI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBWZXJpZmljYWRhIGEgcHJlc2Vuw6dhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIAogICAgICAgICAgICAgICAgICAgIGRlc2Fjb21wYW5oYWRhIGRlIGFkdm9nYWRvLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLlByZXNlbmNhLkF1dG9yI2NvbWFkdiIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99ICsgQWR2b2dhZG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBWZXJpZmljYWRhIGEgcHJlc2Vuw6dhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIAogICAgICAgICAgICAgICAgICAgIGFjb21wYW5oYWRhIGRlIGFkdm9nYWRvKGEpLCBvKGEpIHNlbmhvcihhKSAje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5hZHZvZ2Fkby5ub21lX30uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuUHJlc2VuY2EuQXV0b3Ijc2VtYWR2UHJlcCIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IChSZXBMZWdhbCkiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBWZXJpZmljYWRhIGEgcHJlc2Vuw6dhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIAogICAgICAgICAgICAgICAgICAgIG5hIHBlc3NvYSBkZSBzZXUgcmVwcmVzZW50YW50ZSBsZWdhbCwgbyhhKSBzZW5ob3IoYSkgIzpzcGFuQHJlcExlZ2FsQXRpdm9Ob21le1hYWFhSZXByZXNlbnRhbnRlTGVnYWxYWFhYfSwKICAgICAgICAgICAgICAgICAgICBkZXNhY29tcGFuaGFkYSBkZSBhZHZvZ2Fkby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNjb21hZHZSZXBMZWdhbCIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IChSZXBMZWdhbCkgKyBBZHZvZ2FkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIFZlcmlmaWNhZGEgYSBwcmVzZW7Dp2EgZGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSwgCiAgICAgICAgICAgICAgICAgICAgbmEgcGVzc29hIGRlIHNldSByZXByZXNlbnRhbnRlIGxlZ2FsLCBvKGEpIHNlbmhvcihhKSAjOnNwYW5AcmVwTGVnYWxBdGl2b05vbWV7WFhYWFJlcHJlc2VudGFudGVMZWdhbFhYWFh9LAogICAgICAgICAgICAgICAgICAgIGFjb21wYW5oYWRhIGRlIGFkdm9nYWRvKGEpLCBvKGEpIHNlbmhvcihhKSAje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5hZHZvZ2Fkby5ub21lX30uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNzZW1hZHZQcmVwXyIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IChQcmVwb3N0bykiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBWZXJpZmljYWRhIGEgcHJlc2Vuw6dhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIAogICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGFkbyBwb3IgcHJlcG9zdG8oYSksIG8oYSkgc2VuaG9yKGEpICM6c3BhbkByZXBMZWdhbEF0aXZvTm9tZXtYWFhYUHJlcG9zdG9YWFhYfSwKICAgICAgICAgICAgICAgICAgICBkZXNhY29tcGFuaGFkYSBkZSBhZHZvZ2Fkby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5BdXRvciNjb21hZHZQcmVwIiBsYWJlbD0iI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30gKFByZXBvc3RvKSArIEFkdm9nYWRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgVmVyaWZpY2FkYSBhIHByZXNlbsOnYSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9LCAKICAgICAgICAgICAgICAgICAgICByZXByZXNlbnRhZG8gcG9yIHByZXBvc3RvKGEpLCBvKGEpIHNlbmhvcihhKSAjOnNwYW5AcmVwTGVnYWxBdGl2b05vbWV7WFhYWFByZXBvc3RvWFhYWH0sCiAgICAgICAgICAgICAgICAgICAgYWNvbXBhbmhhZGEgZGUgYWR2b2dhZG8oYSksIG8oYSkgc2VuaG9yKGEpICN7ajIuZW52LlBKZVZhcnMucGFydGVzLmF0aXZhLmFkdm9nYWRvLm5vbWVffS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLlByZXNlbmNhLlJldSNzZW1hZHYiIGxhYmVsPSIje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgVmVyaWZpY2FkYSBhIHByZXNlbsOnYSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0sIAogICAgICAgICAgICAgICAgICAgIGRlc2Fjb21wYW5oYWRhIGRlIGFkdm9nYWRvLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLlByZXNlbmNhLlJldSNjb21hZHYiIGxhYmVsPSIje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99ICsgQWR2b2dhZG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBWZXJpZmljYWRhIGEgcHJlc2Vuw6dhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSAKICAgICAgICAgICAgICAgICAgICBhY29tcGFuaGFkYSBkZSBhZHZvZ2FkbyhhKSwgbyhhKSBzZW5ob3IoYSkgWFhYTm9tZWRvQWRvdmFnYWRvWFhYWC4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5SZXUjc2VtYWR2UHJlcCIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30gKFByZXBvc3RvKSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxldmVudEZpcmUgZXZlbnQ9IlRlcm1vQXVkaWVuY2lhLkFzc2lnbi5Ub29sVGlwUHJlcG9zdG8iLz4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgVmVyaWZpY2FkYSBhIHByZXNlbsOnYSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0sIAogICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGFkYSBwb3IgcHJlcG9zdG8oYSksIG8oYSkgc2VuaG9yKGEpICM6c3BhbkBwcmVwUGFzc2l2b05vbWV7WFhYWFByZXBvc3RvWFhYWH0KICAgICAgICAgICAgICAgICAgICBkZXNhY29tcGFuaGFkYSBkZSBhZHZvZ2Fkby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5SZXUjY29tYWR2UHJlcCIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30gKFByZXBvc3RvKSArIGFkdm9nYWRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgVmVyaWZpY2FkYSBhIHByZXNlbsOnYSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0sIAogICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGFkYSBwb3IgcHJlcG9zdG8oYSksIG8oYSkgc2VuaG9yKGEpICM6c3BhbkBwcHJlcFBhc3Npdm9Ob21le1hYWFhQcmVwb3N0b1hYWFh9CiAgICAgICAgICAgICAgICAgICAgYWNvbXBhbmhhZGEgZGUgYWR2b2dhZG8oYSksIG8oYSkgc2VuaG9yKGEpIFhYWE5vbWVkb0Fkb3ZhZ2Fkb1hYWFguCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQWJlcnR1cmEuUHJlc2VuY2EuQXV0b3IjYWR2IiBsYWJlbD0iQWR2b2dhZG8gZG8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBWZXJpZmljYWRhIGEgcHJlc2Vuw6dhIGRvKGEpIGFkdm9nYWRvKGEpIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIG8oYSkgc2VuaG9yKGEpIAogICAgICAgICAgICAgICAgICAgICN7ajIuZW52LlBKZVZhcnMucGFydGVzLmF0aXZhLmFkdm9nYWRvLm5vbWVffS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5QcmVzZW5jYS5SZXUjYWR2IiBsYWJlbD0iQWR2b2dhZG8gZG8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIFZlcmlmaWNhZGEgYSBwcmVzZW7Dp2EgZG8oYSkgYWR2b2dhZG8oYSkgZGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9LCAKICAgICAgICAgICAgICAgICAgICBvKGEpIHNlbmhvcihhKSAje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5wYXNzaXZhLmFkdm9nYWRvLm5vbWVffS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkFiZXJ0dXJhLkF1c2VuY2lhLkF1dG9yI2ludGltYWRvIiBsYWJlbD0iI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30gLSBpbnRpbWFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEF1c2VudGUgYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9LCBhcGVzYXIgZGUgZGV2aWRhbWVudGUgaW50aW1hZGEgcGFyYSBvIHByZXNlbnRlIGF0by4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5BdXRvciNuYW9JbnRpbWFkbyIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IC0gbsOjbyBpbnRpbWFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEF1c2VudGUgYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9LCBwb2lzIG7Do28gZm9pIGRldmlkYW1lbnRlIGludGltYWRhIHBhcmEgbyBwcmVzZW50ZSBhdG8uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5SZXUjaW50aW1hZG8iIGxhYmVsPSIje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IC0gaW50aW1hZG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBdXNlbnRlIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9LCBhcGVzYXIgZGUgZGV2aWRhbWVudGUgaW50aW1hZGEgcGFyYSBvIHByZXNlbnRlIGF0by4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5SZXUjbmFvSW50aW1hZG8iIGxhYmVsPSIje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IC0gbsOjbyBpbnRpbWFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEF1c2VudGUgYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0sIHBvaXMgbsOjbyBmb2kgZGV2aWRhbWVudGUgaW50aW1hZGEgcGFyYSBvIHByZXNlbnRlIGF0by4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5BYmVydHVyYS5BdXNlbmNpYS5SZXUjbmFvSW50aW1hZG9TZW1BUiIgbGFiZWw9IiN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30gLSBuw6NvIGludGltYWRvIHwgQXVzZW5jaWEgQVIiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBdXNlbnRlIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9LCB0b2RhdmlhIGF1c2VudGUgYSBqdW50YWRhIGRlIGF2aXNvIGRlIHJlY2ViaW1lbnRvIGRlIHN1YSBjYXJ0YSBkZSBjaXRhw6fDo28gZS9vdSBpbnRpbWHDp8OjbywgYXBlc2FyIGRlIG8gc2VydmnDp28gU1JPIGRvcyBjb3JyZWlvcyBhcG9udGFyIGEgZW50cmVnYSBkYSByZWZlcmlkYSBjb3JyZXNwb25kw6puY2lhLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICAKICAgICAgICAKICAgICAgICA8IS0tIENPTkNJTElBw4fDg08gLS0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5FeHBvc2ljYW8iIGxhYmVsPSJFeHBvc2nDp8OjbyBNb3Rpdm9zIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgRm9pIGFtcGxhbWVudGUgZXhwbGljaXRhZG8gcG9yIGVzdGUgY29uY2lsaWFkb3IgbyBvYmpldGl2byBkYSBwcmVzZW50ZSBhdWRpw6puY2lhLCBiZW0gY29tbyAKICAgICAgICAgICAgICAgICAgICBhcyB2YW50YWdlbnMgcXVlIHBvZGVyw6NvIGFkdmlyIGRhIGNvbnNlY3XDp8OjbyBkZSB1bWEgY29tcG9zacOnw6NvIGFtaWfDoXZlbCBwYXJhIG8gZmltIGRvIHByZXNlbnRlIGxpdMOtZ2lvLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLkFjb3Jkb05hb1JlYWxpemFkbyIgbGFiZWw9IkFjb3JkbyBuw6NvIHJlYWxpemFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIENvbnR1ZG8sIGFzIHBhcnRlcyBuw6NvIGNoZWdhcmFtIGVtIGFjb3Jkby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5BY29yZG9SZWFsaXphZG8iIGxhYmVsPSJBY29yZG8gcmVhbGl6YWRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgRGVzc2FydGUsIGFzIHBhcnRlcyByZXNvbHZlcmFtIGVudGFidWxhciBvIHNlZ3VpbnRlIGFjb3Jkby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5TZW1Qcm9wb3N0YXMiIGxhYmVsPSJTZW0gcHJvcG9zdGFzIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgTmVuaHVtYSBQcm9wb3N0YSBmb2kgYXByZXNlbnRhZGEuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uUHJvcG9zdGFQYXNzaXZvIiBsYWJlbD0iUHJvcG9zdGEgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIE8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSBhcHJlc2VudG91IGNvbW8gcHJvcG9zdGEgZGUgYWNvcmRvOiBYWFhYUHJvcG9zdGFYWFhYLgogICAgICAgICAgICAgICAgICAgIFByb3Bvc3RhIG7Do28gYWNlaXRhIHBlbG8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5Qcm9wb3N0YUF0aXZvIiBsYWJlbD0iQ29udHJhcHJvcG9zdGEgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBDb21vIGNvbnRyYXByb3Bvc3RhLCBvICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IGFwcmVzZW50b3U6IFhYWFhQcm9wb3N0YVhYWFguCiAgICAgICAgICAgICAgICAgICAgUHJvcG9zdGEgbsOjbyBhY2VpdGEgcGVsbyAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uUmVub3ZhY2FvIiBsYWJlbD0iUmVub3Zhw6fDo28gQ29uY2lsaWHDp8OjbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEluaWNpYWxtZW50ZSBmb2kgcmVub3ZhZGEgw6BzIHBhcnRlcyBhIG9wb3J0dW5pZGFkZSBkZSByZWFsaXphcmVtIENPTkNJTElBw4fDg08gYSBmaW0gZGUgZW5jZXJyYXIgYSBwcmVzZW50ZSBhw6fDo28uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uRnJ1c3RyYWRhLkRlbWFuZGFudGUiIGxhYmVsPSJGcnVzdHJhZGEgLSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLmF0aXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEZydXN0cmFkYSBlbSByYXrDo28gZGEgYXVzw6puY2lhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5GcnVzdHJhZGEuRGVtYW5kYWRvIiBsYWJlbD0iRnJ1c3RyYWRhIC0gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEZydXN0cmFkYSBlbSByYXrDo28gZGEgYXVzw6puY2lhIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfQogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICAKICAgICAgICA8IS0tIENPTkNJTElBw4fDg08gLSBURVJNT1MgQUNPUkRPUy0tPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuQ29uY2lsaWFjYW8uVGVybW9zQWNvcmRvcy5QZ3RvQ0MiIGxhYmVsPSJQYWdhbWVudG8gQ29udGEgQ29ycmVudGUiIGRhdGFQbHVzPSJ0ZXJtb0NvdW50ZXIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7WFhYWCAtIEEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9IHNlIHByb3DDtWUgYSBwYWdhciBhIGltcG9ydMOibmNpYSBkZSAjOnNwYW5AdmFsb3JBY29yZG97UiQgWFhYWFZhbG9yWFhYWH0gYSBmaW0gZGUgZW5jZXJyYXIgYSBkZW1hbmRhZGEgbm8gcHJhem8gZGUgIzpzcGFuQHBndG9BY29yZG9QcmF6b3tYWFhYUHJhem9YWFhYIGRpYXMgY29ycmlkb3N9IG1lZGlhbnRlIGRlcMOzc2l0byBlbSBjb250YSBkZSB0aXR1bGFyaWRhZGUgZGEgYXV0b3JhOiAje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5ub21lfSwgQ1BGIFhYWENQRlhYWCwgWFhYRGFkb3NCYW5jYXJpb3NYWFg7fQogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlRlcm1vc0Fjb3Jkb3MuUGd0b0RKTyIgbGFiZWw9IlBhZ2FtZW50byBESk8iIGRhdGFQbHVzPSJ0ZXJtb0NvdW50ZXIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7WFhYWCAtIEEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9IHNlIHByb3DDtWUgYSBwYWdhciBhIGltcG9ydMOibmNpYSBkZSAjOnNwYW5AdmFsb3JBY29yZG97UiQgWFhYWFZhbG9yWFhYWH0gYSBmaW0gZGUgZW5jZXJyYXIgYSBkZW1hbmRhZGEgbm8gcHJhem8gZGUgIzpzcGFuQHBndG9BY29yZG9QcmF6b3tYWFhYUHJhem9YWFhYIGRpYXMgY29ycmlkb3N9IG1lZGlhbnRlIERlcMOzc2l0byBKdWRpY2lhbCBlbSBmYXZvciBkYSBhdXRvcmE6ICN7ajIuZW52LlBKZVZhcnMucGFydGVzLmF0aXZhLm5vbWV9LCBDUEYgWFhYQ1BGWFhYO30KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5UZXJtb3NBY29yZG9zLkNhbmNlbE9iamV0b0xpZGUiIGxhYmVsPSJDYW5jZWxhbWVudG8gRMOpYml0b3MgTGlkZSIgZGF0YVBsdXM9InRlcm1vQ291bnRlciI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QntYWFhYIC0gTm8gcHJhem8gZGUgbm8gcHJhem8gZGUgIzpzcGFuQG9icmlnYWNhb0Fjb3Jkb1ByYXpvQWNvcmRve1hYWFhQcmF6b1hYWFggZGlhcyBjb3JyaWRvc30gQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gc2UgY29tcHJvbWV0ZSBhIGNhbmNlbGFyIGNvbnRyYXRvIG9iamV0byBkYSBsaWRlIFhYWERlc2NYWFhYLCBiZW0gY29tbyB0b2RvcyBvcyBkw6liaXRvcyBlIGV4Y2x1c8OjbyBkbyBub21lIGRhIGF1dG9yYSBkb3Mgw7NyZ8Ojb3MgZGUgcmVzdHJpw6fDo28gZGUgY3LDqWRpdG99LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlRlcm1vc0Fjb3Jkb3MuQ2FuY2VsQ05SQ0VNQVIiIGxhYmVsPSJDYW5jZWxhbWVudG8gQ05SIENFTUFSIiBkYXRhUGx1cz0idGVybW9Db3VudGVyIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCe05vIHByYXpvIGRlIGF0w6kgMTUgKHF1aW56ZSkgZGlhcyDDunRlaXMgYSBwYXJ0ZSBkZW1hbmRhZGEgc2UgY29tcHJvbWV0ZSBhIGNhbmNlbGFyIGEgZmF0dXJhIGRlIENOUiBkZSBjb21wZXTDqm5jaWEgWFhYQ29tcGV0ZW5pY2FDTlJYWFgsIGNvbSB2ZW5jaW1lbnRvIGVtIFhYWFZlbmNpbWVudG9DTlJYWFhYLCBubyB2YWxvciBkZSBSJCBYWFhWYWxvclhYWFgsIGRhIGNvbnRhIGNvbnRyYXRvIFhYWENvbnRhQ29udHJhdG9YWFgufQogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICAKICAgICAgICA8IS0tLSBDT05URVNUQUNBTyAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbnRlc3RhY2FvLkFwcmVzQ29udGVzdGFjYW8iIGxhYmVsPSJBcHJlc2VudGHDp8OjbyBDb250ZXN0YcOnw6NvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgRW5jZXJyYWRhIGEgdGVudGF0aXZhIGRlIGNvbXBvc2nDp8OjbywgbyhhKSBhZHZvZ2FkbyhhKSBkYSBQYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gCiAgICAgICAgICAgICAgICAgICAgcmVxdWlzaXRvdSBhIHBhbGF2cmEgZSBwYXNzb3UgYSBhcHJlc2VudGFyIGNvbnRlc3Rhw6fDo28gbm9zIHNlZ3VpbnRlcyB0ZXJtb3M6ICM6QnsiI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19LCBYWFhDb250ZXN0YWNhb1hYWCJ9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbnRlc3RhY2FvLlJlc3Bvc3RhUHJlbGltIiBsYWJlbD0iUmVzcG9zdGEgw6FzIHByZWxpbWluYXJlcy9kb2N1bWVudG9zIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQ2VkaWRhIMOgIHBhbGF2cmEgbyhhKSBhZHZvZ2FkbyhhKSBkYSBQYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9LAogICAgICAgICAgICAgICAgICAgIGFjZXJjYSBkYXMgcHJlbGltaW5hcmVzIGUvb3UgZG9jdW1lbnRvcyBhcHJlc2VudGFkb3MgZW0gY29udGVzdGHDp8Ojbywgc2UgbWFuaWZlc3RvdSAKICAgICAgICAgICAgICAgICAgICBub3Mgc2VndWludGVzIHRlcm1vczogIzpCeyIje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5NTX0sIFhYWE1hbmlmZXN0YWNhb1hYWCJ9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbnRlc3RhY2FvLlNlbVJlc3Bvc3RhUHJlbGltIiBsYWJlbD0iU2VtIFJlc3Bvc3RhIMOhcyBwcmVsaW1pbmFyZXMvZG9jdW1lbnRvcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIERhZGEgYSBvcG9ydHVuaWRhZGUgcGFyYSBvKGEpIGFkdm9nYWRvKGEpIGRhIFBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIG8gbWVzbW8gZGVpeG91IGRlCiAgICAgICAgICAgICAgICAgICAgc2UgbWFuaWZlc3RhciBhY2VyY2EgZGFzIHByZWxpbWluYXJlcyBlL291IGRvY3VtZW50b3MgYXByZXNlbnRhZG9zLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICA8IS0tLSBJTlNUUlXDh8ODTyAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkNvbmNpbGlhY2FvLlJlbm92YWNhbzIiIGxhYmVsPSJSZW5vdmHDp8OjbyBDb25jaWxpYcOnw6NvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgSW5pY2lhbG1lbnRlIGZvaSByZW5vdmFkYXMgw6BzIHBhcnRlcyBhIG9wb3J0dW5pZGFkZSBkZSByZWFsaXphcmVtIENPTkNJTElBw4fDg08gYSBmaW0gZGUgZGFyIGZpbSBhIHByZXNlbnRlIGHDp8Ojby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5Db25jaWxpYWNhby5SZW5vdmFjYW8uTm90IiBsYWJlbD0iUmVub3Zhw6fDo28gQ29uY2lsaWHDp8OjbyBJbmZydXTDrWZlcmEiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBDb250dWRvIHJlc3RvdSBpbmZydXTDrWZlcmEgYSB0ZW50YXRpdmEgZGUgc29sdcOnw6NvIGNvbnNlbnN1YWwgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoucGVsb30gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5QYXJ0ZXNTZW1Ob3Zhc1Byb3ZhcyIgbGFiZWw9Ik5lbmh1bSBwcm9kdcOnw6NvIGRlIHByb3ZhcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QntUb2RhdmlhLCBhcyBwYXJ0ZXMgZGVjbGFyYXJhbSBxdWUgbsOjbyBkZXNlamFtIHByb2R1emlyIG5vdmFzIHByb3Zhcy59CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkRlbWFuZGFkby5Db250ZXN0YWNhb09yYWwiIGxhYmVsPSJDb250ZXN0YcOnw6NvIE9yYWwiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBDb25jZWRpZGEgYSBwYWxhdnJhLCBhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSBhcHJlc2VudG91IHN1YSAjOkJ7Y29udGVzdGHDp8Ojb30gbmEgZm9ybWEgcXVlIHNlZ3VlOiAiIzpCe01NIEp1w616YSwgWFhYQ29udGV0YcOnw6NvWFhYfSIuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIAogICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkluaWNpb1Nlc3Nhb0luc3RydWNhbyIgbGFiZWw9IkluaWNpbyBTZXNzYW8gSW5zdHJ1Y2FvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQXRvIGNvbnTDrW51bywgcGFzc291LXNlIHBhcmEgYSBpbnN0cnXDp8OjbyBwcm9jZXNzdWFsICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6LnBlbG99ICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfS4gCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkRlbWFuZGFudGVNYW5pZlByZWxpbWluYXJlc0RpZ2l0YWRvIiBsYWJlbD0iTWFuaWZlc3Rhw6fDo28gRGVtYW5kYW50ZSBhY2VyY2EgY29udGVzdGHDp8OjbyBlL291IHByZWxpbWluYXJlcyAtIGRpZ2l0YWRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgRm9pIGNvbmNlZGlkYSBhIHBhbGF2cmEgYW8gYWR2b2RnYWRvIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gcGFyYSBzZSBtYW5pZmVzdGFyCiAgICAgICAgICAgICAgICAgICAgYWNlcmNhIGRhIGNvbnRlc3Rhw6fDo28gZS9vdSBwcmVsaW1pbmFyZXMsIHRlbmRvIG8gZmVpdG8gZGEgZm9ybWEgcXVlIHNlZ3VlOiAjOkJ7IiN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfSwgWFhYTWFuaWZlc3RhY2FvIn0uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkRlbWFuZGFudGVNYW5pZlByZWxpbWluYXJlc0dyYXZhZG8iIGxhYmVsPSJNYW5pZmVzdGHDp8OjbyBEZW1hbmRhbnRlIGFjZXJjYSBjb250ZXN0YcOnw6NvIGUvb3UgcHJlbGltaW5hcmVzIC0gZ3JhdmFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEZvaSBjb25jZWRpZGEgYSBwYWxhdnJhIGFvIGFkdm9kZ2FkbyBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IHBhcmEgc2UgbWFuaWZlc3RhcgogICAgICAgICAgICAgICAgICAgIGFjZXJjYSBkYSBjb250ZXN0YcOnw6NvIGUvb3UgcHJlbGltaW5hcmVzLCB0ZW5kbyBvIGZlaXRvIGVtICM6VXtncmF2YcOnw6NvIGF1ZGlvdmlzdWFsfSwgYW5leGEgYSBwcmVzZW50ZSBhdGEgKCM6VXtYWFhJRFhYWH0pLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIDwhLS0gSlVOVEFEQSBQQVJURVMgLS0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uSnVudGFkYS5BdGl2byIgbGFiZWw9Ikp1bnRhZGEgUHJvdmFzICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9ICM6QntyZXF1ZXJldSBhIGp1bnRhZGEgZGUgZG9jdW1lbnRvKHMpL23DrWRpYShzKX0gY29uc2lzdGVudGVzIGVtICM6QntYWFhEZXNjcmV2ZXJKdW50YWRhWFhYWH0sIHRlbmRvIHNpZG8gZGVmZXJpZG8gbyBwZWlkbwogICAgICAgICAgICAgICAgICAgICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6LnBlbG99ICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfSBlIGxoZSBjb25jZWRldSBvIHByYXpvIGRlIDYgKHNlaXMgaG9yYXMpIHBhcmEgcHJvbW92ZXIgYSBqdW50YWRhIG5vIHNpc3RlbWEgUEplLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5KdW50YWRhLlBhc3Npdm8iIGxhYmVsPSJKdW50YWRhIFByb3ZhcyAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gIzpCe3JlcXVlcmV1IGEganVudGFkYSBkZSBkb2N1bWVudG8ocykvbcOtZGlhKHMpfSBjb25zaXN0ZW50ZXMgZW0gIzpCe1hYWERlc2NyZXZlckp1bnRhZGFYWFhYfSwgdGVuZG8gc2lkbyBkZWZlcmlkbyBvIHBlaWRvCiAgICAgICAgICAgICAgICAgICAgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoucGVsb30gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19IGUgbGhlIGNvbmNlZGV1IG8gcHJhem8gZGUgNiAoc2VpcyBob3JhcykgcGFyYSBwcm9tb3ZlciBhIGp1bnRhZGEgbm8gc2lzdGVtYSBQSmUuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIAogICAgICAgIDwhLS0tIHByb2R1w6fDo28gcHJvdmEgb3JhbC0tPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlByb2R1Y2FvUHJvdmFPcmFsQXVkaXZpc3VhbCIgbGFiZWw9IlByb2R1w6fDo28gZGUgUHJvdmEgT3JhbCIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIFBhc3NvdS1zZSBwYXJhIGEgIzpCe3Byb2R1w6fDo28gZGUgcHJvdmEgb3JhbH0gY29tIGNvbGhlaXRhIGRlIGRlcG9pbWVudG8gZS9vdSBpbnF1aXJpw6fDo28gZGUgdGVzdGVtdW5oYXMgYXByZXNlbnRhZGFzIAogICAgICAgICAgICAgICAgICAgIHBlbGFzIHBhcnRlcywgYXMgcXVhaXMgZm9yYW0gb3V2aWRhcyBzZXBhcmFkYW1lbnRlIG5hIGZvcm1hIHF1ZSBzZWd1ZSBhZGlhbnRlLiBEZXBvaW1lbnRvKHMpIHRvbWFkbyhzKSBlbSB2w61kZW8sIGFuZXhvIGFvIHNpc3RlbWEgUEplIE1pZGlhcy4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlRlc3RlbXVuaGEuQXRpdm8uanVzdGlmaWNhdGl2YSIgbGFiZWw9Ikp1c3RpZmljYXRpdmEgb2l0aXZhIHRlc3RlbXVuaGEocykgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gcmVxdWVyZXUgYSBvaXRpdmEgZGUgdGVzdGVtdW5oYShzKSBhIGZpbSBkZSBjb21wcm92YXIgWFhYWFRleHRvTGl2cmVYWFhYLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uVGVzdGVtdW5oYS5QYXNzaXZvLmp1c3RpZmljYXRpdmEiIGxhYmVsPSJKdXN0aWZpY2F0aXZhIG9pdGl2YSB0ZXN0ZW11bmhhKHMpICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSByZXF1ZXJldSBhIG9pdGl2YSBkZSB0ZXN0ZW11bmhhKHMpIGEgZmltIGRlIGNvbXByb3ZhciBYWFhYVGV4dG9MaXZyZVhYWFguCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICA8IS0tIEZJWEHDh8ODTyBERVBPSU1FTlRPUyAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BdGl2b0RlcG9pbWVudG8iIGxhYmVsPSJEZXBvaW1lbnRvICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCeyM6VXtERVBPSU1FTlRPIFBFU1NPQUwgREEgUEFSVEUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhVUN9ICN7ajIuZW52LlBKZVZhcnMucGFydGVzLmF0aXZhLm5vbWVVQ319fQogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5QYXNzaXZvRGVwb2ltZW50byIgbGFiZWw9IkRlcG9pbWVudG8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7REVQT0lNRU5UTyBQRVNTT0FMIERBIFBBUlRFICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhVUN9ICN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZVVDfX19CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlRlc3RlbXVuaGFBdGl2bzEiIGxhYmVsPSJUZXN0ZW11bmhhICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IDHCqiIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7UFJJTUVJUkEgVEVTVEVNVU5IQSBEQSBQQVJURSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmFVQ30sIFNyKGEpLiAKICAgICAgICAgICAgICAgICAgICBYWFhOb21lVGVzdGVtdW5oYVhYWFh9fSwgYnJhc2lsZWlybyhhKSwgWFhYRXN0YWRvQ2l2aWxYWFgsIFhYWFhQcm9maXNzw6NvWFhYWCwgcmVzaWRlbnRlIGUgZG9taWNpbGlhZG8oYSkgw6AgWFhYWEVuZGVyZcOnb1hYWFgsIG5lc3RhIGNpZGFkZSwgCiAgICAgICAgICAgICAgICAgICAgcG9ydGFkb3IgZG8gUkcgWFhYUkdYWFhYIGUgQ1BGIFhYWENQRlhYWC4gQW9zIGNvc3R1bWVzIG5hZGEgZGlzc2UuIFRlc3RlbXVuaGEgY29tcHJvbWlzc2FkYSBuYSBmb3JtYSBkYSBsZWkuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uVGVzdGVtdW5oYUF0aXZvMiIgbGFiZWw9IlRlc3RlbXVuaGEgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30gMsKqIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCeyM6VXtTRUdVTkRBIFRFU1RFTVVOSEEgREEgUEFSVEUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhVUN9LCBTcihhKS4gCiAgICAgICAgICAgICAgICAgICAgWFhYTm9tZVRlc3RlbXVuaGFYWFhYfX0sIGJyYXNpbGVpcm8oYSksIFhYWEVzdGFkb0NpdmlsWFhYLCBYWFhYUHJvZmlzc8Ojb1hYWFgsIHJlc2lkZW50ZSBlIGRvbWljaWxpYWRvKGEpIMOgIFhYWFhFbmRlcmXDp29YWFhYLCBuZXN0YSBjaWRhZGUsIAogICAgICAgICAgICAgICAgICAgIHBvcnRhZG9yIGRvIFJHIFhYWFJHWFhYWCBlIENQRiBYWFhDUEZYWFguIEFvcyBjb3N0dW1lcyBuYWRhIGRpc3NlLiBUZXN0ZW11bmhhIGNvbXByb21pc3NhZGEgbmEgZm9ybWEgZGEgbGVpLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLlRlc3RlbXVuaGFBdGl2bzMiIGxhYmVsPSJUZXN0ZW11bmhhICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IDPCqiIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7VEVSQ0VJUkEgVEVTVEVNVU5IQSBEQSBQQVJURSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmFVQ30sIFNyKGEpLiAKICAgICAgICAgICAgICAgICAgICBYWFhOb21lVGVzdGVtdW5oYVhYWFh9fSwgYnJhc2lsZWlybyhhKSwgWFhYRXN0YWRvQ2l2aWxYWFgsIFhYWFhQcm9maXNzw6NvWFhYWCwgcmVzaWRlbnRlIGUgZG9taWNpbGlhZG8oYSkgw6AgWFhYWEVuZGVyZcOnb1hYWFgsIG5lc3RhIGNpZGFkZSwgCiAgICAgICAgICAgICAgICAgICAgcG9ydGFkb3IgZG8gUkcgWFhYUkdYWFhYIGUgQ1BGIFhYWENQRlhYWC4gQW9zIGNvc3R1bWVzIG5hZGEgZGlzc2UuIFRlc3RlbXVuaGEgY29tcHJvbWlzc2FkYSBuYSBmb3JtYSBkYSBsZWkuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uVGVzdGVtdW5oYVBhc3Npdm8xIiBsYWJlbD0iVGVzdGVtdW5oYSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IDHCqiIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7UFJJTUVJUkEgVEVTVEVNVU5IQSBEQSBQQVJURSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YVVDfSwgU3IoYSkuIAogICAgICAgICAgICAgICAgICAgIFhYWE5vbWVUZXN0ZW11bmhhWFhYWH19LCBicmFzaWxlaXJvKGEpLCBYWFhFc3RhZG9DaXZpbFhYWCwgWFhYWFByb2Zpc3PDo29YWFhYLCByZXNpZGVudGUgZSBkb21pY2lsaWFkbyhhKSDDoCBYWFhYRW5kZXJlw6dvWFhYWCwgbmVzdGEgY2lkYWRlLCAKICAgICAgICAgICAgICAgICAgICBwb3J0YWRvciBkbyBSRyBYWFhSR1hYWFggZSBDUEYgWFhYQ1BGWFhYLiBBb3MgY29zdHVtZXMgbmFkYSBkaXNzZS4gVGVzdGVtdW5oYSBjb21wcm9taXNzYWRhIG5hIGZvcm1hIGRhIGxlaS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5UZXN0ZW11bmhhUGFzc2l2bzIiIGxhYmVsPSJUZXN0ZW11bmhhICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30gMsKqIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCeyM6VXtTRUdVTkRBIFRFU1RFTVVOSEEgREEgUEFSVEUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmFVQ30sIFNyKGEpLiAKICAgICAgICAgICAgICAgICAgICBYWFhOb21lVGVzdGVtdW5oYVhYWFh9fSwgYnJhc2lsZWlybyhhKSwgWFhYRXN0YWRvQ2l2aWxYWFgsIFhYWFhQcm9maXNzw6NvWFhYWCwgcmVzaWRlbnRlIGUgZG9taWNpbGlhZG8oYSkgw6AgWFhYWEVuZGVyZcOnb1hYWFgsIG5lc3RhIGNpZGFkZSwgCiAgICAgICAgICAgICAgICAgICAgcG9ydGFkb3IgZG8gUkcgWFhYUkdYWFhYIGUgQ1BGIFhYWENQRlhYWC4gQW9zIGNvc3R1bWVzIG5hZGEgZGlzc2UuIFRlc3RlbXVuaGEgY29tcHJvbWlzc2FkYSBuYSBmb3JtYSBkYSBsZWkuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uVGVzdGVtdW5oYVBhc3Npdm8zIiBsYWJlbD0iVGVzdGVtdW5oYSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IDPCqiIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7VEVSQ0VJUkEgVEVTVEVNVU5IQSBEQSBQQVJURSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YVVDfSwgU3IoYSkuIAogICAgICAgICAgICAgICAgICAgIFhYWE5vbWVUZXN0ZW11bmhhWFhYWH19LCBicmFzaWxlaXJvKGEpLCBYWFhFc3RhZG9DaXZpbFhYWCwgWFhYWFByb2Zpc3PDo29YWFhYLCByZXNpZGVudGUgZSBkb21pY2lsaWFkbyhhKSDDoCBYWFhYRW5kZXJlw6dvWFhYWCwgbmVzdGEgY2lkYWRlLCAKICAgICAgICAgICAgICAgICAgICBwb3J0YWRvciBkbyBSRyBYWFhSR1hYWFggZSBDUEYgWFhYQ1BGWFhYLiBBb3MgY29zdHVtZXMgbmFkYSBkaXNzZS4gVGVzdGVtdW5oYSBjb21wcm9taXNzYWRhIG5hIGZvcm1hIGRhIGxlaS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRW5jZXJyYW1lbnRvIiBsYWJlbD0iRW5jZXJyYW1lbnRvIEluc3RydcOnw6NvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoub0NhcH0gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19IGRlY2xhcm91IGVuY2VycmFkYSBhIHNlc3PDo28gZGUgaW5zdHJ1w6fDo28gcHJvY2Vzc3VhbC4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGlzcGVuc2FUZXN0ZW11bmhhcyIgbGFiZWw9IkRpc3BlbnNhIHRlc3RlbXVuaGEiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBKHMpIHBhcnRlKHMpIHJlcXVlcmV1KHJhbSkgb2l0aWl2YSBkZSB0ZXN0ZW11bmhhIGR1cmFudGUgYSBpbnN0cnXDp8OjbyBwcm9jZXNzdWFsLgogICAgICAgICAgICAgICAgICAgIFRvZGF2aWEgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoub30gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19IGEocykgZGlzcGVuc291IHBvciBqw6EgZXN0YXIgc2F0aXNmZWl0YSBjb20gbyB0ZW9yIHByb2JhdMOzcmlvCiAgICAgICAgICAgICAgICAgICAgasOhIHByb2R1emlkbyBwZWxhKHMpIHBhcnRlKHMpIG5vcyBhdHVzby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BbGVnRmluIiBsYWJlbD0iQXByZXNlbnRhciByYXrDtWVzIGZpbmFpcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIENvbnRpbnVhbmRvIGEgc2Vzc8OjbyBkZSBpbnN0cnXDp8OjbywgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoub30gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19IGNvbmNlZGV1IGEgcGFsYXZyYSBhb3MgYWR2b2dhZG9zIGRhcyBwYXJ0ZXMgYSBmaW0gZGUgYXByZXNlbnRhcmVtIAogICAgICAgICAgICAgICAgICAgIHN1YXMgcmF6w7VlcyBmaW5haXMuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uQWxlZ0Zpbi5yZW1pc3NpdmFzIiBsYWJlbD0iUmF6w7VlcyBlbSByZW1pc3PDo28gaW5pY2lhbCBlIGNvbnRlc3Rhw6fDo28iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBcyBwYXJ0ZXMgbyBmaXplcmFtIGRlIGZvcm1hIHJlbWlzc2F2YSDDoCBleG9yZGlhbCBlIMOgIGNvbnRlc3Rhw6fDo28uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BbGVnRmluLkF0aXZvLnJlbWlzc2l2YSIgbGFiZWw9IlJhesOnw7VlcyBGaW5haXMgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30gcmVtaXNzaXZhIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IGFwcmVzZW50b3Ugc3VhcyByYXrDtWVzIGZpbmFpcyBkYSBmb3JtYSByZW1pc3NpdmEgw6AgaW5pY2lhbC4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BbGVnRmluLlBhc3Npdm8ucmVtaXNzaXZhIiBsYWJlbD0iUmF6w6fDtWVzIEZpbmFpcyAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhc3Npdm99IHJlbWlzc2l2YSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9IGFwcmVzZW50b3Ugc3VhcyByYXrDtWVzIGZpbmFpcyBkYSBmb3JtYSByZW1pc3NpdmEgw6AgY29udGVzdGHDp8Ojby4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uQWxlZ0Zpbi5BdGl2by5kaWdpdGFkbyIgbGFiZWw9IlJhesOnw7VlcyBGaW5haXMgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30gLSBkaWdpdGFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBhcHJlc2VudG91IHN1YXMgcmF6w7VlcyBmaW5haXMgZGEgZm9ybWEgcXVlIHNlZ3VlOiAjOkJ7IiN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfSwgWFhYUmF6w7Vlc0ZpbmFpc1hYWCJ9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSW5zdHJ1Y2FvLkFsZWdGaW4uUGFzc2l2by5kaWdpdGFkbyIgbGFiZWw9IlJhesOnw7VlcyBGaW5haXMgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSAtIGRpZ2l0YWRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gYXByZXNlbnRvdSBzdWFzIHJhesO1ZXMgZmluYWlzIGRhIGZvcm1hIHF1ZSBzZWd1ZTogIzpCeyIje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5NTX0sIFhYWFJhesO1ZXNGaW5haXNYWFgifS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5BbGVnRmluLkF0aXZvLmdyYXZhZG8iIGxhYmVsPSJSYXrDp8O1ZXMgRmluYWlzICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IC0gZ3JhdmFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBhcHJlc2VudG91IHN1YXMgcmF6w7VlcyBmaW5haXMgZW0gZ3JhdmHDp8OjbyBhdWRpdmlzdWFsLCBhbmV4YSDDoSBwcmVzZW50ZSBhdGEgKCM6QntYWFhJRFhYWH0pCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uQWxlZ0Zpbi5QYXNzaXZvLmdyYXZhZG8iIGxhYmVsPSJSYXrDp8O1ZXMgRmluYWlzICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30gLSBncmF2YWRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gYXByZXNlbnRvdSBzdWFzIHJhesO1ZXMgZmluYWlzIGVtIGdyYXZhw6fDo28gYXVkaXZpc3VhbCwgYW5leGEgw6EgcHJlc2VudGUgYXRhICgjOkJ7WFhYSURYWFh9KQogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgIAogICAgICAgIAogICAgICAgIDwhLS0gaW5zdHJ1w6fDo28gZGVwb2ltZW50byAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5EZXBvaW1lbnRvRW1WaWRlbyIgbGFiZWw9IkRlcG9pbWVudG8gZW0gdsOtZGVvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgRGVwb2ltZW50byB0b21hZG8gZW0gdsOtZGVvLCBhbmV4byDDoCBwcmVzZW50ZSBhdGEgbm8gUEplIChYWFhJRFhYWCkuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVwb2ltZW50b1BlcmdNYWdpc3RyYWRvIiBsYWJlbD0iRGVwb2ltZW50byBwZXJndW50YXMgbWFnaXN0cmFkbyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6VXvDgHMgcGVyZ3VudGFzIGZvcm11bGFkYXMgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoucGVsb30gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19fSwgcmVzcG9uZGV1ICBYWFhSZXNwb3N0YXNYWFgKICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5EZXBvaW1lbnRvUGVyZ0FkdkF0aXZvIiBsYWJlbD0iRGVwb2ltZW50byBwZXJndW50YXMgYWR2b2dhZG8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOlV7w4BzIHBlcmd1bnRhcyBmb3JtdWxhZGFzIHBlbG8oYSkgYWR2b2dhZG8oYSkgZGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfX0sIHJlc3BvbmRldSAgWFhYUmVzcG9zdGFzWFhYCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5JbnN0cnVjYW8uRGVwb2ltZW50b1BlcmdBZHZQYXNzaXZvIiBsYWJlbD0iRGVwb2ltZW50byBwZXJndW50YXMgYWR2b2dhZG8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6VXvDgHMgcGVyZ3VudGFzIGZvcm11bGFkYXMgcGVsbyhhKSBhZHZvZ2FkbyhhKSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX19LCByZXNwb25kZXUgIFhYWFJlc3Bvc3Rhc1hYWAogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5EZXBvaW1lbnRvUGVyZ0FkdkF0aXZvTmFkYSIgbGFiZWw9IkRlcG9pbWVudG8gc2VtIHBlcmd1bnRhcyBhZHZvZ2FkbyAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLmF0aXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6VXtEYWRhIGEgcGFsYXZyYSBhKG8pIGFkdm9nYWRvKGEpIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIG5hZGEgcGVyZ3VudG91fS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkluc3RydWNhby5EZXBvaW1lbnRvUGVyZ0FkdlBhc3Npdm9OYWRhIiBsYWJlbD0iRGVwb2ltZW50byBzZW0gcGVyZ3VudGFzIGFkdm9nYWRvICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOlV7RGFkYSBhIHBhbGF2cmEgYShvKSBhZHZvZ2FkbyhhKSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0sIG5hZGEgcGVyZ3VudG91fS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPCEtLS0gSlVMR0FNRU5UTyAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkp1bGdhbWVudG8uUHJvZmVyaW1lbnRvIiBsYWJlbD0iUHJvZmVyaW1lbnRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQXRvIGNvbnTDrW51bywgI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoub30gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19IHBhc3NvdSBhIHByb2ZlcmlyOiAjOkJ7U0VOVEVOw4dBOiB9CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5Db250dW1hY2lhIiBsYWJlbD0iQ29udHVtw6FjaWEiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBDdWlkYS1zZSBkZSAjOkJ7I3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5jbGFzc2V9fSBwcm9wb3N0YSBwb3IgI3tqMi5lbnYuUEplVmFycy5wYXJ0ZXMuYXRpdmEubm9tZX0gZW0gZGVzZmF2b3IgZGUgI3tqMi5lbnYuUEplVmFycy5wYXJ0ZXMucGFzc2l2YS5ub21lfSwgcXVhbGlmaWNhZG9zIG5vcyBhdXRvcwogICAgICAgICAgICAgICAgICAgIERpc3BlbnNhZG8gbyByZWxhdMOzcmlvLCBub3MgdGVybW9zIGRvIGFydC4gMzggZGEgbGVpIHN1cHJhY2l0YWRhLgogICAgICAgICAgICAgICAgICAgIERlY2lkby4KICAgICAgICAgICAgICAgICAgICBBcGVzYXIgZGUgZGV2aWRhbWVudGUgaW50aW1hZGEsIGRlaXhvdSBkZSBjb21wYXJlY2VyIGEgcGFydGUgYXV0b3JhIGVtIGF1ZGnDqm5jaWEgdW1hLCAjOkJ7c2VtIGFwcmVzZW50YXIgcXVhbHF1ZXIganVzdGlmaWNhdGl2YX0uCiAgICAgICAgICAgICAgICAgICAgRGVudHJlIGFzIGNhdXNhcyBleHRpbnRpdmFzIGRvIHByb2Nlc3NvLCB0ZW0tc2UgbyBuw6NvIGNvbXBhcmVjaW1lbnRvIGRvIGF1dG9yIGVtIHF1YWxxdWVyIGRhcyBhdWRpw6puY2lhcyBkbyBwcm9jZXNzbywgY29uZm9ybWUgZGlzcMO1ZSBvIGFydC4gNTEsIEksIGRhIExlaSBuwrogOS4wOTkvOTUuCiAgICAgICAgICAgICAgICAgICAgSXN0byBwb3N0bywganVsZ28gZXh0aW50byBvIHByb2Nlc3NvIHNlbSBhcHJlY2lhw6fDo28gZG8gbcOpcml0bywgbm9zIHRlcm1vcyBkbyBhcnQuIDUxLCBpbmNpc28gSSwgZGEgTGVpIG7CuiA5LjA5OS85NSwgIzpCe3NlbSBjb25kZW5hciBhIHBhcnRlIHJlcXVlcmVudGUgbm8gcGFnYW1lbnRvIGRhcyBjdXN0YXMgcHJvY2Vzc3VhaXMgZW0gY2FzbyBkZSBwcm9wb3NpdHVyYSBkZSBub3ZhIGHDp8Ojb30uCiAgICAgICAgICAgICAgICAgICAgU2VtIGhvbm9yw6FyaW9zIGFkdm9jYXTDrWNpb3MsIGNvbmZvcm1lIGFydC4gNTUsIGNhcHV0LCBkYSBMZWkgYWNpbWEgY2l0YWRhLgogICAgICAgICAgICAgICAgICAgIENvbSBvIHRyw6Juc2l0byBlbSBqdWxnYWRvLCBkw6otc2UgYmFpeGEgZSBhcnF1aXZlLXNlLgogICAgICAgICAgICAgICAgICAgIFB1YmxpcXVlLXNlLiBSZWdpc3RyZS1zZS4gSW50aW1lLXNlIGFzIHBhcnRlcy4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5KdWxnYW1lbnRvLkRlc2lzdGVuY2lhIiBsYWJlbD0iRGVzaXN0w6puY2lhIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQ3VpZGEtc2UgZGUgIzpCeyN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28uY2xhc3NlfX0gcHJvcG9zdGEgcG9yICM6Qnsje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5ub21lfX0gZW0gZGVzZmF2b3IgZGUgIzpCeyN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZX19LCBxdWFsaWZpY2Fkb3Mgbm9zIGF1dG9zLgogICAgICAgICAgICAgICAgICAgICM6QntEaXNwZW5zYWRvIG8gUkVMQVTDk1JJT30sIG5vcyB0ZXJtb3MgZG8gYXJ0LiAzOCBkYSBMZWkgbsK6IDkuMDk5Lzk1LiAKICAgICAgICAgICAgICAgICAgICAjOkJ7RGVjaWRvfS4gCiAgICAgICAgICAgICAgICAgICAgQ29uZm9ybWUgcGVkaWRvIHJlYWxpemFkbyBwZWxhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIGVzdGEgIzpCe2Rlc2lzdGl1fSBkYSBwcmVzZW50ZSBhw6fDo28uIAogICAgICAgICAgICAgICAgICAgIENvbSBlZmVpdG8sIGV4dGluZ3VlLXNlIG8gcHJvY2Vzc28gcXVhbmRvIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBkZXNpc3RlIGRhIGHDp8OjbywgYXNzaW0gY29tbyBkaXNwb3N0byBubyBhcnQuIDIwMCwgcGFyw6FncmFmbyDDum5pY28sIGRvIE5vdm8gQ8OzZGlnbyBkZSBQcm9jZXNzbyBDaXZpbC4gCiAgICAgICAgICAgICAgICAgICAgVGFsIGF0byBwb2RlIHNlciBob21vbG9nYWRvIG1lc21vIHNlbSBhIGFudcOqbmNpYSBkYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0sIGNvbW8gZGlzcMO1ZSBvIEVudW5jaWFkbyBuLiA5MCBkbyBGT05BSkUuIAogICAgICAgICAgICAgICAgICAgICM6QnsjOlV7UG9pcyBhIGV4dGluw6fDo28gZG8gcHJvY2Vzc28gaW5kZXBlbmRlcsOhLCBlbSBxdWFscXVlciBoaXDDs3Rlc2UsIGRlIHByw6l2aWEgaW50aW1hw6fDo28gcGVzc29hbCBkYXMgcGFydGVzfX0uIChhcnQuIDUxLCDCpyAxwrosIGRhIExlaSBuLiA5LjA5OSkuIAogICAgICAgICAgICAgICAgICAgIERpYW50ZSBkaXN0bywgIzpCeyM6VXtIT01PTE9HT30gYSBkZXNpc3TDqm5jaWF9IHJlcXVlcmlkYSBwZWxhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gZSAjOkJ7ZXh0aW5nbyBvIHByb2Nlc3NvICM6VXtzZW0gcmVzb2x1w6fDo28gZGUgbcOpcml0b319LCBjb20gZnVsY3JvIG5vIGFydC4gNDg1LCBWSUlJLCBkbyBDUEMsIGFwbGljw6F2ZWwgcG9yIGZvcsOnYSBkbyBhcnQuIDUxLCBjYXB1dCwgZGEgTGVpLiA5LjA5OS85NS4gCiAgICAgICAgICAgICAgICAgICAgU2VtIGN1c3RhcyBlIHNlbSBob25vcsOhcmlvcyBub3MgdGVybW9zIGRvIEFydC4gNTUgZGEgTGVpIG7Cui4gOS4wOTkvOTUuIAogICAgICAgICAgICAgICAgICAgIENvbSBvIHRyw6Juc2l0byBlbSBqdWxnYWRvLCBkw6otc2UgYmFpeGEgZSBhcnF1aXZlLXNlLiAKICAgICAgICAgICAgICAgICAgICBQdWJsaWNhZG8gZSBSZWdpc3RyYWRvIGNvbSBvIGxhbsOnYW1lbnRvIG5vIHNpc3RlbWEgUEplLiAKICAgICAgICAgICAgICAgICAgICBJbnRpbWFkb3MgcHJlc2VudGVzIGVtIGF1ZGnDqm5jaWEuIEVtIHNlbmRvIG8gY2FzbywgaW50aW1lbS1zZSBhcyBwYXJ0ZXMgYXVzZW50ZXMuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5Ib21vbG9nYWNhby1BSkctU2ltIiBsYWJlbD0iSG9tb2xvZ2HDp8OjbyAtIEFKRyBTaW0iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBEaXNwZW5zYWRvIG8gcmVsYXTDs3JpbyBub3MgdGVybW9zIGRvIGFydGlnbyAzOCBkYSBMZWkgOS4wOTkvOTUuCiAgICAgICAgICAgICAgICAgICAgIzpVe0RlZmlybyBvIHBlZGlkbyBkZSBhc3Npc3TDqm5jaWEgZ3JhdHVpdGEgZm9ybXVsYWRvIHBlbGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfX0uIENvbnNpZGVyYW5kbyBxdWUgYXMgcGFydGVzIHRyYW5zaWdpcmFtIGRlIAogICAgICAgICAgICAgICAgICAgIGxpdnJlIGUgZXNwb250w6JuZWEgdm9udGFkZSwgY29uZm9ybWUgdGVybW8gZGUgYWNvcmRvIHJlYWxpemFkbyBjb25zdGFudGUgbm9zIGF1dG9zLCAjOkJ7IzpVe0hPTU9MT0dPfSBwb3Igc2VudGVuw6dhfSAKICAgICAgICAgICAgICAgICAgICBwYXJhIHF1ZSBwcm9kdXphIHNldXMganVyw61kaWNvcyBlIGxlZ2FpcyBlZmVpdG9zIG8gYWp1c3RlIG1hbmlmZXN0YWRvIHBlbGFzIHBhcnRlcywgZSwgZW0gY29uc2VxdcOqbmNpYSwgIzpCe0pVTEdPIAogICAgICAgICAgICAgICAgICAgIEVYVElOVE8gbyBwcm9jZXNzbywgIzpVe2NvbSByZXNvbHXDp8OjbyBkbyBtw6lyaXRvfSwgY29tIGZ1bmRhbWVudG8gbm8gYXJ0LiA0ODcsIElJSSwgImIiLCBkbyBOb3ZvIEPDs2RpZ28gZGUgUHJvY2Vzc28gCiAgICAgICAgICAgICAgICAgICAgQ2l2aWx9LiBOw6NvIGV4aXN0aW5kbyBwcmV2aXPDo28gZGUgbXVsdGEgbm9zIHRlcm1vcyBkbyBhY29yZG8sIGFwbGljYS1zZSBtdWx0YSBkZSAzMCAlICh0cmludGEgcG9yIGNlbnRvKSBkbyB2YWxvciAKICAgICAgICAgICAgICAgICAgICBkbyBhY29yZG8gZW0gY2FzbyBkZSBkZXNjdW1wcmltZW50byBkZSBvYnJpZ2HDp8OjbyBkZSBwYWdhciBlIGRlIDMwJSAodHJpbnRhIHBvciBjZW50bykgZG8gdmFsb3IgZGEgY2F1c2EgZW0gY2FzbyAKICAgICAgICAgICAgICAgICAgICBkZSBvYnJpZ2HDp8OjbyBkZSBmYXplciwgbsOjbyBmYXplciBlIGRhci5TZW0gY3VzdGFzLiBQdWJsaWNhZG8gZSBSZWdpc3RyYWRvIGNvbSBvIGxhbsOnYW1lbnRvIG5vIHNpc3RlbWEgUEplLiAKICAgICAgICAgICAgICAgICAgICBJbnRpbWFkb3Mgb3MgcHJlc2VudGVzLiBFbSBoYXZlbmRvIHBhZ2FtZW50byB2b2x1bnTDoXJpbywgZXhwZcOnYS1zZSBhbHZhcsOhLiBBcMOzcywgYXJxdWl2ZW0tc2Ugb3MgYXV0b3MuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuSnVsZ2FtZW50by5Ib21vbG9nYWNhby1BSkctTmFvIiBsYWJlbD0iSG9tb2xvZ2HDp8OjbyAtIEFKRyBOw6NvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgRGlzcGVuc2FkbyBvIHJlbGF0w7NyaW8gbm9zIHRlcm1vcyBkbyBhcnRpZ28gMzggZGEgTGVpIDkuMDk5Lzk1LgogICAgICAgICAgICAgICAgICAgICM6VXtJbmRlZmlybyBvIHBlZGlkbyBkZSBhc3Npc3TDqm5jaWEganVkaWNpw6FyaWEgZ3JhdHVpdGEgZm9ybXVsYWRvIHBlbGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSwgCiAgICAgICAgICAgICAgICAgICAgdW1hIHZleiBxdWUgYSBwcm9maXNzw6NvIGUvb3UgbyB2YWxvciBkbyBiZW0gZGlzY3V0aWRvIG5vcyBhdXRvcyBkZW1vbnN0cmFtIHF1ZSBvIGF1dG9yIHBvc3N1aSBib2EgY29uZGnDp8OjbyBmaW5hbmNlaXJhLCAKICAgICAgICAgICAgICAgICAgICBuw6NvIHBvZGVuZG8gc2VyIGNvbnNpZGVyYWRvIGhpcG9zc3VmaWNpZW50ZS59LiBDb25zaWRlcmFuZG8gcXVlIGFzIHBhcnRlcyB0cmFuc2lnaXJhbSBkZSAKICAgICAgICAgICAgICAgICAgICBsaXZyZSBlIGVzcG9udMOibmVhIHZvbnRhZGUsIGNvbmZvcm1lIHRlcm1vIGRlIGFjb3JkbyByZWFsaXphZG8gY29uc3RhbnRlIG5vcyBhdXRvcywgIzpCeyM6VXtIT01PTE9HT30gcG9yIHNlbnRlbsOnYX0gCiAgICAgICAgICAgICAgICAgICAgcGFyYSBxdWUgcHJvZHV6YSBzZXVzIGp1csOtZGljb3MgZSBsZWdhaXMgZWZlaXRvcyBvIGFqdXN0ZSBtYW5pZmVzdGFkbyBwZWxhcyBwYXJ0ZXMsIGUsIGVtIGNvbnNlcXXDqm5jaWEsICM6QntKVUxHTyAKICAgICAgICAgICAgICAgICAgICBFWFRJTlRPIG8gcHJvY2Vzc28sICM6VXtjb20gcmVzb2x1w6fDo28gZG8gbcOpcml0b30sIGNvbSBmdW5kYW1lbnRvIG5vIGFydC4gNDg3LCBJSUksICJiIiwgZG8gTm92byBDw7NkaWdvIGRlIFByb2Nlc3NvIAogICAgICAgICAgICAgICAgICAgIENpdmlsfS4gTsOjbyBleGlzdGluZG8gcHJldmlzw6NvIGRlIG11bHRhIG5vcyB0ZXJtb3MgZG8gYWNvcmRvLCBhcGxpY2Etc2UgbXVsdGEgZGUgMzAgJSAodHJpbnRhIHBvciBjZW50bykgZG8gdmFsb3IgCiAgICAgICAgICAgICAgICAgICAgZG8gYWNvcmRvIGVtIGNhc28gZGUgZGVzY3VtcHJpbWVudG8gZGUgb2JyaWdhw6fDo28gZGUgcGFnYXIgZSBkZSAzMCUgKHRyaW50YSBwb3IgY2VudG8pIGRvIHZhbG9yIGRhIGNhdXNhIGVtIGNhc28gCiAgICAgICAgICAgICAgICAgICAgZGUgb2JyaWdhw6fDo28gZGUgZmF6ZXIsIG7Do28gZmF6ZXIgZSBkYXIuU2VtIGN1c3Rhcy4gUHVibGljYWRvIGUgUmVnaXN0cmFkbyBjb20gbyBsYW7Dp2FtZW50byBubyBzaXN0ZW1hIFBKZS4gCiAgICAgICAgICAgICAgICAgICAgSW50aW1hZG9zIG9zIHByZXNlbnRlcy4gRW0gaGF2ZW5kbyBwYWdhbWVudG8gdm9sdW50w6FyaW8sIGV4cGXDp2Etc2UgYWx2YXLDoS4gQXDDs3MsIGFycXVpdmVtLXNlIG9zIGF1dG9zLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkp1bGdhbWVudG8uU2Vydmljb1RlcmNlaXJvIiBsYWJlbD0iU2VydmnDp29zIGRlIFRlcmNlaXJvcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgpDdWlkYS1zZSBkZSAjOkJ7I3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5jbGFzc2V9fSBwcm9wb3N0YSBwb3IgIzpCeyN7ajIuZW52LlBKZVZhcnMucGFydGVzLmF0aXZhLm5vbWVVQ319IGVtIGZhY2UgZGUgIzpCeyN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZVVDfX0sIHF1YWxpZmljYWRvcyBub3MgYXV0b3MsIHBsZWl0ZWFuZG8gYSBjb25kZW5hw6fDo28gZGEgcmVjbGFtYWRhIGFvIHBhZ2FtZW50byBkZSBkYW5vcyBtb3JhaXMgZSBtYXRlcmlhaXMgZW0gZGVjb3Jyw6puY2lhIGRhIGNvYnJhbsOnYSBkZSBzZXJ2acOnb3MgZGUgdGVyY2Vpcm9zLiAKIzpCe0Rpc3BlbnNhZG8gbyBSRUxBVMOTUklPfSwgw6AgbHV6IGRvIGFydGlnbyAzOCBkYSBsZWkgbsK6IDkwOTkvOTUuICAKIzpCe0ZVTkRBTUVOVEHDh8ODT30gIAojOkJ7REVGRVJJTUVOVE8gRE8gQkVORUbDjUNJTyBEQSBKVVNUScOHQSBHUkFUVUlUQX0gIApPIGFydC4gOTgsIMKnIDEuwrosIGRvIENQQy8yMDE1LCBhbyBwcmV2ZXIgYSBncmF0dWlkYWRlIGRlIGp1c3Rpw6dhLCBnYXJhbnRlIGEgaXNlbsOnw6NvIG7Do28gYXBlbmFzIChpKSBkb3MgaG9ub3LDoXJpb3MgZGUgYWR2b2dhZG8sIChpaSkgZG9zIGhvbm9yw6FyaW9zIGRvIHBlcml0bywgKGlpaSkgZGFzIGN1c3RhcyBqdWRpY2nDoXJpYXMg4oCTIGluY2x1c2l2ZSBlbSByZWxhw6fDo28gYSBzZXJ2ZW50dcOhcmlvcyBkYSBqdXN0acOnYSDigJMgZSAoaXYpIGRhcyBkZXNwZXNhcyBjb20gYXMgcHVibGljYcOnw7VlcyBkZSBhdG9zIG9maWNpYWlzLCBlbnRyZSBvdXRyYXMuICAKQSBwcmV2aXPDo28gZGUgZ3JhdHVpZGFkZSBkbyBhcnQuIDk4IGRvIENQQyBkZXZlIHNlciBpbnRlcnByZXRhZGEgY29uZm9ybWUgYSBDb25zdGl0dWnDp8Ojby4gTm9zIHRlcm1vcyBkbyBhcnRpZ28gNcK6LCBMWFhJViwgZGEgQ2FydGEgTWFnbmE6IOKAnCM6QnsjOkl7byBFc3RhZG8gcHJlc3RhcsOhIGFzc2lzdMOqbmNpYSBqdXLDrWRpY2EgaW50ZWdyYWwgZSAjOlV7Z3JhdHVpdGEgYW9zIHF1ZSBjb21wcm92YXJlbSBpbnN1ZmljacOqbmNpYSBkZSByZWN1cnNvc319feKAnS4gCiM6VXtPIGp1aXogcG9kZXLDoSBpbmRlZmVyaXIgbyBwZWRpZG8gc2UgaG91dmVyIG5vcyBhdXRvcyBlbGVtZW50b3MgcXVlIGV2aWRlbmNpZW0gYSBmYWx0YSBkb3MgcHJlc3N1cG9zdG9zIGxlZ2FpcyBwYXJhIGEgY29uY2Vzc8OjbyBkZSBncmF0dWlkYWRlIGUgZGVmZXJpciBzZSBjb252ZW5jaWRvIGRhIGhpcG9zc3VmaWNpw6puY2lhIGRhIHBhcnRlLiBObyBwcmVzZW50ZSBjYXNvIGVudGVuZG8gY2FyYWN0ZXJpemFkYSBzdWEgaGlwb3NzdWZpY2nDqm5jaWEuIH0KUG9ydGFudG8sICM6QnsjOlV7ZGVmaXJvIG8gcGVkaWRvIGRlIGFzc2lzdMOqbmNpYSBqdWRpY2nDoXJpYSBncmF0dWl0YX19IG5vcyB0ZXJtb3MgZG8gYXJ0LiA5OCBkbyBOQ1BDLiAKIzpCe0RPIEpVTEdBTUVOVE8gQU5URUNJUEFETyBETyBNw4lSSVRPfSAgCk8gYXJ0LiAzNTUuICBkbyBDUEMgcHJldsOqIHF1ZSAiTyBqdWl6IGp1bGdhcsOhIGFudGVjaXBhZGFtZW50ZSBvIHBlZGlkbywgcHJvZmVyaW5kbyBzZW50ZW7Dp2EgY29tIHJlc29sdcOnw6NvIGRlIG3DqXJpdG8sIHF1YW5kbzogSSAtIG7Do28gaG91dmVyIG5lY2Vzc2lkYWRlIGRlIHByb2R1w6fDo28gZGUgb3V0cmFzIHByb3ZhcyIuIE5vIHByZXNlbnRlIGNhc28gb3MgZG9jdW1lbnRvcyBqw6EgYXByZXNlbnRhZG9zIHPDo28gc3VmaWNpZW50ZXMgcGFyYSBhcHJlY2lhw6fDo28gZGEgY29udHJvdsOpcnNpYSwgbW90aXZvIHBlbG8gcXVhbCAjOkJ7IzpVe3Bhc3NvIGFvIGp1bGdhbWVudG8gYW50ZWNpcGFkbyBkbyBtw6lyaXRvfX0sIG5vcyB0ZXJtb3MgZG8gZGlzcG9zaXRpdm8gYWNpbWEgbWVuY2lvbmFkby4gIAojOkJ7QVBMSUNBw4fDg08gRE8gQ8OTRElHTyBERSBERUZFU0EgRE8gQ09OU1VNSURPUn0gIApOw6NvIHBhaXJhbSBkw7p2aWRhcyBubyBzZW50aWRvIGRlIHF1ZSBow6EsIG5lc3RlcyBhdXRvcywgZXhwbMOtY2l0YSByZWxhw6fDo28ganVyw61kaWNhIGRlIGNvbnN1bW8gZW50cmUgYXMgcGFydGVzLiBBIHBhcnRlIGF1dG9yYSAjOkJ7ZW5xdWFkcmEtc2UgY29tbyBjb25zdW1pZG9yYX0sIG5vcyB0ZXJtb3MgZG8gYXJ0LiAywrogZG8gQ8OzZGlnbyBkZSBEZWZlc2EgZG8gQ29uc3VtaWRvciAtIENEQyAoTGVpIG4uIDguMDc4LzE5OTApLiAjOkJ7QSBlbXByZXNhIHJlY2xhbWFkYSwgcG9yIHN1YSB2ZXosIHJldmVzdGUtc2UgZGEgY29uZGnDp8OjbyBkZSBmb3JuZWNlZG9yYX0sIGNvbmZvcm1lIG8gYXJ0LiAzwrogZG8gZXN0YXR1dG8gZW0gY29tZW50by4gCkEgbGVnaXNsYcOnw6NvIGNvbnN1bWVyaXN0YSBhc3NlZ3VyYSwgY29uZm9ybWUgbyBhcnRpZ28gNsK6LCBpbmNpc28gVkksIGRvIENEQywgYSBlZmV0aXZhIHByZXZlbsOnw6NvIGUgcmVwYXJhw6fDo28gZGUgZGFub3MgcGF0cmltb25pYWlzIGUgbW9yYWlzLCBpbmRpdmlkdWFpcywgY29sZXRpdm9zIGUgZGlmdXNvcyBzb2ZyaWRvcyBwZWxvcyBjb25zdW1pZG9yZXMuIEVzc2Ugw6kgbyB2acOpcyBwZWxvIHF1YWwgZGV2ZS1zZSBhcHJlY2lhciBhIHByZXNlbnRlIGRlbWFuZGEuCiM6QntSZXNzYWx0ZS1zZSBxdWUsIHBvciBzZXIgZm9ybmVjZWRvcmEsIGNvbmZvcm1lIG8gYXJ0LiAxNCBkbyBDREMsIHJlc3BvbmRlIG9iamV0aXZhbWVudGUgcG9yIGV2ZW50dWFsIGRhbm8gcHJvdm9jYWRvIGFvcyB1c3XDoXJpb3MsIGRlc2RlIHF1ZSBldmlkZW5jaWFkYSBhIHN1YSBjb25kdXRhIGlsw61jaXRhLCBvIG5leG8gZGUgY2F1c2FsaWRhZGUgZSBvIGRhbm8ufSAKIzpCe0FUTyBJTMONQ0lUT30gIApDb25zdGEgbmEgaW5pY2lhbCBxdWUgIzpCeyM6VXthIGRlbWFuZGFudGUgY2VsZWJyb3UgY29udHJhdG8gZGUgcHJlc3Rhw6fDo28gZGUgc2VydmnDp29zIGRlIHRlbGVmb25pYSBjb20gYSByZWNsYW1hZGF9fSwgY29udHVkbyBmb2kgaW5jbHXDrWRvIG9icmlnYXRvcmlhbWVudGUgbm8gY29udHJhdG8gdW0gc2VydmnDp28gZGUgdGVyY2Vpcm8gKGVtIGFsZ3VucyBtb21lbnRvcyBkZW5vbWluYWRvIFZpdm8gQ29udHJvbGUgU2VydmnDp28gRGlnaXRhbCBJSSksIG8gcXVlIGNhcmFjdGVyaXphcmlhIHZlbmRhIGNhc2FkYS4gClBvciBzdWEgdmV6LCBhIHJlY2xhbWFkYSBhcHJlc2VudG91IGRlZmVzYSBhbGVnYW5kbyBxdWUgbsOjbyBob3V2ZSBmYWxoYSBubyBkZXZlciBkZSBpbmZvcm1hw6fDo28sIHBvaXMgYSBjb2JyYW7Dp2EgZG8gc2VydmnDp28gZGUgdGVyY2Vpcm8gZXN0YXZhIGV4cHJlc3NhbWVudGUgcHJldmlzdGEgbmEgcHVibGljaWRhZGUgZG8gc2l0ZSBkYSByZWNsYW1hZGEsIHNlbSBuZW5odW1hIG9mZW5zYSBhbyBwcmluY8OtcGlvIGRhIGF1dG9ub21pYSBkYSB2b250YWRlLiBBZHV6IHF1ZSDDqSBwb3Nzw612ZWwgYSBjb250cmF0YcOnw6NvIGRvIHBsYW5vIHNlbSBvcyBzZXJ2acOnb3MgYWdyZWdhZG9zLCBlIHF1ZSBvIGF1dG9yIHBhZ2EgdW0gdmFsb3IgcHJvbW9jaW9uYWwgKHJlZHV6aWRvKS4KIApBbGVnYSwgYWluZGEsIHF1ZSAjOkJ7IzpVe2EgcHJldmlzw6NvIGRhIGNvYnJhbsOnYSBlbSBjb25qdW50byDDqSBhdXRvcml6YWRhIGNvbmZvcm1lIG8gUmVndWxhbWVudG8gR2VyYWwgZGUgRGlyZWl0b3MgZG8gQ29uc3VtaWRvciBkZSBTZXJ2acOnb3MgZGUgVGVsZWNvbXVuaWNhw6fDo28gKFJlc29sdcOnw6NvIG4uIDYzMi8yMDE3IGRhIEFOQVRFTCksIGJlbSBjb21vIHF1ZSBhIG1pZ3Jhw6fDo28gbsOjbyBnZXJvdSBxdWFscXVlciBwcmVqdcOtem8gZW0gdmFsb3IgYW8gY29uc3VtaWRvcn19LiAKRW50cmV0YW50bywgIzpCe3VtIHJlZ3VsYW1lbnRvIGluZnJhbGVnYWwgbsOjbyBwb2RlIGlyIGRlIGVuY29udHJvIGFvIHByZXZpc3RvIG5vIENEQ30sIHF1ZSDDqSBsZWkgZmVkZXJhbCwgZSBhZmlybWEgcXVlIGNvbmRpY2lvbmFyIGEgdmVuZGEgZGUgdW0gcHJvZHV0byBhIG91dHJvIMOpIHByw6F0aWNhIGRlIHZlbmRhIGNhc2FkYSwgdmVkYWRhIHBlbG8gYXJ0aWdvIDM5LCBpbmNpc28gSSwgcXVlIHByb8OtYmUgYW8gZm9ybmVjZWRvciBkZSBwcm9kdXRvcyBvdSBzZXJ2acOnb3MsIGRlbnRyZSBvdXRyYXMgcHLDoXRpY2FzIGFidXNpdmFzLCAiIzpCeyM6VXsjOkl7Y29uZGljaW9uYXIgbyBmb3JuZWNpbWVudG8gZGUgcHJvZHV0byBvdSBzZXJ2acOnbyBhbyBmb3JuZWNpbWVudG8gZGUgb3V0cm8gcHJvZHV0byBvdSBzZXJ2acOnbywgYmVtIGNvbW8sIHNlbSBqdXN0YSBjYXVzYSwgYSBsaW1pdGVzIHF1YW50aXRhdGl2b3N9fX0iLgpBZGVtYWlzLCBhbmFsaXNhbmRvIGEgcmVzb2x1w6fDo28gaW5kaWNhZGEgcGVsYSByw6ksIGUgbWVzbW8gbyBjb250cmF0bywgbsOjbyDDqSBvYnJpZ2FkYSBhIGluY2x1c8OjbyBkbyBzZXJ2acOnbyBkZSB0ZXJjZWlyby4gIzpCeyM6VXtBIG9wZXJhZG9yYSBkZXZlcmlhIGFwcmVzZW50YXIgYW8gY29uc3VtaWRvciBvIHNlcnZpw6dvIGRlIHRlbGVmb25pYSAodm96LCBkYWRvcyBlIHNtcykgZW0gdW0gY29udHJhdG8gZSBvcyBkZW1haXMgc2VydmnDp29zIGRlIHRlcmNlaXJvIGVtIGNvbnRyYXRvIGF1dMO0bm9tbywgY29tIGNvbmRpw6fDtWVzIGUgcGFnYW1lbnRvIGNsYXJhbWVudGUgZGlzc29jaWFkbyBkYSBtZW5zYWxpZGFkZSByZWd1bGFyIGRvIHBsYW5vIHRlbGVmw7RuaWNvLCBwb3NzaWJpbGl0YW5kbyBhbyBjb25zdW1pZG9yIGVzY29saGVyIHBlbGEgY29udHJhdGHDp8OjbyBvdSBuw6NvIGRvcyBzZXJ2acOnb3MgZGUgdGVyY2Vpcm9zLH19IG8gcXVlIG7Do28gb2NvcnJldSBubyBwcmVzZW50ZSBjYXNvLgpPcyBkb2N1bWVudG9zIGFwcmVzZW50YWRvcyBwZWxhIHJlY2xhbWFkYSAoZG9jdW1lbnRvcyBkZSB0ZWxhIGRlIGNvbXB1dGFkb3IgdW5pbGF0ZXJhbG1lbnRlIGNyaWFkb3MgcGVsYSBlbXByZXNhKSBuw6NvIHNlIG1vc3RyYXJhbSBzdWZpY2llbnRlcyBwYXJhIHByb3ZhciBhIGNvbnRyYXRhw6fDo28gZG8gc2VydmnDp28gb3Ugc2VxdWVyIHF1ZSBob3V2ZSBuZWdvY2lhw6fDo28gZGFzIHBhcnRlcyBuZXNzZSBzZW50aWRvLiBOw6NvIGZpY291IGNvbXByb3ZhZG8gbyBjdW1wcmltZW50byBhbyBkaXNwb3N0byBuYSByZWd1bGFtZW50YcOnw6NvIHN1cHJhbWVuY2lvbmFkYSwgb3Ugc2VqYSwgbsOjbyBhcHJlc2VudG91IG5lbmh1bSBjb250cmF0byBvdSBxdWFscXVlciBvdXRybyBtZWlvIGlkw7RuZW8gZGUgY29tcHJvdmHDp8OjbyBkYSBzb2xpY2l0YcOnw6NvIGRvcyBzZXJ2acOnb3MgcXVlc3Rpb25hZG9zLCBiZW0gY29tbyBuw6NvIHByb3ZvdSBxdWUgY29tdW5pY291IGEgYWx0ZXJhw6fDo28gZG9zIHNlcnZpw6dvcyBwcmVzdGFkb3MgYSBwYXJ0ZSBhdXRvcmEgYXRyYXbDqXMgZGUgZW5jYW1pbmhhbWVudG8gZGUgbWVuc2FnZW0gZGUgdGV4dG8gKFNNUykgZSB0ZXh0byBpbnNlcmlkbyBlbSBmYXR1cmEsIGNvbW8gYWxlZ2FkbyBlbSBzdWEgZGVmZXNhLgpEZXN0YSBmb3JtYSwgY29uc2lkZXJhbmRvIHF1ZSBhIGVtcHJlc2EgcmVjbGFtYWRhIG7Do28gY29uc2VndWl1IHNlIGRlc29uZXJhciBkYSBvYnJpZ2HDp8OjbyBkZSBwcm92YXIgYSBleGlzdMOqbmNpYSBkZSBzb2xpY2l0YcOnw6NvIGRhIGNvbnRyYXByZXN0YcOnw6NvIHF1ZXN0aW9uYWRhIG5hIHByZXNlbnRlIGRlbWFuZGEgZSBhIGxlZ2l0aW1pZGFkZSBkb3MgZMOpYml0b3MgcmVhbGl6YWRvcyBlbSBzdWFzIGZhdHVyYXMsIGNvbnN0YXRhLXNlIHF1ZSBob3V2ZSBldmlkZW50ZSBmYWxoYSBuYSBwcmVzdGHDp8OjbyBkbyBzZXJ2acOnby4KCgojOkJ7IzpVe0EgZmFsdGEgZGUgY2xhcmV6YSBubyBlc2NsYXJlY2ltZW50byBkbyBxdWUgc8OjbyBvcyBzZXJ2acOnb3MgZGUgdGVyY2Vpcm9zLCBzZW0gdW0gY29udHJhdG8gcHLDs3ByaW8sIGFpbmRhIGFmcm9udGEgbyBwcmluY8OtcGlvIGLDoXNpY28gw61uc2l0byBubyBhcnQuIDbCuiwgSUlJLCBkbyBDw7NkaWdvIGRlIERlZmVzYSBkbyBDb25zdW1pZG9yLCBzZWd1bmRvIG8gcXVhbCBvIHVzdcOhcmlvIHRlbSBkaXJlaXRvIMOgIGluZm9ybWHDp8OjbyBhZGVxdWFkYSBlIGNsYXJhfX0gc29icmUgb3MgcHJvZHV0b3MgZSBzZXJ2acOnb3MgcXVlIGVzdMOhIHJlY2ViZW5kby4gU2VndW5kbyBhcyBsacOnw7VlcyBkbyBpbnNpZ25lIFJpenphdHRvIE51bmVzIChJbiBDdXJzbyBkZSBEaXJlaXRvIGRvIENvbnN1bWlkb3IsIDfCqiBlZC4sIHAuIDk5KToK4oCcTm8gcXVlIHRhbmdlIGFvIGRldmVyIGRlIGluZm9ybWFyIGRhcyBwZXNzb2FzIGVtIGdlcmFsIGUgZGFzIHBlc3NvYXMganVyw61kaWNhcyBjb20gbmF0dXJlemEganVyw61kaWNhIHByaXZhZGEsIMOpIG8gQ8OzZGlnbyBkZSBEZWZlc2EgZG8gQ29uc3VtaWRvciBxdWUgZXN0YWJlbGVjZSB0YWwgb2JyaWdhdG9yaWVkYWRlIGFvIGZvcm5lY2Vkb3IuIFRlbmRvIGVtIHZpc3RhIHF1ZSBhIExlaSBuLiA4LjA3OC85MCBuYXNjZSwgY29tbyB2aW1vcywgZGFzIGRldGVybWluYcOnw7VlcyBjb25zdGl0dWNpb25haXMgcXVlIG9icmlnYW0gYSBxdWUgc2VqYSBmZWl0YSBhIGRlZmVzYSBkbyBjb25zdW1pZG9yLCBpbXBsYW50YWRhIGVtIG1laW8gYSB1bWEgc8OpcmllIGRlIHByaW5jw61waW9zLCB0b2RvcyBpbnRlcnByZXRhZG9zIGUgYXBsaWPDoXZlaXMgZGUgZm9ybWEgaGFybcO0bmljYSwgbsOjbyByZXN0YSBkw7p2aWRhIGRlIHF1ZSBvIGRldmVyIGRlIGluZm9ybWFyIHPDsyBwb2RpYSBzZXIgaW1wb3N0byBhbyBmb3JuZWNlZG9y4oCdCiM6QnsjOlV7TsOjbyBow6Egbm9zIGF1dG9zIG5lbmh1bSBjb250cmF0byBhc3NpbmFkbyBwZWxhIHBhcnRlIGF1dG9yYSBjb25jb3JkYWRvIGVtIHBhZ2FyIG8gdmFsb3IgWCBwZWxvIHNlcnZpw6dvIGRlIHRlbGVmb25pYSAoZGFkb3MsIHZveiBlIHNtcykgZSBvIHZhbG9yIFkgcGVsb3Mgc2VydmnDp29zIGRlIHRlcmNlaXJvcywgY29tIGNsYXJhIG9ww6fDo28gZGUgbyBjbGllbnRlIGVzY29saGVyIHVtIG91IG91dHJvIHNlcnZpw6dvIG91IGFtYm9zLCBxdWFscXVlciBvdXRyYSBmb3JtYSBkZSB0ZW50YXIganVzdGlmaWNhciBhIGNvYnJhbsOnYSBvZmVuZGUgbyBDREMufX0gCiM6QnsjOlV7TyBDb25zdW1pZG9yIGRldmUgc2VyIGxpdnJlIHBhcmEgZXNjb2xoZXIgcXVlIHNlcnZpw6dvcyBxdWVyIGNvbnRyYXRhci59fQpQb3J0YW50bywgZGVzc3VtZS1zZSBkbyBhcHVyYWRvIG5vcyBhdXRvcywgYSAjOkJ7IzpVe3BsZW5hIGNhcmFjdGVyaXphw6fDo28gZGEgY29uZHV0YSBpbMOtY2l0YSBkYSByZXF1ZXJpZGEsIHF1YWwgc2VqYSwgY29tZXJjaWFsaXphw6fDo28gZGUgcGxhbm8gdGVsZWbDtG5pY28gY29tIG9icmlnYXRvcmllZGFkZSBkZSBjb250cmF0YcOnw6NvIGRlIHNlcnZpw6dvcyBkZSB0ZXJjZWlyb3MsIG8gcXVlIGZlcml1IGRlIGZvcm1hIGdyYXZlIGFzIG5vcm1hcyBwcm90ZXRpdmFzIGRvIENEQ319LgpPIGFjaW1hIGFmaXJtYWRvIHNlIGRlc3N1bWUgZG9zIHNlZ3VpbnRlcyBhcG9udGFtZW50b3MganVyaXNwcnVkZW5jaWFpczoKUkVDVVJTTyBJTk9NSU5BRE8uIFRFTEVGT05JQS4gQcOHw4NPIERFIENVTVBSSU1FTlRPIERFIENPTlRSQVRPIEMvQyBSRVNUSVRVScOHw4NPIERFIFZBTE9SRVMgRSBJTkRFTklaQcOHw4NPIFBPUiBEQU5PUyBNT1JBSVMuIFNFUlZJw4dPIE7Dg08gQ09OVFJBVEFETy4gQVBMSUNBw4fDg08gRE8gQ0RDLiAjOkJ7IzpVe07Do28gc2UgZGVzaW5jdW1iaW5kbyBhIHBhcnRlIHLDqSBkZSBjb21wcm92YXIgYSBjb250cmF0YcOnw6NvIGUgYSByZWd1bGFyaWRhZGUgZGEgY29icmFuw6dhIGRvcyBTZXJ2acOnb3MgRGUgVGVyY2Vpcm8gVGVsZWZvbmljYSBEYXRhICwgw7RudXMgcXVlIGxoZSBpbmN1bWJpYSwgY29uc29hbnRlIGRldGVybWluYSBvIGFydC4gMzczLCBJSSwgZG8gQ1BDLCDDqSBkZSBzZXIgcmVjb25oZWNpZGEgYSBpbmV4aWdpYmlsaWRhZGUgZG9zIHZhbG9yZXMgbGFuw6dhZG9zIG5hcyBmYXR1cmFzIGNvbSBhIHJlc3BlY3RpdmEgZGV2b2x1w6fDo28sIGVtIGRvYnJvLCBkb3MgdmFsb3JlcyBjb21wcm92YWRhbWVudGUgcGFnb3MgcGVsYSBwYXJ0ZSBhdXRvcmEufX0gUkVDVVJTTyBERVNQUk9WSURPIChUSlJTLiBSZWN1cnNvIEPDrXZlbCBOwrogNzEwMDc2OTU1OTYsIFF1YXJ0YSBUdXJtYSBSZWN1cnNhbCBDw612ZWwsIFR1cm1hcyBSZWN1cnNhaXMsIFJlbGF0b3I6IFNpbHZpYSBNYXJpYSBQaXJlcyBUZWRlc2NvLCBKdWxnYWRvIGVtIDIxLzA2LzIwMTgpLgpBUEVMQcOHw4NPIEPDjVZFTC4gT0JSSUdBw4fDg08gREUgRkFaRVIgQy9DIElOREVOSVpBVMOTUklBLiBDT0JSQU7Dh0EgREVOT01JTkFEQSAiU0VSVknDh09TIERFIFRFUkNFSVJPUyBURUxFRsOUTklDQSBEQVRBIi4gU0VSVknDh08gTsODTyBDT05UUkFUQURPLiBEQU5PIE1PUkFMIE7Dg08gQ09ORklHVVJBRE8uIE1FUk8gQUJPUlJFQ0lNRU5UTy4gU8OaTVVMQSA3NSBERVNURSBUSi4KCjEuIEN1aWRhLXNlIGRlIGHDp8OjbyBvYmpldGl2YW5kbyBhIGF1dG9yYSBvIGNhbmNlbGFtZW50byBkbyBzZWd1cm8gbsOjbyBzb2xpY2l0YWRvLCBhIGNvbmRlbmHDp8OjbyBkYSByw6kgbmEgZGV2b2x1w6fDo28gZW0gZG9icm8gZGUgdG9kb3Mgb3MgdmFsb3JlcyBjb2JyYWRvcyByZWZlcmVudGVzIGFvIHNlZ3VybyBuw6NvIGNvbnRyYXRhZG8sIGRlIGFjb3JkbyBjb20gbyBwYXLDoWdyYWZvIMO6bmljbyBkbyBhcnQuIDQyIGRvIENEQywgYWzDqW0gZG8gcGFnYW1lbnRvIGRlIGluZGVuaXphw6fDo28gYSB0w610dWxvIGRlIGRhbm8gbW9yYWwuIFNlbnRlbsOnYSBkZSBwcm9jZWTDqm5jaWEgcXVlIGZvaSBhbHZvIGRvIGFwZWxvIGRhIGVtcHJlc2EgcsOpIHB1Z25hbmRvIHBlbGEgaW1wcm9jZWTDqm5jaWEgZG9zIHBlZGlkb3MgYXV0b3JhaXMgb3UsIGFsdGVybmF0aXZhbWVudGUsIHBlbGEgcmVkdcOnw6NvIGRvIHF1YW50dW0gaW5kZW5pemF0w7NyaW8gZml4YWRvIGEgdMOtdHVsbyBkZSBkYW5vIG1vcmFsLgoKMi4gQSBoaXDDs3Rlc2Ugw6kgZGUgcmVzcG9uc2FiaWxpZGFkZSBjaXZpbCBvYmpldGl2YSBkZWNvcnJlbnRlIGRlIHJlbGHDp8OjbyBkZSBjb25zdW1vLCBlbnF1YWRyYW5kby1zZSBhdXRvcmEgZSByw6ksIHJlc3BlY3RpdmFtZW50ZSwgbmFzIGRlZmluacOnw7VlcyBsZWdhaXMgZGUgY29uc3VtaWRvcmEgZSBmb3JuZWNlZG9yYSBkZSBzZXJ2acOnb3MsIGNvbmZvcm1lIGFydGlnb3MgMsK6IGUgM8K6IGRhIExlaSBuwrogOC4wNzgvOTAuCgozLiBFc3RlIGRpcGxvbWEgbGVnYWwsIGluc3RpdHXDrWRvIHBhcmEgYXRlbmRlciBvIGRpc3Bvc3RvIHBlbG8gYXJ0LiA1wrosIGluY2lzbyBYWFhJSSwgZGEgQy5GLiwgdGVtIHBvciBvYmpldGl2byBvIGVxdWlsw61icmlvIGRhcyByZWxhw6fDtWVzIGRlIGNvbnN1bW8gZSBhc3NlZ3VyYSBvcyBkaXJlaXRvcyBkbyBjb25zdW1pZG9yLCBnYXJhbnRpbmRvLWxoZSBpbmRlbml6YcOnw6NvIHBvciBkYW5vcyBjYXVzYWRvcyBwb3IgZGVmZWl0b3MgcmVsYXRpdm9zIMOgIHByZXN0YcOnw6NvIGRlIHNlcnZpw6dvcywgaW5kZXBlbmRlbnRlbWVudGUgZGEgZXhpc3TDqm5jaWEgZGUgY3VscGEsIG5hIGZvcm1hIGRvIHNldSBhcnQuIDE0LiAKCjQuICM6QnsjOlV7RGVwcmVlbmRlLXNlIGRvIGNvbmp1bnRvIHByb2JhdMOzcmlvIGRvcyBhdXRvcyBxdWUgaG91dmUgZmFsaGEgbmEgcHJlc3Rhw6fDo28gZGUgc2VydmnDp29zIG9mZXJ0YWRvcyBwZWxhIGVtcHJlc2EgZGUgdGVsZWZvbmlhIHLDqSwgcmVzdGFuZG8gY29uZmlndXJhZGEgYWJ1c2l2aWRhZGUgZSBpbGVnYWxpZGFkZSBlbSBzdWEgY29uZHV0YSwgasOhIHF1ZSBhIG1lc21hIG7Do28gbG9ncm91IMOqeGl0byBlbSBjb21wcm92YXIgYSBsZWdpdGltaWRhZGUgZG8gc2VydmnDp28gY29icmFkby4gQXV0b3JhIGFwZWxhZGEgcXVlIGZvaSBjb2JyYWRhIGluZGV2aWRhbWVudGUgcG9yIHNlcnZpw6dvIG7Do28gY29udHJhdGFkbyAoU2VndXJvIGRlIFRlcmNlaXJvcyBUZWxlZsO0bmljYSBEYXRhKS4gQ29ycmV0YSBhIHNlbnRlbsOnYSBubyBpdGVtIGVtIHF1ZSBjb25kZW5vdSBhIGVtcHJlc2EgcsOpIG5hIGRldm9sdcOnw6NvIGVtIGRvYnJvIGRvcyB2YWxvcmVzIGluZGV2aWRhbWVudGUgY29icmFkb3MgZSBjb21wcm92YWRhbWVudGUgcGFnb3MsIGRlIGFjb3JkbyBjb20gbyBwcmV2aXN0byBubyBhcnQuIDQyLCBwYXLDoWdyYWZvIMO6bmljbyBkbyBDREMufX0KClsuLi5dCihUSlJKLiBBUEwgMDAxNzY1MTYzMjAxNjgxOTAwMDcuIE9JVEFWQSBDw4JNQVJBIEPDjVZFTC4gUmVsYXRvciBNw5ROSUNBIE1BUklBIENPU1RBIERJIFBJRVJPLiBKdWxnYW1lbnRvIDEzIGRlIE1hcsOnbyBkZSAyMDE4KQogCkpVSVpBRE9TIEVTUEVDSUFJUyBDw41WRUlTLiBQUk9DRVNTVUFMIENJVklMLiDDlE5VUyBEQSBQUk9WQS4gIzpCeyM6VXtDT05TVU1JRE9SLiBDT0JSQU7Dh0EgSU5ERVZJREEgREUgU0VSVknDh09TIE7Dg08gQ09OVFJBVEFET1MuIERFQ0xBUkHDh8ODTyBERSBJTkVYSVNUw4pOQ0lBIERFIETDiUJJVE9TIEFERVFVQURBTUVOVEUgUkVDT05IRUNJREEgTkEgT1JJR0VNfX0uIFJFQ1VSU08gQ09OSEVDSURPIEUgREVTUFJPVklETy4gU0VOVEVOw4dBIE1BTlRJREEgUE9SIFNFVVMgUFLDk1BSSU9TIEZVTkRBTUVOVE9TLiAxLiAjOkJ7IzpVe1NlIG8gY29uc3VtaWRvciwgcXVlIHBvc3N1aSBjb250cmF0byBkZSB0ZWxlZm9uaWEgbcOzdmVsIGNvbSBhIGVtcHJlc2EgcsOpLCBvcmEgcmVjb3JyZW50ZSwgYWZpcm1hIHF1ZSBuw6NvIGNvbnRyYXRvdSBvIHNlcnZpw6dvICJTZXJ2acOnb3MgZGUgVGVyY2Vpcm9zIFRlbGVmw7RuaWNhIERhdGEiLCBDw7NkaWdvcyBuwrpzLiA4NzAzOCBlIDQ5NjYwLCBlIGluc3RydWkgbyBmZWl0byBhZGVxdWFkYW1lbnRlLCBjdW1wcmlyaWEgYW8gZm9ybmVjZWRvciBwcm92YXIsIHBvciBwcm92YSBkb2N1bWVudGFsIHBlcnRpbmVudGUsIGEgY29udHJhdGHDp8OjbyBkbyBzZXJ2acOnbywgbm9zIHRlcm1vcyBkbyAgYXJ0LiAzNzMsIGRvIE5vdm8gQ8OzZGlnbyBkZSBQcm9jZXNzbyBDaXZpbFsxXSwgaGFqYSB2aXN0YSBxdWUgbsOjbyBzZSBwb2RlIGltcHV0YXIgw6AgcGFydGUgbyDDtG51cyBkZSBwcm9kdXppciBwcm92YSBkZSBmYXRvIG5lZ2F0aXZvLiBJbmV4aXN0aW5kbyB0YWwgcHJvdmEgbm9zIGF1dG9zLCByZXN0YSBjbGFybyBxdWUgYXMgY29icmFuw6dhcyByZWFsaXphZGFzIGFmZXRhcyBhbyBzZXJ2acOnbyBuw6NvIGNvbnRyYXRhZG8gZm9yYW0gaW5kZXZpZGFzfX0uIDIuIERlIG91dHJvIG5vcnRlLCBvIGNvbnN1bWlkb3IgbsOjbyByZWNvbmhlY2V1IGEgZMOtdmlkYSBlIGFwcmVzZW50b3UgcHJvdmEgYWRlcXVhZGEgZGEgc29saWNpdGHDp8OjbyBkZSBjYW5jZWxhbWVudG8gb2NvcnJpZGEgZW0gMjktMTAtMjAxNCAoSUQgNTg0NjI0KSwgaWdub3JhZG8gcGVsYSByw6ksIGUgYSBjb250aW51aWRhZGUgZGFzIGNvYnJhbsOnYXMuIDMuIEEgc2l0dWHDp8OjbyBmw6F0aWNhIGZvaSBhZGVxdWFkYW1lbnRlIHZhbG9yYWRhIG5hIG9yaWdlbSBwYXJhIGRlY2xhcmFyIGEgaW5leGlzdMOqbmNpYSBkZSBkw6liaXRvcyBlIGRldGVybWluYXIgcXVlIGEgcsOpIHNlIGFic3RlbmhhIGRlIGxhbsOnYXIgbmFzIHByw7N4aW1hcyBmYXR1cmFzIGFzIGNvYnJhbsOnYXMgcmVmZXJlbnRlcyBhIHNlcnZpw6dvcyBkZSB0ZXJjZWlyb3MgZGUgU01TIChjw7NkaWdvcyA0OTY2MCBlIDg3MDM4KS4gNC4gUmVjdXJzbyBjb25oZWNpZG8gZSBkZXNwcm92aWRvLiBTZW50ZW7Dp2EgbWFudGlkYSBwb3Igc2V1cyBwcsOzcHJpb3MgZnVuZGFtZW50b3MuIEEgc8O6bXVsYSBkZSBqdWxnYW1lbnRvIHNlcnZpcsOhIGRlIGFjw7NyZMOjbyBjb25mb3JtZSByZWdyYSBkbyBhcnQuIDQ2IGRhIExlaSBuLiA5LjA5OS85NS4gQ29uZGVuYWRhIGEgcmVjb3JyZW50ZSBhbyBwYWdhbWVudG8gZGFzIGN1c3RhcyBlIGhvbm9yw6FyaW9zIGFkdm9jYXTDrWNpb3MgZW0gMTAlIGRvIHZhbG9yIGRhIGNhdXNhLiBbMV0gU29icmUgYXMgcmVncmFzIGRvIMO0bnVzIGRhIHByb3ZhIGRlc3RhY28gYSBwZXJ0aW5lbnRlIG9ic2VydmHDp8OjbyBkZSBEaWRpZXIgSnIuLCBCcmFnYSBlIE9saXZlaXJhIChESURJRVIgSnIsIEZyZWRpZTsgQlJBR0EsIFBhdWxhIFNhcm5vOyBPTElWRUlSQSwgUmFmYWVsLiBDdXJzbyBkZSBEaXJlaXRvIFByb2Nlc3N1YWwgQ2l2aWwsIHZvbHVtZSAyOiBUZW9yaWEgZGEgcHJvdmEsIGRpcmVpdG8gcHJvYmF0w7NyaW8sIHRlb3JpYSBkbyBwcmVjZWRlbnRlLCBkZWNpc8OjbyBqdWRpY2lhbCwgY29pc2EganVsZ2FkYSBlIGFudGVjaXBhw6fDo28gZG9zIGVmZWl0b3MgZGEgdHV0ZWxhLiA0wqogZWQuIEJhaGlhOiBFZGl0b3JhIEp1c1BvZGl2bSwgMjAwOSwgcC4gNzYuKTogIkFzIHJlZ3JhcyBkbyDDtG51cyBkYSBwcm92YSBuw6NvIHPDo28gcmVncmFzIGRlIHByb2NlZGltZW50bywgbsOjbyBzw6NvIHJlZ3JhcyBxdWUgZXN0cnV0dXJhbSBvIHByb2Nlc3NvLiBPIMO0bnVzIGRhIHByb3ZhIMOpIHJlZ3JhIGRlIGp1w616bywgaXN0byDDqSwgZGUganVsZ2FtZW50bywgY2FiZW5kbyBhbyBqdWl6LCBxdWFuZG8gZGEgcHJvbGHDp8OjbyBkYSBzZW50ZW7Dp2EsIHByb2ZlcmlyIGp1bGdhbWVudG8gY29udHLDoXJpbyDDoHF1ZWxlIHF1ZSB0aW5oYSBvIMO0bnVzIGRhIHByb3ZhIGUgZGVsZSBuw6NvIHNlIGRlc2luY3VtYml1LiIgT3MgcmVub21hZG9zIGF1dG9yZXMgcmVzc2FsdGFtIGEgbGnDp8OjbyBkZSBKb3PDqSBDYXJsb3MgQmFyYm9zYSggTW9yZWlyYSBNT1JFSVJBLCBKb3PDqSBDYXJsb3MgQmFyYm9zYS4gIkp1bGdhbWVudG8gZSDDtG51cyBkYSBwcm92YSIuIFRlbWFzIGRlIERpcmVpdG8gUHJvY2Vzc3VhbCBDaXZpbCA/IHNlZ3VuZGEgc8OpcmllLiBTw6NvIFBhdWxvLCAxOTg4LCBwLiA3NC03NSBhcHVkIG9iLiBjaXQuIGVtIGEgbm90YSAzLCBwLiA3My03NCk6ID9FeHBsaWNhIG8gw7RudXMgc3ViamV0aXZvLCBCQVJCT1NBIE1PUkVJUkE6ID9PIGRlc2VqbyBkZSBvYnRlciBhIHZpdMOzcmlhIGNyaWEgcGFyYSBhIGxpdGlnYW50ZSBhIG5lY2Vzc2lkYWRlLCBhbnRlcyBkZSBtYWlzIG5hZGEsIGRlIHBlc2FyIG9zIG1laW9zIGRlIHF1ZSBzZSBwb2RlcsOhIHZhbGVyIG5vIHRyYWJhbGhvIGRlIHBlcnN1YXPDo28sIGUgZGUgZXNmb3LDp2FyLXNlLCBkZXBvaXMsIHBhcmEgcXVlIHRhaXMgbWVpb3Mgc2VqYW0gZWZldGl2YW1lbnRlIHV0aWxpemFkb3MgbmEgaW5zdHJ1w6fDo28gZGEgY2F1c2EuIEZhbGEtc2UsIGFvIHByb3DDs3NpdG8sIGRlIMO0bnVzIGRhIHByb3ZhLCBudW0gcHJpbWVpcm8gc2VudGlkbyAow7RudXMgc3ViamV0aXZvIG91IGZvcm1hbCkuIEUgc2VndWUgY29tZW50YW5kbyBvIMO0bnVzIG9iamV0aXZvOiA/QSBjaXJjdW5zdMOibmNpYSBkZSBxdWUsIGFpbmRhIGFzc2ltLCBvIGxpdMOtZ2lvIGRldmEgc2VyIGRlY2lkaWRvIHRvcm5hIGltcGVyaW9zbyBxdWUgYWxndW1hIGRhcyBwYXJ0ZXMgc3Vwb3J0ZSBvIHJpc2NvIGluZXJlbnRlIGFvIG1hdSDDqnhpdG8gZGEgcHJvdmEuIEN1aWRhIGVudMOjbyBhIGxlaSwgZW0gZ2VyYWwsIGRlIHByb2NlZGVyIGEgdW1hIGRpc3RyaWJ1acOnw6NvIGRlIHJpc2NvczogdHJhw6dhIGNyaXTDqXJpb3MgZGVzdGluYWRvcyBhIGluZGljYXIsIGNvbmZvcm1lIG8gY2FzbywgcXVhbCBkb3MgbGl0aWdhbnRlcyB0ZXLDoSBkZSBzdXBvcnTDoS1sb3MsIGFyY2FuZG8gY29tIGFzIGNvbnNlccO8w6puY2lhcyBkZXNmYXZvcsOhdmVpcyBkZSBuw6NvIHNlIGhhdmVyIHByb3ZhZG8gbyBmYXRvIHF1ZSBsaGUgYXByb3ZlaXRhdmEuIEFxdWkgdGFtYsOpbSBzZSBhbHVkZSBhIMO0bnVzIGRhIHByb3ZhLCBtYXMgbnVtIHNlZ3VuZG8gc2VudGlkbyAow7RudXMgb2JqZXRpdm8gb3UgbWF0ZXJpYWwpIiBBIGp1cmlzcHJ1ZMOqbmNpYSBkbyBlLiBTVEosIGlndWFsbWVudGUsIGRlIGZvcm1hIHVuw61zc29uYSBwcm9jbGFtYTogIiguLi4pIENhYmUgYW9zIGF1dG9yZXMgbyDDtG51cyBkYSBwcm92YSBkbyBmYXRvIGNvbnN0aXR1dGl2byBkbyBkaXJlaXRvIGUgY29tcGV0ZSDDoCByw6kgY29uc3RpdHVpciBwcm92YSBkb3MgZmF0b3MgaW1wZWRpdGl2b3MsIG1vZGlmaWNhdGl2b3Mgb3UgZXh0aW50aXZvcyBkbyBkaXJlaXRvIHJlY2xhbWFkby4gKC4uLik/IChBZ1JnIG5vIFJFc3AgOTA4ODI5IC8gTVM7IE1pbmlzdHJvIEpPw4NPIE9Uw4FWSU8gREUgTk9ST05IQTsgVDQgLSBRVUFSVEEgVFVSTUE7IERKZSAyOS8wMy8yMDEwKSAgCihUSkRGVC4gQWPDs3Jkw6NvIG4uOTU2OTMzLCAwNzA1Mjk1NjIyMDE1ODA3MDAwNywgUmVsYXRvcjogRkzDgVZJTyBGRVJOQU5ETyBBTE1FSURBIERBIEZPTlNFQ0EgM8KqIFR1cm1hIFJlY3Vyc2FsIGRvcyBKdWl6YWRvcyBFc3BlY2lhaXMgZG8gRGlzdHJpdG8gRmVkZXJhbCwgRGF0YSBkZSBKdWxnYW1lbnRvOiAyNi8wNy8yMDE2LCBQdWJsaWNhZG8gbm8gREpFOiAxNS8wOC8yMDE2LiBQw6FnLjogIFNlbSBQw6FnaW5hIENhZGFzdHJhZGEuKQoKCgoKUG9ydGFudG8sIG9zIHZhbG9yZXMgY29icmFkb3MgYSB0w610dWxvIGRlIHNlcnZpw6dvcyBkZSB0ZXJjZWlybyBkZXZlbSBzZXIgcmVzdGl0dcOtZG9zLgojOkJ7RE8gREFOTyBNQVRFUklBTH0KTyBDw7NkaWdvIGRlIERlZmVzYSBkbyBDb25zdW1pZG9yIHByZXbDqiwgbm8gYXJ0LiA0MiwgcGFyw6FncmFmbyDDum5pY28sIHF1ZTogCiIjOkl7IzpCe08gY29uc3VtaWRvciBjb2JyYWRvIGVtIHF1YW50aWEgaW5kZXZpZGEgdGVtIGRpcmVpdG8gw6AgcmVwZXRpw6fDo28gZG8gaW5kw6liaXRvLCBwb3IgdmFsb3IgaWd1YWwgYW8gZG9icm8gZG8gcXVlIHBhZ291IGVtIGV4Y2Vzc299LCBhY3Jlc2NpZG8gZGUgY29ycmXDp8OjbyBtb25ldMOhcmlhIGUganVyb3MgbGVnYWlzLCBzYWx2byBoaXDDs3Rlc2UgZGUgZW5nYW5vIGp1c3RpZmljw6F2ZWx9Ii4gIApOYSBsaWRlIGVtIGNvbWVudG8sICM6Qntmb2kgcmVjb25oZWNpZGEgYSBjb2JyYW7Dp2EgaW5kZXZpZGEgZGUgdG9kb3Mgb3Mgc2VydmnDp29zIGRlIHRlcmNlaXJvcy4gTm9zIGF1dG9zIG8gYXV0b3IgYWxlZ291IHBhZ2FtZW50byBkZSAjOnNwYW5AZGFub01hdGVyaWFsLXNpbXBsZXN7UiQxMjEsNTAoY2VudG8gZSB2aW50ZSBlIHVtIHJlYWlzIGUgY2lucXVlbnRhIGNlbnRhdm9zKX0gcmVmZXJlbnRlIGFvcyBzZXJ2acOnb3MgZGUgdGVyY2Vpcm9zLCBhIHLDqSBuw6NvIG5lZ2EgYSBjb2JyYW7Dp2Egb3UgaW5mb3JtYSB2YWxvciBkaXZlcnNvIGRvIGluZm9ybWFkbyBuYSBpbmljaWFsfS4gCiM6QntBIHF1YW50aWEgZGV2ZSBzZXIgcmVzdGl0dcOtZGEgZW0gZG9icm8sIHRvdGFsaXphbmRvICM6c3BhbkBkYW5vTWF0ZXJpYWwtZG9icm97UiQgMjQzLDAwIChkdXplbnRvcyBlIHF1YXJlbnRhIGUgdHLDqnMgcmVhaXMpfX0uCiAjOkJ7REFOTyBNT1JBTH0gClF1YW50byBhbyBwcmVqdcOtem8gbW9yYWwsIGEganVyaXNwcnVkw6puY2lhIHZlbSBkZWNpZGluZG8gcmVpdGVyYWRhcyB2ZXplcyBubyBzZW50aWRvIGRlIHF1ZSBhIGNvYnJhbsOnYSBpbmRldmlkYSBkZSB2YWxvcmVzIGRlY29ycmVudGVzIGRlIHZlbmRhIGNhc2FkYSwgZXNwZWNpYWxtZW50ZSBwb3IgbsOjbyB0ZXIgYW51w61kbyBleHByZXNzYW1lbnRlIGNvbSBhIGNvbnRyYXRhw6fDo28sIGdlcmEgZGFubyBtb3JhbC4gIzpCe05hIGVzcMOpY2llLCBhIGZhbGhhIG5hIHByZXN0YcOnw6NvIG9uZXJvdSBzdWEgZmluYW7Dp2EgZW0gZnVuw6fDo28gZGUgdW1hIHF1ZWJyYSBkZSBjb25maWFuw6dhIGVtIHJlbGHDp8OjbyBhIHByZXN0YcOnw6NvIHF1ZSBlc3BlcmF2YSBkbyBmb3JuZWNlZG9yfS4KQSBzZXF1w6puY2lhIGRlIGRlZmVpdHVvc29zIHNlcnZpw6dvcyBwcmVzdGFkb3MgcGVsYSByZXF1ZXJpZGEgcmVzdGEgdGlwaWZpY2FkbyBkYW5vIG1vcmFsIHBhc3PDrXZlbCBkZSByZXBhcmHDp8OjbywgcG9yIG9mZW5zYSDDoCBkaWduaWRhZGUgZG8gY29uc3VtaWRvciAoQ0YsIGFydC4gNcK6LCBWIGUgWCkuIFZlamEtc2UsIHNvYnJlIG8gdGVtYSwgbyBzZWd1aW50ZSBqdWxnYWRvOgogClJFQ1VSU08gSU5PTUlOQURPLiBBw4fDg08gREUgUkVQQVJBw4fDg08gREUgREFOT1MgTU9SQUlTIEUgTUFURVJJQUlTLiBURUxFRk9OSUEuIENPQlJBTsOHQSBERSBTRVJWScOHT1MgTsODTyBDT05UUkFUQURPUy4gU0VSVknDh09TIERFIFZPWiBSRUNBRE8uIENPTlRSQVRBw4fDg08gRUxFVFLDlE5JQ0EuIElOVkVSU8ODTyBETyDDlE5VUyBEQSBQUk9WQS4gQVVTw4pOQ0lBIERFIFBST1ZBUyBEQSBDT05UUkFUQcOHw4NPIEUgVVRJTElaQcOHw4NPIERPUyBTRVJWScOHT1MuIERFVkVSIERFIElORk9STUHDh8ODTyBOw4NPIE9CU0VSVkFETy4gVlVMTkVSQUJJTElEQURFIERPIFNJU1RFTUEuIFBSw4FUSUNBIEFCVVNJVkEuIEFQTElDQcOHw4NPIERPIEVOVU5DSUFETyAxLjggREFTIFRVUk1BUyBSRUNVUlNBSVMgRE8gRVNUQURPIERPIFBBUkFOw4EuIERBTk8gTU9SQUwgQ09ORklHVVJBRE8uIFJFUEVUScOHw4NPIERPIElORMOJQklUTyBDQULDjVZFTC4gU0VOVEVOw4dBIE1BTlRJREEuIFJlY3Vyc28gY29uaGVjaWRvIGUgZGVzcHJvdmlkby4gLCBkZWNpZGVtIG9zIEp1w616ZXMgaW50ZWdyYW50ZXMgZGEgUHJpbWVpcmEgVHVybWEgUmVjdXJzYWwgZG8gRXN0YWRvIGRvIFBhcmFuw6EsIHBvciB1bmFuaW1pZGFkZSBkZSB2b3RvcywgY29uaGVjZXIgZSBuZWdhciBwcm92aW1lbnRvIGFvIHJlY3Vyc28gbm9zIGV4YXRvcyB0ZXJtb3MgZGVzdGUgdm90by4KKFRKUFIgLSAxwqogVHVybWEgUmVjdXJzYWwgLSAwMDExNjI5LTMxLjIwMTQuOC4xNi4wMDc1LzAgLSBDb3Juw6lsaW8gUHJvY8OzcGlvIC0gUmVsLjogTGVvIEhlbnJpcXVlIEZ1cnRhZG8gQXJhw4PCumpvIC0gLSBKLiAwNi4xMS4yMDE1KS4KIApBUEVMQcOHw4NPIOKAkyAjOkJ7IzpVe1NFUlZJw4dPIERFIFRFTEVGT05JQSDigJMgQ09CUkFOw4dBIEFCVVNJVkEg4oCTIFZFTkRBIENBU0FEQSDigJMgQ09NQk8gRElHSVRBTH19IOKAkyBJTkVYSUdJQklMSURBREUg4oCTIFJFUEVUScOHw4NPIERPIElORMOJQklUTyDigJMgREFOT1MgTU9SQUlTIOKAkyBERVNWSU8gUFJPRFVUSVZPIOKAkyBNSUNST0RBTk8g4oCTIEZVTsOHw4NPIFBST1BFRMOKVVRJQ0EgREEgSU5ERU5JWkHDh8ODTy4gLSBNYW5pZmVzdGHDp8OjbyBkYSB2b250YWRlIOKAkyBlbGVtZW50byBkZSBleGlzdMOqbmNpYSBkbyBjb250cmF0by4gU2VydmnDp28gbsOjbyBjb250cmF0YWRvIHF1ZSBkZW5vdGEgYSBpbmV4aWdpYmlsaWRhZGUgZG8gZMOpYml0byBlIGEgaWxlZ2l0aW1pZGFkZSBkYSBjb2JyYW7Dp2EgcGVycGV0cmFkYS4gVmVuZGEgY2FzYWRhIOKAkyBwcsOhdGljYSBhYnVzaXZhIGNvbnNpc3RlbnRlIG5vIGNvbmRpY2lvbmFtZW50byBkbyBzZXJ2acOnbyBkZSB0ZWxlZm9uaWEgYW8gImNvbWJvIGRpZ2l0YWwiLCBjb25kdXRhIGlsw61jaXRhIG5hIGZvcm1hIGRvIGFydC4gMzksIEksIGRvIEPDs2RpZ28gZGUgRGVmZXNhIGRvIENvbnN1bWlkb3I7IC0gSW5leGlnaWJpbGlkYWRlIGRvIGTDqWJpdG8gcXVlIHBlcm1pdGUgYSByZXN0aXR1acOnw6NvIGVtIGRvYnJvIG5vcyBleGF0b3MgdGVybW9zIGRvIGFydGlnbyA0MiwgcGFyw6FncmFmbyDDum5pY28sIGRvIEPDs2RpZ28gZGUgRGVmZXNhIGRvIENvbnN1bWlkb3I7IC0gIzpCeyM6VXtEZXZlciBkZSBpbmRlbml6YXIgKGFydGlnb3MgMTg2IGUgOTI3LCBkbyBDw7NkaWdvIENpdmlsKSDigJMgaW5jb250cm92ZXJzYSBhIGNvbmR1dGEgaWzDrWNpdGEsIG8gZGFubyBkZWNvcnJlIGRvIGRlc2Nhc28gZSBkYSBuZWdsaWfDqm5jaWEgY29tIG8gY29uc3VtaWRvciDigJMgcHLDoXRpY2EgYWJ1c2l2YSBjb25zaXN0ZW50ZSBuYSBpbnNlcsOnw6NvIGRlIGNvYnJhbsOnYSBpbmRldmlkYSBuYSBmYXR1cmEgZGUgdG9kb3Mgb3MgY29uc3VtaWRvcmVzIGRvcyBwbGFub3MgcMOzcy1wYWdvLiBSZXNwb25zYWJpbGlkYWRlIGNpdmlsIHF1ZSB0ZW0gbyBjb25kw6NvIGRlIHB1bmlyIGNvbmR1dGFzIGlsw61jaXRhcywgZXNwZWNpYWxtZW50ZSBxdWFuZG8gcmVpdGVyYWRhbWVudGUgYWRvdGFkYXMgcG9yIGp1c3RpZmljYXRpdmFzIGVjb27DtG1pY2FzICgibHVjcm8gaWzDrWNpdG8iIGUgbWljcm9kYW5vcykuICdUZXNlIGRvICdkZXN2aW8gcHJvZHV0aXZvIGRvIGNvbnN1bWlkb3InfX0g4oCTIHZhbG9yIGZpeGFkbyBlbSBSJDEwLjAwMCwwMDsgUkVDVVJTTyBQUk9WSURPIAooVEpTUDsgIEFwZWxhw6fDo28gMTAwMTg2MS0yOS4yMDE3LjguMjYuMDQ4MDsgUmVsYXRvciAoYSk6IE1hcmlhIEzDumNpYSBQaXp6b3R0aTsgw5NyZ8OjbyBKdWxnYWRvcjogMzDCqiBDw6JtYXJhIGRlIERpcmVpdG8gUHJpdmFkbzsgRm9ybyBkZSBQcmVzaWRlbnRlIEJlcm5hcmRlcyAtIFZhcmEgw5puaWNhOyBEYXRhIGRvIEp1bGdhbWVudG86IDE2LzA1LzIwMTg7IERhdGEgZGUgUmVnaXN0cm86IDE3LzA1LzIwMTgpCiAKQVBFTEHDh8ODTyBDw41WRUwuIEHDh8ODTyBJTkRFTklaQVTDk1JJQS4gUkVMQcOHw4NPIERFIENPTlNVTU8uIElNUE9TScOHw4NPIERFIEFRVUlTScOHw4NPIERFIFNFR1VSTyBBTyBBRFFVSVJJUiBQUk9EVVRPIEVNIEVTVEFCRUxFQ0lNRU5UTyBDT01FUkNJQUwuIFZFTkRBIENBU0FEQS4gREFOTyBNT1JBTCBJIC0gQSB2ZW5kYSBjYXNhZGEgaW1wb3N0YSBhbyBjb25zdW1pZG9yIG1vc3RyYS1zZSBhYnVzaXZhLCB2aW9sYW5kbywgcG9ydGFudG8sIG8gYXJ0LiAzOSwgaW5jaXNvIEkgZG8gQ0RDLiAjOkJ7IzpVe0lJIC0gTyBkYW5vIG1vcmFsIGVzdMOhIGluc2VyaWRvIG5hIHByw7NwcmlhIG9mZW5zYSwgZGVjb3JyZW50ZSBkYSBncmF2aWRhZGUgZG8gaWzDrWNpdG8gZW0gc2ksIGVtIGZhY2UgZGEgY29icmFuw6dhIGRlIHZhbG9yZXMgaW5jbHXDrWRvcyBuYSBjb250cmF0YcOnw6NvIHJlYWxpemFkYX19LiAgICAgKFRKTUEuIEFwIDAwNzA3NTIwMTYsIFJlbC4gRGVzZW1iYXJnYWRvcihhKSBKT1JHRSBSQUNISUQgTVVCw4FSQUNLIE1BTFVGLCBQUklNRUlSQSBDw4JNQVJBIEPDjVZFTCwganVsZ2FkbyBlbSAyNS8wOC8yMDE2ICwgREplIDA1LzA5LzIwMTYpCiAKQXNzaW0sIGluZHViaXRhdmVsbWVudGUgYSBjb25kdXRhIGRhIGRlbWFuZGFkYSBnZXJvdSBvZmVuc2EgcmVwYXLDoXZlbCDDoCBwYXJ0ZSByZXF1ZXJlbnRlLCBjb25mb3JtZSBhIMOzdGljYSBkZSBTw6lyZ2lvIENhdmFsaWVyaSAoIzppe0lufTogUHJvZ3JhbWEgZGUgUmVzcG9uc2FiaWxpZGFkZSBDaXZpbCwgNcK6IEVkLiBNYWxoZWlyb3MsIHBnLiA5NCksICM6SXtpbiB2ZXJiaXN9OgoiRW5xdWFudG8gbyBkYW5vIG1hdGVyaWFsIGF0aW5nZSBvIHBhdHJpbcO0bmlvLCBvIGRhbm8gbW9yYWwgYXRpbmdlIGEgcGVzc29hLiBFc3RlIMO6bHRpbW8gw6kgYSByZWHDp8OjbyBwc2ljb2zDs2dpY2EgcXVlIGEgcGVzc29hIGV4cGVyaW1lbnRhIGVtIHJhesOjbyBkZSB1bWEgYWdyZXNzw6NvIGEgdW0gYmVtIGludGVncmFudGUgZGUgc3VhIHBlcnNvbmFsaWRhZGUsIGNhdXNhbmRvLWxoZSB2ZXhhbWUsIHNvZnJpbWVudG8sIGh1bWlsaGHDp8OjbyBlIG91dHJhcyBkb3JlcyBkbyBlc3DDrXJpdG8iLiAKICAgIzpCe05FWE8gQ0FVU0FMfSAKTyBuZXhvIGRlIGNhdXNhbGlkYWRlIGNvbnNpc3RlIGVtIHVtIGxpYW1lIGVudHJlIGEgY29uZHV0YSBkYSBkZW1hbmRhZGEgZSBvIHJlc3VsdGFkbyBkYW5vc28sIHF1ZSBzb21lbnRlIHBvZGUgc2VyIGVsaWRpZG8gcGVsYSBjdWxwYSBleGNsdXNpdmEgZGEgdsOtdGltYSBvdSBkZSB0ZXJjZWlyb3MsIGNhc28gZm9ydHVpdG8gb3UgZm9yw6dhIG1haW9yLiAgCiM6QnsjOkl7SW4gY2FzdX0sIGEgcGFyIGRhcyBjb25zaWRlcmHDp8O1ZXMgYXTDqSBhcXVpIHJlYWxpemFkYXMsIGRlIGxvZ28gc2UgZXZpZGVuY2lhIGEgcHJlc2Vuw6dhIGRvIG5leG8gZW0gcXVlc3TDo28sIHBvaXMgZm9pIG8gYXRvIGRhIHJlcXVlcmlkYSDigJMgdmVuZGEgY2FzYWRhIGUgY29icmFuw6dhIGRlIHNlcnZpw6dvcyBkZSB0ZXJjZWlyb3Mg4oCTIGUgYSBjb25zZXF1w6puY2lhIGRlc3NlIGF0bywgb2JyaWdhbmRvIGEgcGFydGUgYXV0b3JhIGEgcGFnYXIgcG9yIHZhbG9yZXMgbsOjbyBjb250cmF0YWRvcywgc8OjbyBvcyBjYXVzYWRvcmVzIGRvcyBkYW5vcyBtb3JhaXMgZSBtYXRlcmlhaXMgc3Vwb3J0YWRvcyBwZWxvIGNvbnN1bWlkb3IufSAKTmVzdGUgY2FzbyBlc3BlY8OtZmljbywgIzpCe2VzdGFuZG8gbWFpcyBkbyBxdWUgY2xhcmEgYSBwcmVzZW7Dp2EgZG8gZGFubyBhIHBlcnNvbmFsaWRhZGUgYWR2aW5kYSBkZSBhdG8gZG8gcmVxdWVyaWRvLCBiYXN0YSBhIGFwdXJhw6fDo28gZGEgY2lmcmEgcmVwYXJhdMOzcmlhfS4KIzpCe0RPICM6SXtRVUFOVFVNfSBJTkRFTklaQVTDk1JJT30gIApObyBxdWUgY29uY2VybmUgYW8gdmFsb3IgZG8gZGFubyBtb3JhbCwgcmVzc2FsdGUtc2UgcXVlIGRldmUgc2VyIGFyYml0cmFkbyBjb20gbW9kZXJhw6fDo28sIG5vcnRlYW5kby1zZSBvIGp1bGdhZG9yIHBlbG9zIGNyaXTDqXJpb3MgZGEgZ3JhdmlkYWRlIGUgcmVwZXJjdXNzw6NvIGRhIG9mZW5zYSwgZGEgcG9zacOnw6NvIHNvY2lhbCBkbyBvZmVuZGlkbyBlIGRhIHNpdHVhw6fDo28gZWNvbsO0bWljYSBkbyBvZmVuc29yLgojOkJ7TyBTVEogdGVtIGNvbnNhZ3JhZG8gYSBkb3V0cmluYSBkYSBkdXBsYSBmdW7Dp8OjbyBuYSBpbmRlbml6YcOnw6NvIGRvIGRhbm8gbW9yYWw6IGNvbXBlbnNhdMOzcmlhIGUgc2FuY2lvbmF0w7NyaWEuIERlbnRyZSBvcyBpbsO6bWVyb3MganVsZ2Fkb3MgcXVlIGFib3JkYW0gbyB0ZW1hLCBkZXN0YWNvOn0gCiAiKC4uLikgQSBmaXhhw6fDo28gZGEgaW5kZW5pemHDp8OjbyBwb3IgZGFubyBtb3JhbCBkZXZlIHJldmVzdGlyLXNlIGRlIGNhcsOhdGVyIGluZGVuaXphdMOzcmlvIGUgc2FuY2lvbmF0w7NyaW8sIGFkc3RyaXRvIGFvIHByaW5jw61waW8gZGEgcmF6b2FiaWxpZGFkZSBlLCBkZSBvdXRybyBsYWRvLCBow6EgZGUgc2VydmlyIGNvbW8gbWVpbyBwcm9wZWTDqnV0aWNvIGFvIGFnZW50ZSBjYXVzYWRvciBkbyBkYW5vOyBWIC0gUmVjdXJzbyBFc3BlY2lhbCBjb25oZWNpZG8gZSBwcm92aWRvIi4gKFNUSiAtIFJFc3AgNTgyLjA0NyAtIFJTIC0gUHJvYy4gMjAwMy8wMTUyNjk3LTUgLSAzwqogVC4gLSBSZWwuIE1pbi4gTWFzc2FtaSBVeWVkYSkKQXNzaW0sICM6QnsjOlV7ZGV2ZS1zZSBjb25zaWRlcmFyIG5hIHN1YSBmaXhhw6fDo28sIGEgZHVwbGEgZmluYWxpZGFkZSBkbyBpbnN0aXR1dG8sIGN1am9zIG9iamV0aXZvcyBzw6NvLCBwb3IgdW0gbGFkbywgYSBwdW5pw6fDo28gZG8gb2ZlbnNvciwgY29tbyBmb3JtYSBkZSBjb2liaXIgYSBzdWEgcmVpbmNpZMOqbmNpYSBuYSBwcsOhdGljYSBkYW5vc2EgZSwgcG9yIG91dHJvLCBhIGNvbXBlbnNhw6fDo28gZGEgdsOtdGltYSBwZWxhIGRvciBlIHNvZnJpbWVudG8gdml2ZW5jaWFkb3N9fS4gQWRlbWFpcywgbnVuY2EgcG9kZW5kbyBzZXIgZml4YWRvIGVtIHZhbG9yIG3Ds2RpY28sIGRldmVuZG8gbyBtYWdpc3RyYWRvLCBlbSBhdGVuw6fDo28gYW8gcHJpbmPDrXBpbyBkYSByYXpvYWJpbGlkYWRlLCBhYnN0ZXItc2UgZG9zIGTDrXN0aWNvcyBlc3RyYXRvc2bDqXJpY29zLiAgCiBQb3IgY29uc2VndWludGUsIGEgZmltIGRlIGF0ZW5kZXIgw6BzIGZ1bsOnw7VlcyBpbmRlbml6YXTDs3JpYSwgc2FuY2lvbmF0w7NyaWEgZSBwcmV2ZW50aXZhLCBjYWLDrXZlaXMgYW8gZGV2ZXIgZGUgcmVwYXJhw6fDo28gcG9yIGRhbm9zIG1vcmFpczsgYXRlbnRhbmRvIHBhcmEgYSBncmF2aWRhZGUgZG8gZGFubyBpbXBpbmdpZG8sIGxldmFuZG8tc2UgZW0gY29udGEgcXVlOiAKIzpCezEpICM6VXthIHBhcnRlIGF1dG9yYSBuw6NvIGNvbnRyYXRvdSBleHByZXNzYW1lbnRlIG9zIHNlcnZpw6dvcyBkZSB0ZXJjZWlyb3MgbmVtIHRldmUgb3DDp8OjbyBkZSBlc2NvbGhlciBzZSBjb250cmF0YXZhIGEgbGluaGEgY29tIG91IHNlbSBvcyBzZXJ2acOnb3N9fTsgCiM6QnsyKSBvIGNvbXBvcnRhbWVudG8gZG8gZm9ybmVjZWRvciwgbyBxdWFsIHBvZGVyaWEgdGVyIGV2aXRhZG8gdG9kbyBlc3RlIGltYnLDs2dsaW8gIzpVe3ZlbmRlbmRvIGFwZW5hcyBvIHByb2R1dG8gZXhwcmVzc2FtZW50ZSBzb2xpY2l0YWRvIHBlbGEgcGFydGV9fTsgCiM6QnszKSBhcyBjb25kacOnw7VlcyBwZXNzb2FpcyBlIGVjb27DtG1pY2FzIGRvIG9mZW5zb3IsIG8gZ3JhdSBkZSBzdXBvcnRhYmlsaWRhZGUgZGEgaW5kZW5pemHDp8OjbyBwZWxvIHByb21vdmlkbzt9CiM6Qns0KSBhIGFsdGVyYcOnw6NvIGRvIHBvc2ljaW9uYW1lbnRvIGFkb3RhZG8gYW50ZXJpb3JtZW50ZSBlbSBvdXRyb3MgcHJvY2Vzc29zLCBjb25zaWRlcmFuZG8gcXVlIG7Do28gcmVzdG91IGRlbW9uc3RyYWRhIHJlcGVyY3Vzc8OjbyBtYWlzIGdyYXZlLn0KIzpCe0ZpeG8sIGNvbW8ganVzdGEgY29tcGVuc2HDp8OjbyBwZWxvcyBwcmVqdcOtem9zIG1vcmFpcyBzb2ZyaWRvcywgbyB2YWxvciBkZSAjOnNwYW5AZGFub01vcmFsLWZpeGFjYW97UiQgMS4wMDAsMDAgKG1pbCByZWFpcyl9Ln0KIAojOkJ7RElTUE9TSVRJVk99CiBEaWFudGUgZG8gZXhwb3N0bywgIzpCe0pVTEdPIFBBUkNJQUxNRU5URSBQUk9DRURFTlRFU30gb3MgcGVkaWRvcyBjb25zdGFudGVzIG5hIGluaWNpYWwsIG5vcyB0ZXJtb3MgZG8gYXJ0LiA0ODcsIGluYy4gSSwgZG8gQ1BDLCBwYXJhICAKIzpCe2EpIERFQ0xBUkFSIGEgaWxlZ2FsaWRhZGUgZGFzIGNvYnJhbsOnYXMgZGUgc2VydmnDp29zIGRlIHRlcmNlaXJvcyAoVml2byBDb250cm9sZSBTZXJ2acOnbyBEaWdpdGFsIGUgb3V0cm9zIHNlbWVsaGFudGVzKSBuYXMgZmF0dXJhcyBkYSBwYXJ0ZSBwcm9tb3ZlbnRlLCBkZXZlbmRvIGEgcmVxdWVyaWRhIGFic3Rlci1zZSBkZSBlZmV0dWFyIHRhaXMgY29icmFuw6dhcyBhcMOzcyBvIHRyw6Juc2l0byBlbSBqdWxnYWRvIGRhIHByZXNlbnRlIGRlY2lzw6NvfSwgc29iIHBlbmEgZGUgbXVsdGEgZGUgIzpzcGFuQGRpc3Bvc2l0aXZvLW11bHRhQ29taW5hdG9yaWF7UiQgMjAwLDAwIChkdXplbnRvcyByZWFpcyl9IHBvciBjb2JyYW7Dp2EsIG1haXMgYSByZXN0aXR1acOnw6NvIGVtIGRvYnJvIGRvIHZhbG9yIGNvYnJhZG8gZSBwYWdvIGluZGV2aWRhbWVudGUuCiM6QntiKSBDT05ERU5BUn0gYSByZXF1ZXJpZGEgIzpCeyN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZVVDfX0gYSBwYWdhciBwYXJhIGEgcGFydGUgYXV0b3JhICM6Qnsje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5ub21lVUN9fSBhICM6QntJTkRFTklaQcOHw4NPIFBPUiBEQU5PUyBNQVRFUklBSVMgbmEgcXVhbnRpYSAjOnNwYW5AZGlzcG9zaXRpdm8tZGFub01hdGVyaWFse1IkIDI0MywwMCAoZHV6ZW50b3MgZSBxdWFyZW50YSBlIHRyw6pzIHJlYWlzKX19LCBjb3JyZXNwb25kZW50ZSBhbyBkb2JybyBkbyB2YWxvciBjb2JyYWRvIGluZGV2aWRhbWVudGU7CiM6QntjKSBDT05ERU5BUn0gYSByZXF1ZXJpZGEgIzpCeyN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZVVDfX0gYSBwYWdhciBwYXJhIGEgcGFydGUgYXV0b3JhICM6Qnsje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5ub21lVUN9fSBhICM6QntJTkRFTklaQcOHw4NPIFBPUiBEQU5PUyBNT1JBSVMgZGUgIzpzcGFuQGRpc3Bvc2l0aXZvLWRhbm9Nb3JhbHtSJCAxLjAwMCwwMCAobWlsIHJlYWlzKX19LiAKTyB2YWxvciBkYSByZXBhcmHDp8OjbyBleHRyYXBhdHJpbW9uaWFsIGRldmVyw6Egc2VyIGNvcnJpZ2lkbyBlIGFjcmVzY2lkbyBkZSBqdXJvcyBkZSAxJSAodW0gcG9yIGNlbnRvKSBhbyBtw6pzIGEgcGFydGlyIGRlc3RhIGRhdGEgKFPDum11bGEgMzYyIGRvIFNUSikuIE8gdmFsb3IgZG8gZGFubyBtYXRlcmlhbCBkZXZlcsOhIHNlciBjb3JyaWdpZG8gZGEgZGF0YSBkbyDDumx0aW1vIHBhZ2FtZW50byBlIGFjcmVzY2lkbyBkZSBqdXJvcyBkZSAxJSAodW0gcG9yIGNlbnRvKSBhbyBtw6pzIGEgcGFydGlyIGRhIGNpdGHDp8OjbyAoQXJ0LiA0MDUgZG8gQ8OzZGlnbyBDaXZpbCkuICM6QntBcGxpY2Etc2UgYSBtdWx0YSBkZSAxMCUgKGRleiBwb3IgY2VudG8pIGNhc28gbsOjbyBzZWphIGVmZXR1YWRvIG8gcGFnYW1lbnRvIGRhIGNpZnJhIHJlcGFyYXTDs3JpYSBkZW50cm8gZGUgMTUgKHF1aW56ZSkgZGlhcyBhcMOzcyBvIHRyw6Juc2l0byBlbSBqdWxnYWRvIGRhIHNlbnRlbsOnYSAoYXJ0LiA1MjMsIMKnMcK6LCBkbyBDUEMpfS4gQSBjb3JyZcOnw6NvIG1vbmV0w6FyaWEgc2Vyw6EgY2FsY3VsYWRhIGRlIGFjb3JkbyBjb20gw41uZGljZSBOYWNpb25hbCBkZSBQcmXDp29zIGFvIENvbnN1bWlkb3IgLSBJTlBDL0lCR0UuClNlbSBjdXN0YXMgbmVtIGhvbm9yw6FyaW9zLCBleCB2aSwgZG8gYXJ0LiA1NSBkYSBMZWkgbi4gOS4wOTkvOTUsIHBvaXMgbsOjbyB2aXNsdW1icm8gY2FzbyBkZSBsaXRpZ8OibmNpYSBkZSBtw6EtZsOpLgpQdWJsaWNhZGEgZSByZWdpc3RyYWRhIGNvbSBvIGxhbsOnYW1lbnRvIG5vIHNpc3RlbWEuIEludGltZS1zZS4KIzpCe1RyYW5zaXRhZG8gZW0ganVsZ2FkbywgY2FzbyBuw6NvIGhhamEgcGVkaWRvIGRlIGV4ZWN1w6fDo28gb3UgY3VtcHJpbWVudG8gZGUgc2VudGVuw6dhIGRlbnRybyBkbyBwcmF6byBsZWdhbCwgZMOqLXNlIGJhaXhhIGUgYXJxdWl2ZS1zZSBkZWZpbml0aXZhbWVudGV9LiBBZGVtYWlzLCBhIHBhcnRlIGV4ZXF1ZW50ZSBwb2RlIHNlIHZhbGVyIGRvIGluc3RydW1lbnRvIGRlIGN1bXByaW1lbnRvIGRlIHNlbnRlbsOnYSBvdSBleGVjdcOnw6NvLCBleGVjdXRhbmRvIGEgZGVjaXPDo28sIHNlbmRvIHF1ZSBldmVudHVhbCBuZWNlc3NpZGFkZSBjw7NwaWEgZGUgc2VudGVuw6dhIHBvZGUgc2VyIGZhY2lsbWVudGUgc3VwcmlkYSBwZWxhIFNlY3JldGFyaWEgSnVkaWNpYWwgZGlhbnRlIGRhIHZpcnR1YWxpemHDp8OjbyBkbyByZWdpc3RybyBkZSBzZW50ZW7Dp2FzLCBmaWNhbmRvIGNvbXBpbGFkb3MgZSBzYWx2b3Mgbm8gc2lzdGVtYS4gCiM6QntIYXZlbmRvIGN1bXByaW1lbnRvIHZvbHVudMOhcmlvLCBlIG7Do28gaGF2ZW5kbyByZWN1cnNvLCBleHBlw6dhLXNlIGFsdmFyw6EganVkaWNpYWwgZW0gZmF2b3IgZGEgcGFydGUgcmVxdWVyZW50ZX0uIEFww7NzIGEgZW50cmVnYSBkbyBhbHZhcsOhLCBhcnF1aXZlLXNlLgoKICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkp1bGdhbWVudG8uQ29sYXJTZW50ZW5jYSIgbGFiZWw9IlNlbnRlbsOnYSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6c3BhbkBzZW50ZW5jYUNvcnBve1hYWFNlbnRlbsOnYVhYWH0KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPCEtLSBSRVFVRVJJTUVOVE9TIC0tPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5SZW51bmNpYVByYXpvUmVjdXJzYWwiIGxhYmVsPSJSZW7Dum5jaWEgUHJhem8gUmVjdXJzYWwiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBKHMpIHBhcnRlKHMpIHByZXNlbnRlKHMpIHJlcXVpc2l0b3UoYXJhbSkgYSByZW51bmNpYSBkZSBzZXUgcHJhem8gcmVjdXJzYWwgYWNlcmNhIGRhIHNlbnRlbsOnYSBwcm9mZXJpZGEuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5QdWJsaWNhY2FvIiBsYWJlbD0iI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSBQdWJsaWNhw6fDtWVzIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gcmVxdWVyZXUgcXVlIHRvZGFzIGFzIHB1YmxpY2HDp8O1ZXMKICAgICAgICAgICAgICAgICAgICBzZWphbSBlbmNhbWluaGFkYXMgYW8gYWR2b2dhZG8gIzpCe1hYWFhYTm9tZUVPQUJYWFhYfS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5SZXF1ZXJpbWVudG9zLkdlbmVyaWNvQXRpdm8iIGxhYmVsPSJHZW7DqXJpY28gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7QSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IHJlcXVlcmV1IHJlcXVlcmV1IFhYWFJlcXVlcmltZW50b1hYWH0uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5HZW7DqXJpY29QYXNzaXZvIiBsYWJlbD0iR2Vuw6lyaWNvICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSByZXF1ZXJldSBYWFhSZXF1ZXJpbWVudG9YWFguCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5EZXNpc3RlbmNpYUF0aXZvIiBsYWJlbD0iRGVpc3TDqm5jaWEgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5hdGl2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gcmVxdWVyZXUgYSAjOkJ7ZGVzaXN0w6puY2lhfSBkYSBwcmVzZW50ZSBkZW1hbmRhZGEuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuUmVxdWVyaW1lbnRvcy5JbnN0cnVjYW9BdGl2byIgbGFiZWw9Ikluc3RydcOnw6NvICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MuYXRpdm99IiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgQSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IHJlcXVlcmV1IGEgIzpCe2Rlc2lnbmHDp8OjbyBkZSAKICAgICAgICAgICAgICAgICAgICBhdWRpw6puY2lhIGRlIEluc3RydcOnw6NvfSBwYXJhIHByb2R1w6fDo28gZGUgbm92YXMgcHJvdmFzLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLlJlcXVlcmltZW50b3MuSW5zdHJ1Y2FvUGFzc2l2byIgbGFiZWw9Ikluc3RydcOnw6NvICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFzc2l2b30iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSByZXF1ZXJldSBhICM6QntkZXNpZ25hw6fDo28gZGUgCiAgICAgICAgICAgICAgICAgICAgYXVkacOqbmNpYSBkZSBJbnN0cnXDp8Ojb30gcGFyYSBwcm9kdcOnw6NvIGRlIG5vdmFzIHByb3Zhcy4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5SZXF1ZXJpbWVudG9zLkluc3RydWNhb1BhcnRlcyIgbGFiZWw9Ikluc3RydcOnw6NvIGFtYmFzIHBhcnRlcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgIEFzIHBhcnRlcyByZXF1ZXJlcmFtIGEgI3tkZXNpZ25hw6fDo28gZGUgYXVkacOqbmNpYSBkZSBJbnN0cnXDp8Ojb30gcGFyYSBwcm9kdcOnw6NvIGRlIG5vdmFzIHByb3Zhcy4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5SZXF1ZXJpbWVudG9zLkp1bGdhbWVudG9BbnRjaXBhZG8iIGxhYmVsPSJKdWxnYW1lbnRvIGFudGVjaXBhZG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBcyBwYXJ0ZXMgZGVjbGFyYXJhbSBxdWUgbsOjbyBkZXNlamFtIHByb2R1emlyIG5vdmFzIHByb3ZhcywgcmVxdWVyZW5kbyBvIGp1bGdhbWVudG8gZG8gcHJvY2Vzc28gbm8gZXN0YWRvIGVtIHF1ZSBzZSBlbmNvbnRyYQogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICAKICAgICAgICAKICAgICAgICA8IS0tIERFTElCRVJBw4fDlUVTIERPIE1BR0lTVFJBRE8tLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5NYWdpc3RyYWRvLkdlbsOpcmljbyIgbGFiZWw9Ik1hZ2lzdHJhZG8gLSBHZW7DqXJpY28iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5vQ2FwfSAje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5NTX06ICM6QnsiWFhYTU1KdWl6YVhYWCJ9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLk1hZ2lzdHJhZG8uQ29uY2x1c2FvU2VudGVuY2EiIGxhYmVsPSJNYWdpc3RyYWRvIC0gQ29uY2x1c8OjbyBTZW50ZW7Dp2EiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5vQ2FwfSAje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5NTX06ICM6QnsiRGV0ZXJtaW5vIHF1ZSBvcyBhdXRvcyByZXRvcm5lbSBjb25jbHVzb3MgcGFyYSBwcm9sYcOnw6NvIGRlICM6VXtTRU5URU7Dh0F9fSIuCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPgogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLk1hZ2lzdHJhZG8uUmF6b2VzRmluYWlzU2VudGVuY2EiIGxhYmVsPSJNYWdpc3RyYWRvIC0gQ29uY2Vzc8OjbyBQcmF6byBSYXrDtWVzIEZpbmFpcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lm9DYXB9ICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfTogIzpCeyJDb25jZWRvIG8gcHJhem8gY29tdW0gZGUgdHLDqnMgZGlhcyBwYXJhIHF1ZSBhcyBwYXJ0ZXMgYXByZXNlbnRlbSBzdWFzIHJhesO1ZXMgZmluYWlzLCAKICAgICAgICAgICAgICAgICAgICBhcMOzcywgY29tIG91IHNlbSBtYW5pZmVzdGHDp8OjbywgcmV0b3JuZW0gb3MgYXV0b3MgY29uY2x1c29zIHBhcmEgcHJvbGFhw6fDo28gZGUgIzpVe1NFTlRFTsOHQX0ifS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5NYWdpc3RyYWRvLkRlc2lnbmHDp8Ojb0F1ZGllbmNpYSIgbGFiZWw9Ik1hZ2lzdHJhZG8gLSBEZXNpZ25hw6fDo28gZGUgQXVkacOqbmNpYSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lm9DYXB9ICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfTogIzpCeyJEZXNpZ25vIHBhcmEgbyBkaWEgWFhYRGF0YUVIb3JhWFhYIGEgcmVhbGl6YcOnw6NvIGRlIGF1ZGnDqm5jaWEgZGUgaW5zdHJ1w6fDo28gZSBqdWxnYW1lbnRvIGRvcyBwcmVzZW50ZXMgYXV0b3MuIn0uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5NYWdpc3RyYWRvLkp1bGdhbW5ldG9EaWxpZ2VuY2lhIiBsYWJlbD0iTWFzZ2l0cmFkbyAtIEp1bGdhbWVudG8gZW0gZGlsaWfDqm5jaWEiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7I3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXoub0NhcH0gI3tqMi5lbnYuUEplVmFycy51bmlkYWRlLmp1aXouTU19IGNvbnZlcnRldSBvIGp1bGdhbWVudG8gZW0gZGlsaWfDqm5jaWEgZGV0ZXJtaW5hbmRvIHF1ZSBYWFhYWFhYWFhYWFh9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuTWFnaXN0cmFkby5KdW50YWRhQVIiIGxhYmVsPSJNYXNnaXRyYWRvIC0gRkF6ZXIgSnVudGFkYSBBUiIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lm9DYXB9ICN7ajIuZW52LlBKZVZhcnMudW5pZGFkZS5qdWl6Lk1NfTogIzpCeyJEZXRlcm1pbm8gcXVlIAogICAgICAgICAgICAgICAgICAgIG9zIGF1dG9zIHZvbHRlbSDDoCBTZWNyZXRhcmlhIEp1ZGljaWFsIHBhcmEgcXVlIHNlamEgcHJvdmlkZW5jaWFkYSBhIGp1bnRhZGEgZG8gYXZpc28gZGUgcmVjZWJpbWVudG8gCiAgICAgICAgICAgICAgICAgICAgcXVlIGNvbXByb3ZlIGEgY2l0YcOnw6NvIGRhKHMpIHBhcnRlKHMpIGRlbWFuZGFkYShzKSwgIzpVe09GSUNJQU5ETyBBT1MgQ09SUkVJT1N9IGNhc28gc2VqYSBuZWNlc3PDoXJpby4gCiAgICAgICAgICAgICAgICAgICAgQXDDs3MgYSBqdW50YWRhLCBjb25maXJtYWRhIGEgY2l0YcOnw6NvIHRlbXBlc3RpdmEgZGEgcGFydGUgZGVtYW5kYWRhLCB2b2x0ZW0gb3MgYXV0b3MgY29uY2x1c29zIHBhcmEgCiAgICAgICAgICAgICAgICAgICAgc2VudGVuw6dhLiBFbSBjYXNvIGRlIGZydXN0cmHDp8OjbyBkYSBjaXRhw6fDo28sIGludGltZS1zZSBhIHBhcnRlIGRlbWFuZGFkYSBwYXJhIG1hbmlmZXN0YcOnw6NvLCBubyBwcmF6byBkZSBxdWluemUgZGlhcyJ9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPCEtLSBERUxJQkVSQcOHw5VFUyBETyBDT05DSUxJQURPUiAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5Db25jbHVzYW9TZW50ZW5jYSIgbGFiZWw9IkNvbmNpbGlhZG9yIC0gQ29uY2x1c8OjbyBTZW50ZW7Dp2EiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBFbSByYXrDo28gZG8gcmVxdWVyaW1lbnRvIGUvb3UgYW51w6puY2lhIGRhcyBwYXJ0ZXMsIG9zIGF1dG9zIGZvcmFtIGZlaXRvcyBjb25jbHVzb3MgcGFyYSAjOlV7c2VudGVuw6dhfS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuQ29uY2lsaWFkb3IuQ29uY2x1c2FvRGVzcGFjaG8iIGxhYmVsPSJDb25jaWxpYWRvciAtIENvbmNsdXPDo28gRGVzcGFjaG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBFbSByYXrDo28gZG8ocykgcmVxdWVyaW1lbnRvKHMpIGZvcm11bGFkbyhzKSBwZWxhKHMpIHBhcnRlKHMpIG9zIGF1dG9zIGZvcmFtIAogICAgICAgICAgICAgICAgICAgIGZlaXRvcyBjb25jbHVzb3MgcGFyYSAje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5vfSAje2oyLmVudi5QSmVWYXJzLnVuaWRhZGUuanVpei5NTX0gcHJvZmVyaXIgIzpVe2Rlc3BhY2hvfS4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5EZWxpYmVyYWNvZXMuQ29uY2lsaWFkb3IuU2VjcmV0YXJpYUV4cGVkacOnw6NvQ29tdW5pY2FjYW8iIGxhYmVsPSJDb25jaWxpYWRvciAtIFNlY3JldGFyaWEgSnVkaWNpYWwgRXhwZWRpciBDb211bmljYWNvZXMiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICAjOkJ7w4AgU2VjcmV0YXJpYSBKdWRpY2lhbCBwYXJhIHF1ZSBwcm92aWRlbmNpZSBhIGV4cGVkacOnw6NvIGRhcyBjb211bmljYcOnw7VlcyBuZWNlc3PDoXJpYXN9LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAKICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5Db25jbHVzYW9TZW50ZW5jYURlc3BhY2hvIiBsYWJlbD0iQ29uY2lsaWFkb3IgLSBTZWNyZXRhcmlhIEp1ZGljaWFsIEV4cCBDaXRhw6fDo28iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBPcyBhdXRvcyBmb3JhbSByZW1ldGlkb3Mgw6AgU2VjcmV0YXJpYSBKdWRpY2lhbCBwYXJhIGV4cGVkacOnw6NvIGRlIGNpdGHDp8OjbyBwYXJhIG8ocykgZGVtYW5kYWRvKHMpLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLkRlbGliZXJhY29lcy5Db25jaWxpYWRvci5QcmF6b0F0aXZvRmluYWxpZGFkZSIgbGFiZWw9IkNvbmNpbGlhZG9yIC0gQ29uY2Vzc8OjbyBQcmF6byAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLmF0aXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QntDb21vIGF0byBtZXJhbWVudGUgb3JkaW5hdMOzcmlvLCBmb2kgY29uY2VkaWRvIG8gcHJhem8gZGUgIzpzcGFuQGNvbmNlZFByYXpvQXVke1hYWFByYXpvWFhYfSBwYXJhIHF1ZSBhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0KICAgICAgICAgICAgICAgICAgICAjOnNwYW5AY29uY2VkUHJhem9BdWR7WFhYRmluYWxpZGFkZVhYWH19LgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLlByYXpvUGFzc2l2b0ZpbmFsaWRhZGUiIGxhYmVsPSJDb25jaWxpYWRvciAtIENvbmNlc3PDo28gUHJhem8gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXNzaXZvfSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QntDb21vIGF0byBtZXJhbWVudGUgb3JkaW5hdMOzcmlvLCBmb2kgY29uY2VkaWRvIG8gcHJhem8gZGUgIzpzcGFuQGNvbmNlZFByYXpvQXVke1hYWFByYXpvWFhYfSBwYXJhIHF1ZSBhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfQogICAgICAgICAgICAgICAgICAgICM6c3BhbkBjb25jZWRQcmF6b0F1ZHtYWFhGaW5hbGlkYWRlWFhYfX0uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLlByYXpvSnVudGFkYURvY3VtZW50b3MiIGxhYmVsPSJDb25jaWxpYWRvciAtIENvbmNlc3PDo28gUHJhem8gSnVudGFkYSBEb2N1bWVudG9zIEFwcmVzZW50YWRvcyBlbSBhdWRpw6puY2lhIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjOkJ7Q29tbyBhdG8gbWVyYW1lbnRlIG9yZGluYXTDs3JpbywgZm9pIGNvbmNlZGlkbyBvIHByYXpvIGRlICM6c3BhbkBjb25jZWRQcmF6b0F1ZHs2IGhvcmFzfSBwYXJhIHF1ZSBhKHMpIHBhcnRlKHMpCiAgICAgICAgICAgICAgICAgICAgIzpzcGFuQGNvbmNlZFByYXpvQXVke3JlYWxpemUobSkgYSBqdW50YWRhIGRvcyBkb2N1bWVudG9zIGFwcmVzZW50YWRvcyBlbSBhdWRpw6puY2lhfX0uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLkRlc2lnQXVkaWVuY2lhIiBsYWJlbD0iQ29uY2lsaWFkb3IgLSBEZXNpZ25hw6fDo28gZGUgQXVkacOqbmNpYSIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJwbGFpblRleHQiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxkYXRhPgogICAgICAgICAgICAgICAgICAgICM6QntEZXNpZ25hZG8gcGFyYSBvIGRpYSBYWFhYRGF0YUVIb3JhWFhYWCBhIHJlYWxpemHDp8OjbyBkZSBhdWRpw6puY2lhIGRlIENvbmNpbGlhw6fDo28sIEluc3RydcOnw6NvIGUgSnVsZ2FtZW50by59CiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgIAogICAgICAgIDxpdGVtIGlkPSJ0cm1BdWQuRGVsaWJlcmFjb2VzLkNvbmNpbGlhZG9yLlNlY3JldGFyaWFQcm92aWRlbmNpYSIgbGFiZWw9IkNvbmNpbGlhZG9yIC0gU2VjcmV0YXJpYSBKdWRpY2lhbCBQcm92aWTDqm5jaWFzIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgIzpCe8OAIFNlY3JldGFyaWEgSnVkaWNpYWwgcGFyYSBhcyBwcm92aWTDqm5jaWFzIGNhYsOtdmVpc30uCiAgICAgICAgICAgICAgICA8L2RhdGE+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgIAoKCgkJPCEtLSBEQSBWSURFTyBDT05GRVJFTkNJQSAtLT4KICAgICAgICA8aXRlbSBpZD0idHJtQXVkLlZpZGVvQ29uZmVyZW5jaWEuQWR2ZXJ0aW1lbnRvIiBsYWJlbD0iRGEgR3JhdmHDp8OjbyBkYSBWw61kZW9jb25mZXLDqm5jaWEiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBBcyBwYXJ0ZXMgZm9yYW0gbm90aWZpY2FkYXMgcXVlLCBlbSBjb25mb3JtaWRhZGUgY29tIGEgUE9SVEFSSUEtR1Ag4oCTIDgxNDIwMTksIG8gcmVnaXN0cm8gYXVkaW92aXN1YWwgZGEgcHJlc2VudGUgdmlkZW9jb25mZXLDqm5jaWEgZmljYXLDoSBkaXNwb27DrXZlbCBwYXJhIGRvd25sb2FkIHBvciAxNSBkaWFzLCBhIGNvbnRhciBkYSBwcmVzZW50ZSBkYXRhLCBhcMOzcywgbyBhcnF1aXZvIHNlcsOhIGV4Y2x1w61kbyBkYSBiYXNlIGRlIGRhZG9zIGRlIHZpZGVvY29uZmVyw6puY2lhcy4KICAgICAgICAgICAgICAgIDwvZGF0YT4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+IAkJCiAgICAgICAgPGl0ZW0gaWQ9InRybUF1ZC5saW5rUEplLkluZm9MaW5rIiBsYWJlbD0iSW5mb3JtYcOnw6NvIExpbmsgUEplIE3DrWRpYXMiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0icGxhaW5UZXh0IiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8ZGF0YT4KICAgICAgICAgICAgICAgICAgICBQYXJhIHZpc3VhbGl6YcOnw6NvIGRhIG3DrWRpYSBkZSBncmF2YcOnw6NvIGRlc3RhIGF1ZGnDqm5jaWEsIGRldmUgc2VyIGFjZXNzYWRvIG8gc2lzdGVtYSAKICAgICAgICAgICAgICAgICAgICBQSkUgTcOtZGlhcyBwZWxvICM6QntsaW5rfSAjOkJ7WFhYWExpbmtBdWRpZW5jaWFQSmVNaWRpYXNYWFhYfSwgIzpCe2FiYSBhY2Vzc28gcG9yIGNoYXZlfTogSW5mb3JtYXIgQ1BGIGUgZS1tYWlsLgogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gCQkKICAgIDwvaXRlbXM+CiAgPC9zZWxlY3RvckRlZj4KPC9EZWZpbml0aW9ucz4K"
};