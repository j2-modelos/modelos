window.j2.res.mod.intimacaoSelSrc.xmlEncode = {      
  load : "<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<Definitions xmlns="http://j2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SeleectorsItemsDefinitions" targetNamespace="http://j2" xsi:schemaLocation="http://j2 ../XML/j2.xsd">
  <selectorDef id="selectorBlocoAssinaturas" grouped="false">
    <eventFire event="signatario.onChange"/>
    <itemFormats>
        <elemento tag="li" class="" scope="NONE">
            <elemento tag="p" class="p FntModDefault" scope="NONE">
                #{textContent}
            </elemento>
        </elemento>
    </itemFormats>
    <groupsDefs>
        <group label="Comuns">
            <gItem id="intmItSentenca"/>
            <gItem id="intmItDespacho"/>
            <gItem id="intmItDecisao"/>
            <gItem id="intmItGenerico"/>
            <gItem id="intmItLiminar"/>
            <gItem id="intmItAtoOrdinatorio"/>
            <gItem id="intmItSentencaObrigacaoFazer"/>
        </group>
        <group label="Audiencia">
            <gItem id="intmItAudDesigSemSala"/>
            <gItem id="intmItAudDesigExTiExSemSala"/>
            <gItem id="intmItAudRedesigSemSala"/>
            <gItem id="intmItAudCEJUSC"/>
            <gItem id="intmItAudCancel"/>
            <gItem id="intmItAudInstrucaoDeferimento"/>
            <gItem id="intmItAudInstrucaoTestemunhas"/>
            
            <gItem id="intmItAdvertenciaContumacia"/>
            <gItem id="intmItAdvertenciaRevelia"/>
        </group>
        <group label="Diversos">
            <gItem id="intmItApresContrarrazoes"/>
            <gItem id="intmItApresReplica"/>
            <gItem id="intmItEndPoloPassivo"/>
            <gItem id="intmItComprovHipossuficiente"/>
            <gItem id="intmItComprimentoPrecatória"/>
            <gItem id="intmItCitadoPorHoraCerta"/>
            <gItem id="intmItCitadoPorHoraCertaContestarAcao"/>
            <gItem id="intmItExameCorpoDelito"/>
            <gItem id="intmItExameCorpoDelitoComplementar"/>
            <gItem id="intmItJuntComprovEndereco"/>
            <gItem id="intmItDesignacaoPericia"/>
            <gItem id="intmItJuntExtratoBancario"/>
            <gItem id="intmItOJCertificarContatos"/>
            <gItem id="intmItManifestarSe"/>
            <gItem id="intmItReceberAlvará"/>
            <gItem id="intmItPretensaoResistida"/>
        </group>
        <group label="Execucao">
            <gItem id="intmItIndicarBensExecutado"/>
            <gItem id="intmItInteresseAdjudicação"/>
            <gItem id="intmItPenhoraOnLine"/>
            <gItem id="intmItPenhoraOnLineParcial"/>
            <gItem id="intmItPenhoraOnLineBens"/>
            <gItem id="intmItPenhoraOnLineOferecerEmbargos"/>
        </group>
        <group label="Ente Público">
            <competencias>
                <competencia id="civel"/>
            </competencias>            
            <gItem id="intmItEntPubManifInteresse"/>
        </group>
        
        <group label="Video Conferencia">
            <competencias>
                <competencia id="juizadoCivel"/>
            </competencias>            
            
            <gItem id="intmItAudienciaPresencial"/>
            <gItem id="intmItVideoConferenciaCiencia"/>
            <gItem id="intmItAudienciaVideoConferenciaSala1"/>
            <gItem id="intmItAudienciaVideoConferenciaSala2"/>
        </group>        
        <!--group label="xxxxxxxxx">
            <gItem id="intmIt"/>
            <gItem id="intmIt"/>
            <gItem id="intmIt"/>
        </group>
        <group label="xxxxxxxxx">
            <gItem id="intmIt"/>
            <gItem id="intmIt"/>
            <gItem id="intmIt"/>
        </group>
        <group label="xxxxxxxxx">
            <gItem id="intmIt"/>
            <gItem id="intmIt"/>
            <gItem id="intmIt"/>
        </group-->
    </groupsDefs>
    <items>
        <!-- items selectorArray are 'binded' with meioComunicacao.xml 
            <item id="meioComunicItCorreios" ...
            <item id="meioComunicItCentralMandados" ...
            <item id="meioComunicItDJe" ...
            <item id="meioComunicItPessoamente" ...
            <item id="meioComunicItSistema" ...
            <item id="meioComunicItTelefone" ...
            
            on inexistance of match keyEl with ids abovre must be choiced 'general'
        -->
        <item id="intmItDesignacaoPericia" label="Designação Perícia IML" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para tomar conhecimento da designação de perícia junto ao IML datado para #:U{#:B{XXXXXDataDesignaçãoXXXXX}}, bem como do inteiro teor do ofício #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento da designação de perícia junto ao IML datado para #:U{#:B{XXXXXDataDesignaçãoXXXXX}}, bem como do inteiro teor do ofício #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>
        
        <item id="intmItCitadoPorHoraCerta" label="Citado por hora certa" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{FINALIDADE/MEIO IMCOMPATÍVEL}
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de que #:B{foi citado(a) por hora certa} nos autos em epígrafe, nos termos da certidão do oficial de justiça #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, em anexo.
                        </data>
                    </arElement>        
                </selectorArray>        
            </itemContent>
        </item>
        <item id="intmItCitadoPorHoraCertaContestarAcao" label="Citado por hora certa - contestar ação" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{FINALIDADE/MEIO IMCOMPATÍVEL}
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de que, nos termos da citação, poderá contestar a ação
                            até a data da audiência de #{j2.env.PJeVars.audiencia.tipo}, durante o próprio ato, inclusive. Cietificado(a) 
                            que o não comparecimento à audiência importará em sua revelia e confissão quanto à matéria de fato, sendo consideradas 
                            verdadeiras as alegações apresentadas pelo #{j2.env.PJeVars.processo.polos.ativo}.
                        </data>
                    </arElement>        
                </selectorArray>        
            </itemContent>
        </item>
                
        <item id="intmItApresContrarrazoes" label="Apresentar Contrarrzões" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, #:U{caso queira}, no prazo de #{j2.env.PJeVars.expediente.prazo}, apresentar #:B{#:U{CONTRARRAZÕES}} ao #:B{recurso inominado} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} interposto.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} para, #:U{caso queira}, no prazo de #{j2.env.PJeVars.expediente.prazo}, apresentar #:B{#:U{CONTRARRAZÕES}} ao #:B{recurso inominado} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} interposto, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, #:U{caso queira}, no prazo de #{j2.env.PJeVars.expediente.prazo}, apresentar #:B{#:U{CONTRARRAZÕES}} ao #:B{recurso inominado} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} interposto .
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>
        
        <item id="intmItApresReplica" label="Apresentar Réplica" dataPlus="">
            <competencias>
                <competencia id="civel"/>
                <competencia id="familia"/>
                <competencia id="fazenda"/>
            </competencias>              
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, #:U{caso queira}, no prazo de #{j2.env.PJeVars.expediente.prazo}, apresentar #:B{#:U{RÉPLICA}} à #:B{contestação} do #{j2.env.PJeVars.processo.polos.passivo}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} para, #:U{caso queira}, no prazo de #{j2.env.PJeVars.expediente.prazo}, apresentar #:B{#:U{RÉPLICA}} à #:B{contestação} do #{j2.env.PJeVars.processo.polos.passivo}. cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, #:U{caso queira}, no prazo de #{j2.env.PJeVars.expediente.prazo}, apresentar #:B{#:U{RÉPLICA}} à #:B{contestação} do #{j2.env.PJeVars.processo.polos.passivo}.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>        
        
        <item id="intmItAudDesig" label="Designada" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} a comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}, na #{j2.env.PJeVars.audiencia.sala}, deste Juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}, na #{j2.env.PJeVars.audiencia.sala}, deste Juízo.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudDesigSemSala" label="Designada" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} a comparecer à #:B{Audiência de #{j2.env.PJeVars.audiencia.tipo}}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à #:B{Audiência de #{j2.env.PJeVars.audiencia.tipo}}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudCEJUSC" label="Designada CEJUSC" dataPlus="">
            <competencias>
                <competencia id="civel"/>
                <competencia id="familia"/> 
            </competencias>
            <advertencias>
                <advertencia id="advtItAusenciaConciliacao" />
                <advertencia id="advtItAdvogagosCumunicaremPartes" />
            </advertencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} a comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, designada para o dia #{j2.env.PJeVars.audiencia.data}, na #{j2.env.PJeVars.audiencia.sala}, situado no(a) #{j2.env.PJeVars.unidade.mediacao.enderecoFormal}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, designada para o dia #{j2.env.PJeVars.audiencia.data}, na #{j2.env.PJeVars.audiencia.sala}, situado no(a) #{j2.env.PJeVars.unidade.mediacao.enderecoFormal}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudCancel" label="Cancelamento" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} sobre o #:B{CANCELAMENTO  da Audiência} designada para o dia #:B{XXXDataDaAudienciaDesignadaXXX}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada sobre o #:B{CANCELAMENTO  da Audiência} designada para o dia #:B{XXXDataDaAudienciaDesignadaXXX}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudRedesig" label="Redesignado" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} a comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, #:B{#:U{REDESIGNADA}} para o dia #{j2.env.PJeVars.audiencia.data}, na #{j2.env.PJeVars.audiencia.sala}, deste Juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, #:B{#:U{REDESIGNADA}} para o dia #{j2.env.PJeVars.audiencia.data}, na #{j2.env.PJeVars.audiencia.sala}, deste Juízo.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudRedesigSemSala" label="Redesignado" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} a comparecer à #:B{Audiência de #{j2.env.PJeVars.audiencia.tipo}}, #:B{#:U{REDESIGNADA}} para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à #:B{Audiência de #{j2.env.PJeVars.audiencia.tipo}}, #:B{#:U{REDESIGNADA}} para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}.
                        </data>
                    </arElement>
                </selectorArray>             
            </itemContent>
        </item>
        
        <item id="intmItComprimentoPrecatória" label="Cumpirmento Precatória" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{FINALIDADE/MEIO IMCOMPATÍVEL}
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{CUMPRIMENTO} da Carta Precatória anexa ao presente mandado no termos requisitados pelo juízo deprecante.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>   
        
        <item id="intmItComprovHipossuficiente" label="Comprovar hipossuficiência" dataPlus="requireIdElementSet">
            <competencias>
                <competencia id="civel"/>
                <competencia id="fazenda"/>
            </competencias>
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, comprovar nos autos o preenchimento dos pressupostos legais para a concessão de gratuidade da justiça, conforme despacho proferido.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, comprovar nos autos o preenchimento dos pressupostos legais para a concessão de gratuidade da justiça, conforme despacho proferido, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, comprovar nos autos o preenchimento dos pressupostos legais para a concessão de gratuidade da justiça, conforme despacho proferido, a seguir transcrita.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, comprovar nos autos o preenchimento dos pressupostos legais para a concessão de gratuidade da justiça, conforme despacho proferido, cuja cópia segue anexa.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>    
        
        <item id="intmItAtoOrdinatorio" label="Ato Ordinatório" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor do #:B{#:U{ATO ORDINATÓRIO}} #:span@docId{}praticado pela Secretaria Judicial este Juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor do #:B{#:U{ATO ORDINATÓRIO}} #:span@docId{}praticado pela Secretaria Judicial este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor do #:B{#:U{ATO ORDINATÓRIO}} #:span@docId{}praticado pela Secretaria Judicial este Juízo, a seguir transcrito.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento do inteiro teor  do #:B{#:U{ATO ORDINATÓRIO}} #:span@docId{}praticado pela Secretaria Judicial este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>           
                </selectorArray>         
            </itemContent>
        </item>  
        
        <item id="intmItDecisao" label="Decisão" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{DECISÃO}} #:span@docId{}proferida por este Juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{DECISÃO}} #:span@docId{}proferida por este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{DECISÃO}} #:span@docId{}proferida por este Juízo, a seguir transcrita.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento do inteiro teor da #:B{#:U{DECISÃO}} #:span@docId{} proferida por este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>     
                </selectorArray>               
            </itemContent>
        </item>     
        
        <item id="intmItDespacho" label="Despacho" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor do #:B{#:U{DESPACHO}} #:span@docId{}proferido por este Juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor do #:B{#:U{DESPACHO}} #:span@docId{}proferido por este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor do #:B{#:U{DESPACHO}} #:span@docId{}proferido por este Juízo, a seguir transcrita.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento do inteiro teor  do #:B{#:U{DESPACHO}} #:span@docId{} proferido por este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>           
                </selectorArray>         
            </itemContent>
        </item>        
        
        <item id="intmItEndPoloPassivo" label="Atualizar endereço Pólo Passivo" dataPlus="">       
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, apontar o #:B{ENDEREÇO ATUAL}
                            do #{j2.env.PJeVars.processo.polos.passivo} ou se manifestar quanto a diligência do oficial de justiça#:span@docId{}. 
                        </data>
                    </arElement>              
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, apontar o #:B{ENDEREÇO ATUAL}
                            do #{j2.env.PJeVars.processo.polos.passivo} ou se manifestar quanto a diligência do oficial de justiça#:span@docId{}. 
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>        
        
        <item id="intmItEntPubManifInteresse" label="Manifestar interesse" dataPlus="">
            <competencias>
                <competencia id="civel"/>
            </competencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{FINALIDADE/MEIO IMCOMPATÍVEL}
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)}, na pessoa de seu representante legal, para que, no prazo de Lei, manifeste eventual interesse nos autos acima epigrafados, conforme DESPACHO INICIAL, proferido, cuja cópia segue anexa. 
                        </data>
                    </arElement>              
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da ente público acima qualificada, na pessoa de seu representante legal, para que, no prazo de Lei, manifeste eventual interesse nos autos acima epigrafados, conforme DESPACHO INICIAL, proferido, cuja cópia segue anexa. 
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>        
              
        <item id="intmItExameCorpoDelito" label="Exame de Corpo de Delito" dataPlus="">
            <competencias>
                <competencia id="civel"/>
            </competencias>
            <advertencias>
                <advertencia id="advtItListaExamesIML" />
                <advertencia id="advtItAdvogagosCumunicaremPartes" />
            </advertencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para tomar conhecimento da data e horário para a realização do exame de corpo de delito, designado para o dia #:span@dataManual{#:B{#:U{XXXXXDataEHorarioExame}}}, 
                            a ser reliado no #:U{IML - Complexo de Polícia Judiciária de Imperatriz, na Rua Coletora II, s/nº, Vila Vitória, nesta cidade}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento da data e horário para a realização do exame de corpo de delito, designado para o dia #:span@dataManual{#:B{#:U{XXXXXDataEHorarioExame}}}, 
                            a ser reliado no #:U{IML - Complexo de Polícia Judiciária de Imperatriz, na Rua Coletora II, s/nº, Vila Vitória, nesta cidade}..
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItExameCorpoDelitoComplementar" label="Exame de Corpo de Delito Complementar" dataPlus="">
            <competencias>
                <competencia id="civel"/>
            </competencias>
            <advertencias>
                <advertencia id="advtItListaExamesIML" />
                <advertencia id="advtItAdvogagosCumunicaremPartes" />
            </advertencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para tomar conhecimento da data e horário para a realização do exame de corpo de delito #:B{#:U{COMPLEMENTAR}}, designado para o dia #:span@dataManual{#:B{#:U{XXXXXDataEHorarioExame}}}, 
                            a ser reliado no #:U{IML - Complexo de Polícia Judiciária de Imperatriz, na Rua Coletora II, s/nº, Vila Vitória, nesta cidade}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento da data e horário para a realização do exame de corpo de delito, designado para o dia #:span@dataManual{#:B{#:U{XXXXXDataEHorarioExame}}}, 
                            a ser reliado no #:U{IML - Complexo de Polícia Judiciária de Imperatriz, na Rua Coletora II, s/nº, Vila Vitória, nesta cidade}..
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>        
         
        <item id="intmItGenerico" label="Genérico" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:U{XXXFinalidadeXXXX}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:U{XXXFinalidadeXXXX}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItIndicarBensExecutado" label="Indicar Bens Executado" dataPlus="">
            <competencias>
                <competencia id="juizadoCivel"/>
            </competencias>              
            <advertencias>
                <advertencia id="advtItIndicarBensExecutado" />
            </advertencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #:U{#{j2.env.PJeVars.expediente.prazo}}, indicar bens do Executado 
                            passíveis de penhora e sua respectiva localização, #:B{sob pena de extinção e arquivamento do 
                            processo}. 
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #:U{#{j2.env.PJeVars.expediente.prazo}}, indicar bens do Executado 
                            passíveis de penhora e sua respectiva localização, #:B{sob pena de extinção e arquivamento do 
                            processo}. 
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>        
        
        <item id="intmItInteresseAdjudicação" label="Interesse Adjudicação" dataPlus="">
            <competencias>
                <competencia id="civel"/>
                <competencia id="juizadoCivel"/>
            </competencias>                      
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #:U{#{j2.env.PJeVars.expediente.prazo}}, manifestar seu interesse
                            quanto á #:B{#:U{ADJUDICAÇÃO}} dos bens penhorados nos presenes autos. 
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #:U{#{j2.env.PJeVars.expediente.prazo}}, manifestar seu interesse
                            quanto á #:B{#:U{ADJUDICAÇÃO}} dos bens penhorados nos presenes autos. 
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>            
          
        <item id="intmItJuntComprovEndereco" label="Juntar Comprovante de Endereço" dataPlus="">
            <advertencias>
                <advertencia id="advtItLocacaoComrpovanteEndereco" />
                <advertencia id="advtItIdadeComrpovanteEndereco" />
            </advertencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, juntar ao processo comprovante de endereço atual, legível e em nome do #{j2.env.PJeVars.processo.polos.ativo}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, juntar ao processo comprovante de endereço atual, legível e em nome do #{j2.env.PJeVars.processo.polos.ativo}.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>
        
        
        <item id="intmItJuntExtratoBancario" label="Juntar Extratos Bancários" dataPlus="">
            <competencias>
                <competencia id="civel"/>
                <competencia id="juizadoCivel"/>
            </competencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, juntar aos autos os extratos bancários dos 30 
                            (trinta) dias que antecederam o(s) empréstimo(s) objeto(s) da lide, 
                            bem como, os extratos da conta da parte autora, referente aos 60 (sessenta) dias que sucederam a data do(s) 
                            referido(s) empréstimo(s), #:B{sob pena de indeferimento da inicial}.
                        </data>
                    </arElement>             
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, juntar aos autos os extratos bancários dos 30 
                            (trinta) dias que antecederam o(s) empréstimo(s) objeto(s) da lide, 
                            bem como, os extratos da conta da parte autora, referente aos 60 (sessenta) dias que sucederam a data do(s) 
                            referido(s) empréstimo(s), #:B{sob pena de indeferimento da inicial}.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>          
        
        <item id="intmItJuntRequerimentoAdmDPVAT" label="Juntar Requerimento DPVAT" dataPlus="">
            <competencias>
                <competencia id="civel"/>
            </competencias>            
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, 
                            juntar aos autos comprovante de que houve prévio requerimento administrativo do seguro DPVAT, 
                            #:B{sob pena de indeferimento da inicial}.
                        </data>
                    </arElement>             
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, 
                            juntar aos autos comprovante de que houve prévio requerimento administrativo do seguro DPVAT, 
                            #:B{sob pena de indeferimento da inicial}.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>                       
                
        
        <item id="intmItLiminar" label="Liminar" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{Medida Liminar/Antecipação de Tutela}} #:span@docId{}concedido em favor do #{j2.env.PJeVars.processo.polos.ativo}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{Medida Liminar/Antecipação de Tutela}} #:span@docId{}concedido em favor do #{j2.env.PJeVars.processo.polos.ativo}, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{Medida Liminar/Antecipação de Tutela}} #:span@docId{}concedido em favor do #{j2.env.PJeVars.processo.polos.ativo}, a seguir transcrita.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento do inteiro teor da #:B{#:U{Medida Liminar/Antecipação de Tutela}} #:span@docId{} concedido em favor do #{j2.env.PJeVars.processo.polos.ativo}, cuja cópia segue anexa.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>
                
   
        
        
        <item id="intmItManifestarSe" label="Manifestar-se" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)}para, no prazo de #{j2.env.PJeVars.expediente.prazo}, MANIFESTAR-SE acerca do(a)(s) #:span@tipoDocumento{XXXDocumentoXXXX}#:span@docId{}.
                        </data>
                    </arElement>        
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, MANIFESTAR-SE acerca do(a)(s) #:span@tipoDocumento{XXXDocumentoXXXX}#:span@docId{}..
                        </data>
                    </arElement>           
                </selectorArray>         
            </itemContent>
        </item>     
        
        
       
        
        
        <item id="intmItPenhoraOnLine" label="Penhora Online" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} da #:U{#:B{PENHORA ONLINE}} realizada na importância de #:U{#:B@valorBacenjud.intmItPenhoraOnLine{R$ 0,00 (zero)}}, referente à Execução dos autos epigrafados que tramita perante este Juizado Especial Cível.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento da #:U{#:B{PENHORA ONLINE}} realizada na importância de #:U{#:B@valorBacenjud.intmItPenhoraOnLine{R$ 0,00 (zero)}}, referente à Execução dos autos epigrafados que tramita perante este Juizado Especial Cível..
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItPenhoraOnLineOferecerEmbargos" label="Penhora Online - Oferecer Embargos" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} para, caso queira, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:B{OFERECER EMBARGOS} à presente Execução, #:U{sob pena} de serem transferidos os valores citados ao #{j2.env.PJeVars.processo.polos.ativo}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da mesma para, caso queira, no prazo #{j2.env.PJeVars.expediente.prazo}, #:B{OFERECER EMBARGOS} à presente Execução, #:U{sob pena} de serem transferidos os valores citados ao #{j2.env.PJeVars.processo.polos.ativo}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItReceberAlvará" label="Receber Alvará" dataPlus="">
            <competencias>
                <competencia id="juizadoCivel"/>
            </competencias>              
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} para, no prazo improrrogável de 5 dias, #:B{comparecer à Secretaria Judicial} deste Juizado a fim de receber #:B{Alvará Judicial} que #:U{se encontra à sua disposição}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo improrrogável de 5 dias, #:B{comparecer à Secretaria Judicial} deste Juizado a fim de receber #:B{Alvará Judicial} que #:U{se encontra à sua disposição}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItSentenca" label="Sentença" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{SENTENÇA}} #:span@docId{}proferida por este Juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{SENTENÇA}} #:span@docId{}proferida por este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{SENTENÇA}} #:span@docId{}proferida por este Juízo, a seguir transcrita.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento do inteiro teor da #:B{#:U{SENTENÇA}} #:span@docId{} proferida por este Juízo, cuja cópia segue anexa.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>
        
        <item id="intmItSentencaObrigacaoFazer" label="Sentença | Obrigação" dataPlus="requireIdElementSet">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{SENTENÇA}} #:span@docId{}proferida por este Juízo, 
                            #:U{#:B{bem como do teor da(s) OBRIGAÇÃO(ÕES) DE FAZER/NÃO FAZER constantes no julgado}}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCorreios">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{SENTENÇA}} #:span@docId{}proferida por este Juízo, 
                            #:U{#:B{bem como do teor da(s) OBRIGAÇÃO(ÕES) DE FAZER/NÃO FAZER constantes no julgado}},
                            cuja cópia segue anexa.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItDJe">
                        <data>
                            #:B{INTIMADO(A)} de todo o teor da #:B{#:U{SENTENÇA}} #:span@docId{}proferida por este Juízo, 
                            #:U{#:B{bem como do teor da(s) OBRIGAÇÃO(ÕES) DE FAZER/NÃO FAZER constantes no julgado}},
                            a seguir transcrita.
                        </data>
                    </arElement>                
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento do inteiro teor da #:B{#:U{SENTENÇA}} #:span@docId{} proferida por este Juízo, 
                            #:U{#:B{bem como do teor da(s) OBRIGAÇÃO(ÕES) DE FAZER/NÃO FAZER constantes no julgado}},
                            cuja cópia segue anexa.
                        </data>
                    </arElement>            
                </selectorArray>        
            </itemContent>
        </item>
        
        <item id="intmItAudDesigExTiEx" label="Designada | Prazo Embargos Audiência" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} a comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}, na #{j2.env.PJeVars.audiencia.sala}, deste Juízo, quando #:U{poderá oferecer embargos} (art. 52, IX, da Lei 9.099), por escrito ou verbalmente.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à Audiência de #{j2.env.PJeVars.audiencia.tipo}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}, na #{j2.env.PJeVars.audiencia.sala}, deste Juízo, quando #:U{poderá oferecer embargos} (art. 52, IX, da Lei 9.099), por escrito ou verbalmente.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudDesigExTiExSemSala" label="Designada | Prazo Embargos Audiência" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} a comparecer à #:B{Audiência de #{j2.env.PJeVars.audiencia.tipo}}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}, quando #:U{poderá oferecer embargos} (art. 52, IX, da Lei 9.099), por escrito ou verbalmente.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para comparecer à #:B{Audiência de #{j2.env.PJeVars.audiencia.tipo}}, designada para o dia #:U{#:B{#{j2.env.PJeVars.audiencia.data}}}, quando #:U{poderá oferecer embargos} (art. 52, IX, da Lei 9.099), por escrito ou verbalmente.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>        
                
        <!-- VÍDEO CONFERÊNCIA-->
        <item id="intmItAudienciaPresencial" label="Audiência Presencial" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{CIENTIFICADO(A)} de que a #:B{audiência} designada nos autos será realizada #:B{#:U{PRESENCIALMENTE}} na 
                            sala de audiências deste juízo.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{CIENTIFICAÇÃO} das partes de que a #:B{audiência} designada nos autos será realizada #:B{#:U{PRESENCIALMENTE}} na 
                            sala de audiências deste juízo.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItVideoConferenciaCiencia" label="Ciência da video conferência" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{CIENTIFICADO(A)} de que a #:B{audiência} designada será realizada #:B{por meio de videoconferência}, 
                            nos moldes em que prevê a Lei 13.994/2020, que alterou os arts. 22 e 23 da lei 9.099/99;
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{CIENTIFICAÇÃO} das partes de que a #:B{audiência} designada nos autos  para o dia 
                            #:U{#:B{#{j2.env.PJeVars.audiencia.data}}},  será realizada #:B{por meio de videoconferência}, 
                            nos moldes em que prevê a Lei 13.994/2020, que alterou os arts. 22 e 23 da lei 9.099/99;
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        
        <item id="intmItAudienciaVideoConferenciaSala1" label="Sala 1" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <simpleElementsDefs>
                            <elemento tag="p" scope="NONE" class="p FntModDefault" >
                                #:B{INTIMADO(A)} de que #:B{na data e hora agendada} para a audiência devem, por 
                                meio da internet:
                            </elemento>

                            <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        #:B{acessar o link} #:U{https://vc.tjma.jus.br/2jecitz} (preferencialmente por meio do navegador Google Chrome), 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        digitar no campo “login” o nome do participante, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        inserir a #:B{senha} tjma1234, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        ao visualizar a pergunta “como você gostaria de se juntar ao áudio” clicar no ícone  do microfone e disponibilizar acesso à câmera 
                                        do dispositivo que estiver utilizando (computador, notebook, tablet ou celular);
                                    </elemento>
                                </elemento>
                            </elemento>
                        </simpleElementsDefs>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <simpleElementsDefs>
                            <elemento tag="p" scope="NONE" class="p FntModDefault" >
                                #:B{INTIMAÇÃO} das partes de que #:B{na data e hora agendada} para a audiência devem, por 
                                meio da internet:
                            </elemento>

                            <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        #:B{acessar o link} #:U{https://vc.tjma.jus.br/2jecitz} (preferencialmente por meio do navegador Google Chrome), 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        digitar no campo “login” o nome do participante, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        inserir a #:B{senha} tjma1234, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        ao visualizar a pergunta “como você gostaria de se juntar ao áudio” clicar no ícone  do microfone e disponibilizar acesso à câmera 
                                        do dispositivo que estiver utilizando (computador, notebook, tablet ou celular);
                                    </elemento>
                                </elemento>
                            </elemento>
                        </simpleElementsDefs>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudienciaVideoConferenciaSala2" label="Sala 2" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <simpleElementsDefs>
                            <elemento tag="p" scope="NONE" class="p FntModDefault" >
                                #:B{INTIMADO(A)} de que #:B{na data e hora agendada} para a audiência devem, por 
                                meio da internet:
                            </elemento>

                            <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        #:B{acessar o link} #:U{https://vc.tjma.jus.br/2jecitz2} (preferencialmente por meio do navegador Google Chrome), 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        digitar no campo “login” o nome do participante, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        inserir a #:B{senha} tjma1234, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        ao visualizar a pergunta “como você gostaria de se juntar ao áudio” clicar no ícone  do microfone e disponibilizar acesso à câmera 
                                        do dispositivo que estiver utilizando (computador, notebook, tablet ou celular);
                                    </elemento>
                                </elemento>
                            </elemento>
                        </simpleElementsDefs>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <simpleElementsDefs>
                            <elemento tag="p" scope="NONE" class="p FntModDefault" >
                                #:B{INTIMAÇÃO} das partes de que #:B{na data e hora agendada} para a audiência devem, por 
                                meio da internet:
                            </elemento>

                            <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        #:B{acessar o link} #:U{https://vc.tjma.jus.br/2jecitz2} (preferencialmente por meio do navegador Google Chrome), 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        digitar no campo “login” o nome do participante, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        inserir a #:B{senha} tjma1234, 
                                    </elemento>
                                </elemento>
                                <elemento tag="li" scope="NONE">
                                    <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                        ao visualizar a pergunta “como você gostaria de se juntar ao áudio” clicar no ícone  do microfone e disponibilizar acesso à câmera 
                                        do dispositivo que estiver utilizando (computador, notebook, tablet ou celular);
                                    </elemento>
                                </elemento>
                            </elemento>
                        </simpleElementsDefs>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItOJCertificarContatos" label="Oficial Justiça Certificar Contatos Parte Vinculada" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>     
                    <arElement keyEl="general">
                        <data>
                            #:B{FINALIDADE/MEIO IMCOMPATÍVEL}
                        </data>
                    </arElement>      
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{CERTIFICAR} o Oficial de justiça as informações de contato telefônico e whatsapp da(s) parte(s) vinculada(s) ao presente mandado, considerando a previsão do Art. 8º da Portaria Conjunta 34/2020.
                        </data>
                    </arElement>           
                </selectorArray>         
            </itemContent>
        </item>
        
        <item id="intmItPenhoraOnLineParcial" label="Penhora Online Parcial" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} da #:U{#:B{PENHORA ONLINE parcial}} realizada na importância de #:U{#:B@valorBacenjud.intmItPenhoraOnLineParcial{R$ 0,00 (zero)}}, referente à Execução dos autos epigrafados que tramita perante este Juizado Especial Cível.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar conhecimento da #:U{#:B{PENHORA ONLINE}} realizada na importância de #:U{#:B@valorBacenjud.intmItPenhoraOnLineParcial{R$ 0,00 (zero)}}, referente à Execução dos autos epigrafados que tramita perante este Juizado Especial Cível..
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItPenhoraOnLineBens" label="Penhora Bens" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} para, caso queira, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:B{OFERECER EMBARGOS} à presente execução, considerando a penhora realizada na certidão de diligência #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, #:U{sob pena} de serem adjudicados os bens penhorados.
                            
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, caso queira, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:B{OFERECER EMBARGOS} à presente execução, considerando a penhora realizada na certidão de diligência #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, #:U{sob pena} de serem adjudicados os bens penhorados.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudInstrucaoDeferimento" label="Instrução - Deferimento" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para tomar ciência de que foi deferida “a produção de prova oral consistente na inquirição 
                            de testemunha, em razão da necessidade de demonstração da ocorrência de suposta falha na prestação dos serviços 
                            de habilitação para utilização de automóvel”, nos termos do DESPACHO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar ciência de que foi deferida “a produção de prova oral consistente na inquirição 
                            de testemunha, em razão da necessidade de demonstração da ocorrência de suposta falha na prestação dos serviços 
                            de habilitação para utilização de automóvel”, nos termos do DESPACHO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAudInstrucaoTestemunhas" label="Instrução - Apresentação das testemunhas" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{INTIMADO(A)} para tomar ciência de que a parte deverá peticionar nos autos, com no 
                            #:B{mínimo 24 (vinte e quatro) horas de antecedência da audiência}, informando qualificação 
                            das testemunhas e juntando seu documento pessoal. As #:B{testemunhas} devem comparecer em 
                            audiência dispensando-se a intimação do juízo (art. 34 da Lei n. 9.099 e art. 455 do CPC), 
                            recomendando-se aos advogados, para melhor andamento do ato processual, que, na 
                            hipótese das partes e testemunhas não souberem utilizar sistema de videoconferência, 
                            ou não dispuserem de meios técnicos, participem da audiência diretamente do escritório 
                            do procurador, nos termos do DESPACHO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para tomar ciência de que a parte deverá peticionar nos autos, com no 
                            #:B{mínimo 24 (vinte e quatro) horas de antecedência da audiência}, informando qualificação 
                            das testemunhas e juntando seu documento pessoal. As #:B{testemunhas} devem comparecer em 
                            audiência dispensando-se a intimação do juízo (art. 34 da Lei n. 9.099 e art. 455 do CPC), 
                            recomendando-se aos advogados, para melhor andamento do ato processual, que, na 
                            hipótese das partes e testemunhas não souberem utilizar sistema de videoconferência, 
                            ou não dispuserem de meios técnicos, participem da audiência diretamente do escritório 
                            do procurador, nos termos do DESPACHO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItPretensaoResistida" label="Pretensao Resistida" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">1
                        <data>
                            #:B{INTIMADO(A)} para, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:B{EMENDAR A PETIÇÃO INICIAL, completando-a mediante juntada aos autos comprovantes de que antes da propositura da ação apresentou requerimento(s) administrativo(s) para solução da demanda, inclusive em relação ao pedido de indenização por danos morais, por meio da plataforma pública digital , PROCON ou no próprio órgão/instituição por meios oficiais de comunicação apto para obtenção do objeto pleiteado, com resposta de indeferimento do pedido ou omissão na resposta administrativa por prazo superior a 30 dias após a apresentação da reclamação administrativa}. 
                            
                        </data>
                    </arElement>
                    <arElement keyEl="meioComunicItCentralMandados">
                        <data>
                            #:B{INTIMAÇÃO} da parte acima qualificada para, no prazo de #{j2.env.PJeVars.expediente.prazo}, #:B{EMENDAR A PETIÇÃO INICIAL, completando-a mediante juntada aos autos comprovantes de que antes da propositura da ação apresentou requerimento(s) administrativo(s) para solução da demanda, inclusive em relação ao pedido de indenização por danos morais, por meio da plataforma pública digital , PROCON ou no próprio órgão/instituição por meios oficiais de comunicação apto para obtenção do objeto pleiteado, com resposta de indeferimento do pedido ou omissão na resposta administrativa por prazo superior a 30 dias após a apresentação da reclamação administrativa}..
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        
        
        
        <item id="intmItAdvertenciaContumacia" label="Advertência Contumácia" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{CIENTIFICADA} a parte #{j2.env.PJeVars.processo.polos.parteAtiva} de que em caso de não #:B{comparecimento pessoal} na data e hora designada, 
                            o processo será extinto sem julgamento do mérito (#:B{contumácia}), nos termos do art. 51 da Lei 9.099/95.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
        <item id="intmItAdvertenciaRevelia" label="Advertência Revelia" dataPlus="">
            <itemContent type="selectorArray" addClassStyles="">
                <selectorArray>
                    <arElement keyEl="general">
                        <data>
                            #:B{CIENTIFICADA} a parte #{j2.env.PJeVars.processo.polos.partePassiva} de que em caso de não #:B{comparecimento pessoal} (ou por intermédio de preposto 
                            regularmente credenciado) na data e hora designadas, assistida ou não de advogado, presumir-se-ão aceitos como verdadeiros os fatos alegados pela 
                            parte Demandante (#:B{revelia}), nos termos do art. 20 da Lei 9.099/95 e art. 344 do CPC/2015, ensejando o julgamento de plano.
                        </data>
                    </arElement>
                </selectorArray>               
            </itemContent>
        </item>
        
    </items>
  </selectorDef>
</Definitions>
"
};