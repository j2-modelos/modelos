window.j2.res.mod.decisaoSelSrc.xmlEncode = {      
  load : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLQpUbyBjaGFuZ2UgdGhpcyBsaWNlbnNlIGhlYWRlciwgY2hvb3NlIExpY2Vuc2UgSGVhZGVycyBpbiBQcm9qZWN0IFByb3BlcnRpZXMuClRvIGNoYW5nZSB0aGlzIHRlbXBsYXRlIGZpbGUsIGNob29zZSBUb29scyB8IFRlbXBsYXRlcwphbmQgb3BlbiB0aGUgdGVtcGxhdGUgaW4gdGhlIGVkaXRvci4KLS0+CjxEZWZpbml0aW9ucyB4bWxucz0iaHR0cDovL2oyIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiBpZD0iU2VsZWVjdG9yc0l0ZW1zRGVmaW5pdGlvbnMiIHRhcmdldE5hbWVzcGFjZT0iaHR0cDovL2oyIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9qMiAuLi9YTUwvajIueHNkIj4KICA8c2VsZWN0b3JEZWYgaWQ9InNlbGVjdG9yQmxvY29Bc3NpbmF0dXJhcyIgZ3JvdXBlZD0iZmFsc2UiPgogICAgPGV2ZW50RmlyZSBldmVudD0ic2lnbmF0YXJpby5vbkNoYW5nZSIvPgogICAgPGl0ZW1Gb3JtYXRzPgogICAgICA8ZWxlbWVudG8gdGFnPSJwIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiBzY29wZT0iTk9ORSI+CiAgICAgICAgICN7dGV4dENvbnRlbnR9CiAgICAgIDwvZWxlbWVudG8+CiAgICA8L2l0ZW1Gb3JtYXRzPgogICAgPGdyb3Vwc0RlZnM+CiAgICAgICAgPGdyb3VwIGxhYmVsPSItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9ImRlY0l0U2VsZWNpb25lIi8+CiAgICAgICAgPC9ncm91cD4KICAgICAgICA8Z3JvdXAgbGFiZWw9IkxpbWluYXIgRGVmZXJpbWVudG8iPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9ImRlY0l0RGVmZXJpbWVudG8iLz4KICAgICAgICAgICAgPCEtLWdJdGVtIGlkPSJkZWNJdENOUkNlbWFyIi8tLT4KICAgICAgICAgICAgPGdJdGVtIGlkPSJkZWNJdENOUkNlbWFyMiIvPgogICAgICAgICAgICA8IS0tZ0l0ZW0gaWQ9ImRlY0l0RW1wcmVzdGltb0NvbnNpZ25hZG9JcnJlZ3VsYXIiLy0tPgogICAgICAgICAgICA8IS0tZ0l0ZW0gaWQ9ImRlY0l0RmF0b05lZ2F0aXZvIi8tLT4KICAgICAgICAgICAgPCEtLWdJdGVtIGlkPSJkZWNJdFNlcnZpY29UZXJjZWlybyIvLS0+CiAgICAgICAgICAgIDwhLS1nSXRlbSBpZD0iZGVjSXRTUENTZXJhc2EiLy0tPgogICAgICAgICAgICA8IS0tZ0l0ZW0gaWQ9ImRlY0l0U2Vydmljb3NCYW5jYXJpb3MiLy0tPgogICAgICAgIDwvZ3JvdXA+CiAgICAgICAgPGdyb3VwIGxhYmVsPSJMaW1pbmFyIEluZGVmZXJpbWVudG8iPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9ImRlY0l0SW5kZWZlcmltZW50byIvPgogICAgICAgICAgICA8IS0tZ0l0ZW0gaWQ9ImRlY0l0RGV2VmFsclBhZ29zQ29tcHJhQ2VsdWxhciIvLS0+CiAgICAgICAgICAgIDwhLS1nSXRlbSBpZD0iZGVjSXRUZWxlZm9uZWlhSW5kZWZlcmltZW50byIvLS0+CiAgICAgICAgICAgIDwhLS1nSXRlbSBpZD0iZGVjSXRTZXJ2aWNvc0JhbmNhcmlvc0luZGVmZXJpbWVudG8iLy0tPgogICAgICAgIDwvZ3JvdXA+CiAgICAgICAgPGdyb3VwIGxhYmVsPSJSZWN1cnNvIj4KICAgICAgICAgICAgPCEtLWdJdGVtIGlkPSJkZWNJdEp1aXpvQWRtaXNzaWJpbGlkYWRlSXRlcmF0aXZhIi8tLT4KICAgICAgICAgICAgPGdJdGVtIGlkPSJkZWNJdFJlY3Vyc29SZWNlYmltZW50byIvPgogICAgICAgICAgICA8Z0l0ZW0gaWQ9ImRlY0l0UmVjdXJzb1JlY2ViaW1lbnRvSnVzdEdyYXQiLz4KICAgICAgICAgICAgPGdJdGVtIGlkPSJkZWNJdFJlY3Vyc29SZWNlYmltZW50b1N1YmlyIi8+CiAgICAgICAgICAgIDxnSXRlbSBpZD0iZGVjSXRSZWN1cnNvUmVjZWJpbWVudG9TdXNwZW5zYW8iLz4KICAgICAgICA8L2dyb3VwPgogICAgPC9ncm91cHNEZWZzPgogICAgPGl0ZW1zPgogICAgIAogICAgICAgICAgICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJkZWNJdFNlbGVjaW9uZSIgbGFiZWw9IltTZWxlY2lvbmVdIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InBsYWluVGV4dCIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPGRhdGE+CiAgICAgICAgICAgICAgICAgICAgWFhYWEF0b0p1ZGljaWFsWFhYWAogICAgICAgICAgICAgICAgPC9kYXRhPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgIAogICAgICAgIAogICAgICAgIDxpdGVtIGlkPSJkZWNJdEp1aXpvQWRtaXNzaWJpbGlkYWRlSXRlcmF0aXZhIiBsYWJlbD0iRGVjaXPDo28gSXRlcmF0aXZhIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InNpbXBsZUVsZW1lbnRzRGVmcyIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPHNpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gaWQ9ImRlY0l0SnVpem9BZG1pc3NpYmlsaWRhZGVJdGVyYXRpdmEtc3BhbiIgdGFnPSJzcGFuIiBzY29wZT0iTk9ORSIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXNzYSBkZWNpc8Ojby4gQ3VtcHJhLXNlLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+ICAgCiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAKICAgICAgICAgICAgIAogICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0U2Vydmljb3NCYW5jYXJpb3NJbmRlZmVyaW1lbnRvIiBsYWJlbD0iVGFyaWZhIFNlcnZpw6dvcyBCYW5jw6FyaW9zIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InNpbXBsZUVsZW1lbnRzRGVmcyIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPHNpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ3VpZGEtc2UgZGUgcGVkaWRvIGRlICM6QntUVVRFTEEgREUgVVJHw4pOQ0lBfSBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhIHBsZWl0ZWFkYSBwZWxhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gbmEgaW5pY2lhbCwgcHJldGVuZGVuZG8gcXVlIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9IHN1c3BlbmRhIGEgY29icmFuw6dhIGRhIHRhcmlmYSBkZSAjOkJ7IzpzcGFuQGRlY2lzYW8tc2Vydmljb3N7Q0VTVEEgREUgU0VSVknDh09TfX0sIHNvYiBmdW5kYW1lbnRvIGRlIHF1ZSBhIGNvYnJhbsOnYSDDqSBpbmRldmlkYSwgcG9pcyBzdWEgY29udGEgYmFuY8OhcmlhIHNlcmlhIHBhcmEgcmVjZWJpbWVudG8gZGUgcHJvdmVudG9zIGRlIGFwb3NlbnRhZG9yaWEuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERlY2lkby4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFNlZ3VuZG8gYSBub3ZhIHNpc3RlbcOhdGljYSBwcm9jZXNzdWFsLCBhIHR1dGVsYSBwcm92aXPDs3JpYSBwb2RlIHNlIGZ1bmRhbWVudGFyIGVtIHVyZ8OqbmNpYSBvdSBlbSBldmlkw6puY2lhLiBQb2RlIHRlciBuYXR1cmV6YSBjYXV0ZWxhciBvdSBzYXRpc2ZhdGl2YSwgYSBxdWFsIHBvZGUgc2VyIGNvbmNlZGlkYSBlbSBjYXLDoXRlciBhbnRlY2VkZW50ZSBvdSBpbmNpZGVudGFsIChhcnQuIDI5NCwgQ1BDKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUGVsbyByZWdpbWUgZ2VyYWwgZGFzIHR1dGVsYXMgZGUgdXJnw6puY2lhLCByZXN0YXJhbSB1bmlmaWNhZG9zIG9zIHByZXNzdXBvc3RvcyBmdW5kYW1lbnRhaXMgcGFyYSBhIHN1YSBjb25jZXNzw6NvIChhcnQuIDMwMCwgQ1BDKTogZWxlbWVudG9zIHF1ZSBldmlkZW5jaWVtIGEgcHJvYmFiaWxpZGFkZSBkbyBkaXJlaXRvIGUgbyBwZXJpZ28gZGUgZGFubyBvdSBvIHJpc2NvIGFvIHJlc3VsdGFkbyDDunRpbCBkbyBwcm9jZXNzby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgTm8gY2FzbyBlbSBxdWVzdMOjbywgIzpCeyM6VXtuw6NvfX0gdmlzbHVtYnJvIGEgcHJlc2Vuw6dhIGRvcyByZXF1aXNpdG9zIGF1dG9yaXphZG9yZXMgZGEgY29uY2Vzc8OjbyBkYSB0dXRlbGEgZGUgdXJnw6puY2lhIGRlIG5hdHVyZXphIGFudGVjaXBhZGEsIGNvbW8gcGFzc28gYSBkZW1vbnN0cmFyLiAgCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBDb25mb3JtZSByZWxhdGFkbyBwZWxhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gbmEgaW5pY2lhbCwgbyBtZXNtbyBwb3NzdWkgY29udGEgYmFuY8OhcmlhIHBhcmEgcmVjZWJpbWVudG8gZGUgcHJvdmVudG9zLCBubyBlbnRhbnRvIGVzdMOjbyBzZW5kbyByZWFsaXphZG9zIGRlc2NvbnRvcyBkZSBwYWNvdGUgZGUgdGFyaWZhcywgYXBlc2FyIGRlIHN1YSBjb250YSBiYW5jw6FyaWEgZmF6ZXIgcGFydGUgZGEgbW9kYWxpZGFkZSBjb250YSBiZW5lZsOtY2lvLCBkZSBhY29yZG8gY29tIGEgUmVzb2x1w6fDo28gwrouIDM0MDIvMjAwNiBkbyBDb25zZWxobyBNb25ldMOhcmlvIE5hY2lvbmFsLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBZHV6IGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBxdWUgbsOjbyBjb250cmF0b3UgbmVuaHVtIHBhY290ZSBkZSBzZXJ2acOnb3MgZSBxdWUgYWzDqW0gZGEgcmVmZXJpZGEgY29icmFuw6dhLCDDqSBlZmV0dWFkbyBkZXNjb250b3MgZGUgcXVhbHF1ZXIgc2VydmnDp28gc29saWNpdGFkbyBwZWxhIGF1dG9yYS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRW0gcXVlIHBlc2UgYXMgYWZpcm1hw6fDtWVzIGRhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0sIGFww7NzIGRldGlkYSBhbsOhbGlzZSBkbyBxdWUgZm9yYSBhY29zdGFkbyBhb3MgYXV0b3MsIHZlcmlmaWNvIHF1ZSBuw6NvIHJlc3RvdSBjb25maWd1cmFkYSBhIHZlcm9zc2ltaWxoYW7Dp2FzIGRhcyBhbGVnYcOnw7VlcywgY29uc2lkZXJhbmRvIHF1ZSBvIGV4dHJhdG8gYmFuY8OhcmlvIGFwcmVzZW50YWRvIHBlbGEgcmVxdWVyZW50ZSBkZW1vbnN0cmEgcXVlIGEgbWVzbWEgcG9zc3VpIGNvbnRhIGNvcnJlbnRlLCBlIG7Do28gYXBlbmFzIGNvbnRhIGJlbmVmw61jaW8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEFkZW1haXMsIGEgY29icmFuw6dhIGZlaXRhIHBlbG9zIGJhbmNvcywgZGUgdGFyaWZhcyBkZWNvcnJlbnRlcyBkZSBwYWNvdGVzIGRlIHNlcnZpw6dvIMOpIHByZXZpc3RhIG5hIFJlc29sdcOnw6NvIG7Cui4gMy41MTgvMjAwNywgZG8gQmFjZW4sIGRlc2RlIHF1ZSBwcmV2aXN0YSBlbSBjb250cmF0bywgY29uZm9ybWUgbyBhcnQuIDHCuiwgZG8gcmVmZXJpZG8gYXRvIG5vcm1hdGl2byBlIHNlZ3VpbmRvIHNldSByZWdyYW1lbnRvLiBBc3NpbSwgdGVuZG8gYSBwYXJ0ZSBhdXRvcmEgcmVhbGl6YWRvICBhIGFiZXJ0dXJhIGRlIGNvbnRhIGNvcnJlbnRlLCDDqSBkZXZpZGEgYSBjb2JyYW7Dp2EgZGUgdGFyaWZhcy4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgTmVzdGUgYXNwZWN0byBwb2RlIHNlciBvYnNlcnZhZG8gYWluZGEgcXVlIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSByZWFsaXphIG91dHJvcyB0aXBvcyB0cmFuc2HDp8O1ZXMgZmluYW5jZWlyYXMgZW0gc3VhIGNvbnRhIGNvcnJlbnRlLCBjb21vIHBhZ2FtZW50byBkZSBwYXJjZWxhIGRlIGVtcHLDqXN0aW1vLCBvIHF1ZSBuw6NvIHNlcmlhIHBvc3PDrXZlbCBkZSBlZmV0dWFyIGVtIGNvbnRhIGVzcGVjw61maWNhIHBhcmEgcmVjZWJpbWVudG8gZGUgYmVuZWbDrWNpby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUmVzc2FsdGEtc2UgcXVlIGEgYW7DoWxpc2UgZGUgbGVnYWxpZGFkZSBkZSB0b2RvcyBvcyBkZXNjb250b3MgcmVhbGl6YWRvcyBuYSBjb250YSBkYSBwYXJ0ZSBhdXRvcmEgZSBhIHBvc3NpYmlsaWRhZGUgZGUgZGV2b2x1w6fDo28gZG9zIHZhbG9yZXMgZGVzY29udGFkb3MgZGV2ZXLDoSBhZ3VhcmRhciBhIGluc3RydcOnw6NvIHByb2JhdMOzcmlhIHBhcmEgc2VyIGFuYWxpc2FkYSBhIHByb2NlZMOqbmNpYSBvdSBuw6NvLCB1bWEgdmV6IHF1ZSBzZSB0cmF0YSBkZSBxdWVzdMOjbyBkZSBtw6lyaXRvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEaWFudGUgZG8gZXhwb3N0bywgIzpVeyM6QntOw4NPIENPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBIHBsZWl0ZWFkYSBwZWxhIHBhcnRlIGF1dG9yYSBuYSBpbmljaWFsfX0uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0VtIG7Do28gaGF2ZW5kbyB0ZW1wbyBow6FiaWwgcGFyYSBjdW1wcmltZW50byBkYXMgY29tdW5pY2HDp8O1ZXMsIHJlZGVzaWduZS1zZSBhIGF1ZGnDqm5jaWEgcmVnaXN0cmFkYSBhdXRvbWF0aWNhbWVudGUgcGVsbyBzaXN0ZW1hIFBKZS59LiAjOkJ7Q0lURS1TRSBlIElOVElNRS1TRX3CoGEgcmVjbGFtYWRhIHBhcmEgYXVkacOqbmNpYSBkZSBDb25jaWxpYcOnw6NvLCBJbnN0cnXDp8OjbyBlIEp1bGdhbWVudG8gY2VydG8gcXVlIHN1YSBhdXPDqm5jaWEgaW1wb3J0YXLDoSBub3MgZWZlaXRvcyBkYSBjb25maXNzw6NvIGUgcmV2ZWxpYSwgY29tIGp1bGdhbWVudG8gaW1lZGlhdG8gZGEgY2F1c2EgKGFydHMuIDIzIGUgMzAgZGEgTGVpIDkuMDk5Lzk1KS4gQWxpbmhhdm8gcXVlLCBxdWFudG8gw6AgcGFydGUgYXV0b3JhLCBvIHNldSBuw6NvIGNvbXBhcmVjaW1lbnRvIHJlZHVuZGFyw6EgZW0gYXJxdWl2YW1lbnRvIHByZW1hdHVybyBkbyBwZWRpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby59CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4gICAgCiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0iZGVjSXRTZXJ2aWNvc0JhbmNhcmlvcyIgbGFiZWw9IlRhcmlmYSBTZXJ2acOnb3MgQmFuY8OhcmlvcyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEN1aWRhLXNlIGRlIHBlZGlkbyBkZSAjOkJ7VFVURUxBIERFIFVSR8OKTkNJQX0gZGUgbmF0dXJlemEgYW50ZWNpcGFkYSBwbGVpdGVhZGEgcGVsYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IG5hIGluaWNpYWwsIHByZXRlbmRlbmRvIHF1ZSBhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSBzdXNwZW5kYSBhIGNvYnJhbsOnYSBkYSB0YXJpZmEgZGUgIzpCeyM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU319LCBzb2IgZnVuZGFtZW50byBkZSBxdWUgYSBjb2JyYW7Dp2Egw6kgaW5kZXZpZGEuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERlY2lkby4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFNlZ3VuZG8gYSBub3ZhIHNpc3RlbcOhdGljYSBwcm9jZXNzdWFsLCBhIHR1dGVsYSBwcm92aXPDs3JpYSBwb2RlIHNlIGZ1bmRhbWVudGFyIGVtIHVyZ8OqbmNpYSBvdSBlbSBldmlkw6puY2lhLiBQb2RlIHRlciBuYXR1cmV6YSBjYXV0ZWxhciBvdSBzYXRpc2ZhdGl2YSwgYSBxdWFsIHBvZGUgc2VyIGNvbmNlZGlkYSBlbSBjYXLDoXRlciBhbnRlY2VkZW50ZSBvdSBpbmNpZGVudGFsIChhcnQuIDI5NCwgQ1BDKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUGVsbyByZWdpbWUgZ2VyYWwgZGFzIHR1dGVsYXMgZGUgdXJnw6puY2lhLCByZXN0YXJhbSB1bmlmaWNhZG9zIG9zIHByZXNzdXBvc3RvcyBmdW5kYW1lbnRhaXMgcGFyYSBhIHN1YSBjb25jZXNzw6NvIChhcnQuIDMwMCwgQ1BDKTogZWxlbWVudG9zIHF1ZSBldmlkZW5jaWVtIGEgcHJvYmFiaWxpZGFkZSBkbyBkaXJlaXRvIGUgbyBwZXJpZ28gZGUgZGFubyBvdSBvIHJpc2NvIGFvIHJlc3VsdGFkbyDDunRpbCBkbyBwcm9jZXNzby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbyBqw6EgcmVzc2FsdGFkbyBhY2ltYSwgcGFyYSBhIGNvbmNlc3PDo28gZGEgdHV0ZWxhIGRlIHVyZ8OqbmNpYSBwbGVpdGVhZGEgcGVsYSByZXF1ZXJlbnRlIMOpIG5lY2Vzc8OhcmlhIGEgY29uZ3J1w6puY2lhIGRlIGRvaXMgcmVxdWlzaXRvcyBiw6FzaWNvcywgbyBwcmltZWlybyDDqSBhIHBsYXVzaWJpbGlkYWRlIG91IGFwYXLDqm5jaWEgZGUgc3VhcyBhbGVnYcOnw7VlcyBlIG8gc2VndW5kbyDDqSBvIHBlcmlnbyBkYSBkZW1vcmEsIG91IHNlamEsIHV0aWxpemFuZG8tc2UgZGUgdW0ganXDrXpvIGRlIHByb2JhYmlsaWRhZGUsIGRldmUtc2UgdmVyaWZpY2FyIGEgY29lcsOqbmNpYSBkYXMgYWxlZ2HDp8O1ZXMgZmFjZSBhb3MgZmF0b3MgZSBwcm92YXMgYXByZXNlbnRhZG9zLCBzZW5kbyBpbXByZXNjaW5kw612ZWwgbyBkaXJlaXRvIGRpc2N1dGlkbyBlbSBqdcOtem8gZXN0ZWphIGVtIHJpc2NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUG9pcyBiZW0sIG5vIGNhc28gZG9zIGF1dG9zIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBqdW50b3UgYW9zIGF1dG9zIGV4dHJhdG8ocykgYmFuY8OhcmlvKHMpIGVtIHF1ZSBpbmNpZGUobSkgYShzKSByZWZlcmlkYShzKSBjb2JyYW7Dp2EocyksIGRlbW9uc3RyYW5kbywgY29tbyBpc3NvLCBhIHByb2JhYmlsaWRhZGUgZG8gZGlyZWl0byBhbGVnYWRvLiAKICAgICAgICAgICAgICAgICAgICAgICAgQXNzaW0gdmlzbHVtYnJvIGEgcHJlc2Vuw6dhIGRvcyByZXF1aXNpdG9zIGF1dG9yaXphZG9yZXMgZGEgY29uY2Vzc8OjbyBkYSB0dXRlbGEgZGUgdXJnw6puY2lhIGRlIG5hdHVyZXphIGFudGVjaXBhZGEsIGNvbW8gcGFzc28gYSBkZW1vbnN0cmFyLiAKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIENvbmZvcm1lIHJlbGF0YWRvIHBlbGEgcGFydGUgYXV0b3JhbCwgbyBtZXNtbyBwb3NzdWkgdW1hIGNvbnRhIGNvcnJlbnRlIGp1bnRvIGFvICN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZVVDfSwgYSBxdWFsIHV0aWxpemEgcGFyYSByZWNlYmVyIHNldSBiZW5lZsOtY2lvLCBjb250dWRvIGFvIHJldGlyYXIgYWxndW5zIGV4dHJhdG9zIHBlcmNlYmV1IHF1ZSBhIHJlcXVlcmlkYSBoYXZpYSBlZmV0dWFkbyBkZXNjb250b3MgcmVmZXJlbnRlcyDDoCB0YXJpZmEgZGUgIzpCeyM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU319LgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBbyBhbmFsaXNhciBhcyBhbGVnYcOnw7VlcyBhdXRvcmFpcywgYmVtIGNvbW8gbyBxdWUgZm9yYSBhY29zdGFkbyBhb3MgYXV0b3MsIHZlcmlmaWNvIHF1ZSBleGlzdGVtIGFzIGNvYnJhbsOnYXMgaW5kaWNhZGFzIHBlbG8gYXV0b3IsIGNvbSBhIGRlc2NyacOnw6NvIGRlIFRhcmlmYSAjOnNwYW5AZGVjaXNhby1zZXJ2aWNvc3tDRVNUQSBERSBTRVJWScOHT1N9LCBjb25maWd1cmFuZG8gYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8uIAogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBIw6EgdGFtYsOpbSBwZXJpZ28gZGUgZGFubyBncmF2ZSBvdSBkZSBkaWbDrWNpbCByZXBhcmHDp8OjbyB0ZW5kbyBlbSB2aXN0YSBxdWUgbyByZXF1ZXJlbnRlIGVzdMOhIHRlbmRvIHF1ZSBhcmNhciBjb20gdW0gY3VzdG8gcXVlIG7Do28gY29udHJhdG91IChwZXJpY3VsdW0gaW4gbW9yYSkuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERpYW50ZSBkbyBleHBvc3RvLCAjOlV7IzpCe0NPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBfSBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhICM6QntwbGVpdGVhZGEgcGVsYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IG5hIHBlw6dhIGluaWNpYWx9fSwgY29tIHN1cGVkw6JuZW8gbm8gYXJ0LiAzMDAgZG8gQ8OzZGlnbyBkZSBQcm9jZXNzbyBDaXZpbCwgcGFyYSBkZXRlcm1pbmFyIMOgICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVQYXNzaXZhfSBxdWUgIzpCeyM6VXsgU1VTUEVOREF9fSBhcyBjb2JyYW7Dp2FzIHJlZmVyZW50ZXMgw6AgVGFyaWZhICM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU30gYXTDqSBhIHJlc29sdcOnw6NvIGRhIGxpZGUsICM6Qntzb2IgcGVuYSBkZSBtdWx0YSBwb3IgY29icmFuw6dhIG5vIHZhbG9yIGRlIFIkIDIwMCwwMCAoZHV6ZW50b3MgcmVhaXMpIHBvciBkZXNjdW1wcmltZW50b30uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0VtIG7Do28gaGF2ZW5kbyB0ZW1wbyBow6FiaWwgcGFyYSBjdW1wcmltZW50byBkYXMgY29tdW5pY2HDp8O1ZXMsIHJlZGVzaWduZS1zZSBhIGF1ZGnDqm5jaWEgcmVnaXN0cmFkYSBhdXRvbWF0aWNhbWVudGUgcGVsbyBzaXN0ZW1hIFBKZS59LiAjOkJ7Q0lURS1TRSBlIElOVElNRS1TRX3CoGEgcmVjbGFtYWRhIHBhcmEgYXVkacOqbmNpYSBkZSBDb25jaWxpYcOnw6NvLCBJbnN0cnXDp8OjbyBlIEp1bGdhbWVudG8gY2VydG8gcXVlIHN1YSBhdXPDqm5jaWEgaW1wb3J0YXLDoSBub3MgZWZlaXRvcyBkYSBjb25maXNzw6NvIGUgcmV2ZWxpYSwgY29tIGp1bGdhbWVudG8gaW1lZGlhdG8gZGEgY2F1c2EgKGFydHMuIDIzIGUgMzAgZGEgTGVpIDkuMDk5Lzk1KS4gQWxpbmhhdm8gcXVlLCBxdWFudG8gw6AgcGFydGUgYXV0b3JhLCBvIHNldSBuw6NvIGNvbXBhcmVjaW1lbnRvIHJlZHVuZGFyw6EgZW0gYXJxdWl2YW1lbnRvIHByZW1hdHVybyBkbyBwZWRpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby59CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4gICAgCiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0RmF0b05lZ2F0aXZvIiBsYWJlbD0iRmF0byBOZWdhdGl2byIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEN1aWRhLXNlIGRlIHBlZGlkbyBkZSAjOkJ7VFVURUxBIERFIFVSR8OKTkNJQX0gZGUgbmF0dXJlemEgYW50ZWNpcGFkYSBwbGVpdGVhZGEgcGVsYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9ICM6Qnsje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5hdGl2YS5ub21lVUN9fSBuYSBpbmljaWFsLCBwcmV0ZW5kZW5kbyBxdWUgYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gc3VzcGVuZGEgYSBjb2JyYW7Dp2EgZGUgIzpCeyM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU319LCBzb2IgZnVuZGFtZW50byBkZSBxdWUgYSBjb2JyYW7Dp2Egw6kgaW5kZXZpZGEuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERlY2lkby4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFNlZ3VuZG8gYSBub3ZhIHNpc3RlbcOhdGljYSBwcm9jZXNzdWFsLCBhIHR1dGVsYSBwcm92aXPDs3JpYSBwb2RlIHNlIGZ1bmRhbWVudGFyIGVtIHVyZ8OqbmNpYSBvdSBlbSBldmlkw6puY2lhLiBQb2RlIHRlciBuYXR1cmV6YSBjYXV0ZWxhciBvdSBzYXRpc2ZhdGl2YSwgYSBxdWFsIHBvZGUgc2VyIGNvbmNlZGlkYSBlbSBjYXLDoXRlciBhbnRlY2VkZW50ZSBvdSBpbmNpZGVudGFsIChhcnQuIDI5NCwgQ1BDKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUGVsbyByZWdpbWUgZ2VyYWwgZGFzIHR1dGVsYXMgZGUgdXJnw6puY2lhLCByZXN0YXJhbSB1bmlmaWNhZG9zIG9zIHByZXNzdXBvc3RvcyBmdW5kYW1lbnRhaXMgcGFyYSBhIHN1YSBjb25jZXNzw6NvIChhcnQuIDMwMCwgQ1BDKTogZWxlbWVudG9zIHF1ZSBldmlkZW5jaWVtIGEgcHJvYmFiaWxpZGFkZSBkbyBkaXJlaXRvIGUgbyBwZXJpZ28gZGUgZGFubyBvdSBvIHJpc2NvIGFvIHJlc3VsdGFkbyDDunRpbCBkbyBwcm9jZXNzby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbyBqw6EgcmVzc2FsdGFkbyBhY2ltYSwgcGFyYSBhIGNvbmNlc3PDo28gZGEgdHV0ZWxhIGRlIHVyZ8OqbmNpYSBwbGVpdGVhZGEgcGVsYSByZXF1ZXJlbnRlIMOpIG5lY2Vzc8OhcmlhIGEgY29uZ3J1w6puY2lhIGRlIGRvaXMgcmVxdWlzaXRvcyBiw6FzaWNvcywgbyBwcmltZWlybyDDqSBhIHBsYXVzaWJpbGlkYWRlIG91IGFwYXLDqm5jaWEgZGUgc3VhcyBhbGVnYcOnw7VlcyBlIG8gc2VndW5kbyDDqSBvIHBlcmlnbyBkYSBkZW1vcmEsIG91IHNlamEsIHV0aWxpemFuZG8tc2UgZGUgdW0ganXDrXpvIGRlIHByb2JhYmlsaWRhZGUsIGRldmUtc2UgdmVyaWZpY2FyIGEgY29lcsOqbmNpYSBkYXMgYWxlZ2HDp8O1ZXMgZmFjZSBhb3MgZmF0b3MgZSBwcm92YXMgYXByZXNlbnRhZG9zLCBzZW5kbyBpbXByZXNjaW5kw612ZWwgbyBkaXJlaXRvIGRpc2N1dGlkbyBlbSBqdcOtem8gZXN0ZWphIGVtIHJpc2NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUG9pcyBiZW0sIG5vIGNhc28gZG9zIGF1dG9zIGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBqdW50b3UgYW9zIGF1dG9zICM6c3BhbkBkZWNpc2FvLWNvYnJhbmNhRW17ZXh0cmF0byhzKSBiYW5jw6FyaW8ocyl9IGVtIHF1ZSBpbmNpZGUobSkgYShzKSByZWZlcmlkYShzKSBjb2JyYW7Dp2EocyksIGRlbW9uc3RyYW5kbywgY29tbyBpc3NvLCBhIHByb2JhYmlsaWRhZGUgZG8gZGlyZWl0byBhbGVnYWRvLiAKICAgICAgICAgICAgICAgICAgICAgICAgQXNzaW0gdmlzbHVtYnJvIGEgcHJlc2Vuw6dhIGRvcyByZXF1aXNpdG9zIGF1dG9yaXphZG9yZXMgZGEgY29uY2Vzc8OjbyBkYSB0dXRlbGEgZGUgdXJnw6puY2lhIGRlIG5hdHVyZXphIGFudGVjaXBhZGEsIGNvbW8gcGFzc28gYSBkZW1vbnN0cmFyLiAKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLWVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIENvbmZvcm1lIHJlbGF0YWRvIHBlbGEgcGFydGUgYXV0b3JhbCwgbyBtZXNtbyBwb3NzdWkgdW1hIGNvbnRhIGNvcnJlbnRlIGp1bnRvIGFvICN7ajIuZW52LlBKZVZhcnMucGFydGVzLnBhc3NpdmEubm9tZVVDfSwgYSBxdWFsIHV0aWxpemEgcGFyYSByZWNlYmVyIHNldSBiZW5lZsOtY2lvLCBjb250dWRvIGFvIHJldGlyYXIgYWxndW5zIGV4dHJhdG9zIHBlcmNlYmV1IHF1ZSBhIHJlcXVlcmlkYSBoYXZpYSBlZmV0dWFkbyBkZXNjb250b3MgcmVmZXJlbnRlcyDDoCB0YXJpZmEgZGUgIzpCeyM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU319LgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8tLT4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEFvIGFuYWxpc2FyIGFzIGFsZWdhw6fDtWVzIGF1dG9yYWlzLCBiZW0gY29tbyBvIHF1ZSBmb3JhIGFjb3N0YWRvIGFvcyBhdXRvcywgdmVyaWZpY28gcXVlIGV4aXN0ZW0gYXMgY29icmFuw6dhcyBpbmRpY2FkYXMgcGVsbyBhdXRvciwgY29tIGEgZGVzY3Jpw6fDo28gZGUgVGFyaWZhICM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU30sIGNvbmZpZ3VyYW5kbyBhIHByb2JhYmlsaWRhZGUgZG8gZGlyZWl0by4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEjDoSB0YW1iw6ltIHBlcmlnbyBkZSBkYW5vIGdyYXZlIG91IGRlIGRpZsOtY2lsIHJlcGFyYcOnw6NvIHRlbmRvIGVtIHZpc3RhIHF1ZSBvIHJlcXVlcmVudGUgZXN0w6EgdGVuZG8gcXVlIGFyY2FyIGNvbSB1bSBjdXN0byBxdWUgbsOjbyBjb250cmF0b3UgKHBlcmljdWx1bSBpbiBtb3JhKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRGlhbnRlIGRvIGV4cG9zdG8sICM6VXsjOkJ7Q09OQ0VETyBBIFRVVEVMQSBERSBVUkfDik5DSUF9IGRlIG5hdHVyZXphIGFudGVjaXBhZGEgIzpCe3BsZWl0ZWFkYSBwZWxhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gbmEgcGXDp2EgaW5pY2lhbH19LCBjb20gc3VwZWTDom5lbyBubyBhcnQuIDMwMCBkbyBDw7NkaWdvIGRlIFByb2Nlc3NvIENpdmlsLCBwYXJhIGRldGVybWluYXIgw6AgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9ICM6Qnsje2oyLmVudi5QSmVWYXJzLnBhcnRlcy5wYXNzaXZhLm5vbWVVQ319IHF1ZSAjOkJ7IzpVeyBTVVNQRU5EQX19IGFzIGNvYnJhbsOnYXMgYSB0w610dWxvIGRlICM6c3BhbkBkZWNpc2FvLXNlcnZpY29ze0NFU1RBIERFIFNFUlZJw4dPU30gYXTDqSBhIHJlc29sdcOnw6NvIGRhIGxpZGUsICM6Qntzb2IgcGVuYSBkZSBtdWx0YSBwb3IgY29icmFuw6dhIG5vIHZhbG9yIGRlICM6c3BhbkBkZWNpc2FvLW11bHRhe1IkIDIwMCwwMCAoZHV6ZW50b3MgcmVhaXMpfSBwb3IgZGVzY3VtcHJpbWVudG99LgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntFbSBuw6NvIGhhdmVuZG8gdGVtcG8gaMOhYmlsIHBhcmEgY3VtcHJpbWVudG8gZGFzIGNvbXVuaWNhw6fDtWVzLCByZWRlc2lnbmUtc2UgYSBhdWRpw6puY2lhIHJlZ2lzdHJhZGEgYXV0b21hdGljYW1lbnRlIHBlbG8gc2lzdGVtYSBQSmUufS4gIzpCe0NJVEUtU0UgZSBJTlRJTUUtU0V9wqBhIHJlY2xhbWFkYSBwYXJhIGF1ZGnDqm5jaWEgZGUgQ29uY2lsaWHDp8OjbywgSW5zdHJ1w6fDo28gZSBKdWxnYW1lbnRvIGNlcnRvIHF1ZSBzdWEgYXVzw6puY2lhIGltcG9ydGFyw6Egbm9zIGVmZWl0b3MgZGEgY29uZmlzc8OjbyBlIHJldmVsaWEsIGNvbSBqdWxnYW1lbnRvIGltZWRpYXRvIGRhIGNhdXNhIChhcnRzLiAyMyBlIDMwIGRhIExlaSA5LjA5OS85NSkuIEFsaW5oYXZvIHF1ZSwgcXVhbnRvIMOgIHBhcnRlIGF1dG9yYSwgbyBzZXUgbsOjbyBjb21wYXJlY2ltZW50byByZWR1bmRhcsOhIGVtIGFycXVpdmFtZW50byBwcmVtYXR1cm8gZG8gcGVkaWRvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7SW50aW1lbS1zZSBhcyBwYXJ0ZXMgZGVzdGEgZGVjaXPDo28ufQogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgPC9zaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+ICAgIAogICAgICAgIDwvaXRlbT4gCiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0iZGVjSXRDTlJDZW1hcjIiIGxhYmVsPSJDTlIgQ0VNQVIiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0ic2ltcGxlRWxlbWVudHNEZWZzIiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8c2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBDdWlkYS1zZSBkZSBwZWRpZG8gZGUgIzpCe1RVVEVMQSBERSBVUkfDik5DSUF9IGRlIG5hdHVyZXphIGFudGVjaXBhZGEgcGxlaXRlYWRhIHBlbGEgcGFydGUgI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZUF0aXZhfSBuYSBpbmljaWFsLCBwcmV0ZW5kZW5kbyBhIGFic3RlbsOnw6NvIGRlIHN1c3BlbnPDo28gZG8gZm9ybmVjaW1lbnRvIGRlIGVuZXJnaWEgZWzDqXRyaWNhIG5hIHVuaWRhZGUgY29uc3VtaWRvcmEgbsK6ICM6VXsjOnNwYW5AZGVjaXNhby1VQ3sxMTYzMDAzMH19LCBlbSByYXrDo28gZGEgY29icmFuw6dhIGRlIG11bHRhIHBvciBjb25zdW1vIG7Do28gcmVnaXN0cmFkbyDigJMgQ05SLsKgCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIGNhc28gZG9zIGF1dG9zLCBhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gbmFycmEgc2VyIGNsaWVudGUgZGEgY29uY2Vzc2lvbsOhcmlhIFJlcXVlcmlkYSwgZSBhcMOzcyBpbnNwZcOnw6NvIHJlYWxpemFkYSBlbSBzdWEgdW5pZGFkZSBjb25zdW1pZG9yYSByZWNlYmV1IGVtIHN1YSByZXNpZMOqbmNpYSBmYXR1cmEgZGUgbXVsdGEgQ05SIGNvbXBldMOqbmNpYSAjOnNwYW5AZGVjaXNhby1DTlItY29tcGV0ZW5jaWF7MDUvMjAxOH0gbm8gdmFsb3IgZGUgIzpzcGFuQGRlY2lzYW8tQ05SLXZhbG9ye1IkIDYuNTQwLDc0IChzZWlzIG1pbCBxdWluaGVudG9zIGUgcXVhcmVudGEgcmVhaXMgZSBzZXRlbnRhIGUgcXVhdHJvIGNlbnRhdm9zKX0uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0YSBkZXNjb25oZWNlciBxdWFscXVlciB0aXBvIGRlIGlycmVndWxhcmlkYWRlIG5vIHdhdHTDrW1ldHJvIGRlIHN1YSBjb250YSBjb250cmF0bywgYXNzZWd1cmFuZG8gcXVlIGEgY29icmFuw6dhIMOpIGluZGV2aWRhLiAKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRGVjaWRvLiAKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgU2VndW5kbyBhIG5vdmEgc2lzdGVtw6F0aWNhIHByb2Nlc3N1YWwsIGEgdHV0ZWxhIHByb3Zpc8OzcmlhIHBvZGUgc2UgZnVuZGFtZW50YXIgZW0gdXJnw6puY2lhIG91IGVtIGV2aWTDqm5jaWEuIFBvZGUgdGVyIG5hdHVyZXphIGNhdXRlbGFyIG91IHNhdGlzZmF0aXZhLCBhIHF1YWwgcG9kZSBzZXIgY29uY2VkaWRhIGVtIGNhcsOhdGVyIGFudGVjZWRlbnRlIG91IGluY2lkZW50YWwgKGFydC4gMjk0LCBDUEMpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBQZWxvIHJlZ2ltZSBnZXJhbCBkYXMgdHV0ZWxhcyBkZSB1cmfDqm5jaWEsIHJlc3RhcmFtIHVuaWZpY2Fkb3Mgb3MgcHJlc3N1cG9zdG9zIGZ1bmRhbWVudGFpcyBwYXJhIGEgc3VhIGNvbmNlc3PDo28gKGFydC4gMzAwLCBDUEMpOiBlbGVtZW50b3MgcXVlIGV2aWRlbmNpZW0gYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gZSBvIHBlcmlnbyBkZSBkYW5vIG91IG8gcmlzY28gYW8gcmVzdWx0YWRvIMO6dGlsIGRvIHByb2Nlc3NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBIGp1cmlzcHJ1ZMOqbmNpYSwgYWRtaXRpbmRvIG8gY2FiaW1lbnRvIGRlIHR1dGVsYSBkZSB1cmfDqm5jaWEsIGdlcm91IG8gZW51bmNpYWRvIGRlIG4uIDI2LCBjb20gbyBzZWd1aW50ZSB0ZW9yOiAjOkJ74oCcU8OjbyBjYWLDrXZlaXMgYSB0dXRlbGEgYWNhdXRlbGF0w7NyaWEgZSBhIGFudGVjaXBhdMOzcmlhIG5vcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcywgZW0gY2Fyw6F0ZXIgZXhjZXBjaW9uYWzigJ19LiAoRsOzcnVtIFBlcm1hbmVudGUgZGUgSnXDrXplcyBDb29yZGVuYWRvcmVzIGRvcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcyBlIENyaW1pbmFpcyBkbyBCcmFzaWwgLSBYViBFbmNvbnRybyBOYWNpb25hbCAtIEZsb3JpYW7Ds3BvbGlzIC0gU2FudGEgQ2F0YXJpbmEpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBbyBqdWxnYXIgcmVjdXJzbyBlc3BlY2lhbCByZXByZXNlbnRhdGl2byBkZSBjb250cm92w6lyc2lhIG8gU1RKIHBhY2lmaWNvdSBvcyBzZWd1aW50ZXMgZW50ZW5kaW1lbnRvcyBhY2VyY2EgZGEgc3VzcGVuc8OjbyBkbyBmb3JuZWNpbWVudG8gZGUgZW5lcmdpYSBlbSBkZWNvcnLDqm5jaWEgZGUgbsOjbyBwYWdhbWVudG8gZGUgZmF0dXJhcyBkZSByZWN1cGVyYcOnw6NvIGRlIGNvbnN1bW8gcG9yIHJlc3BvbnNhYmlsaWRhZGUgYXRyaWJ1w612ZWwgYW8gY29uc3VtaWRvciAobm9ybWFsbWVudGUsIGZyYXVkZSBkbyBtZWRpZG9yKToKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBtYXJnaW5KdXJpc3BydWRlbmNpYSBpIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBhKSAjOkJ7IzpVe1PDsyDDqSBwb3Nzw612ZWwgY29ydGUgc2UgYSBDTlIgYXB1cmFyIHNvbWVudGUgZMOpYml0b3MgcmVsYXRpdm9zIGFvcyDDumx0aW1vcyA5MCAobm92ZW50YSkgZGlhcyBkYSBkYXRhIGRvIHZlcmlmaWNhw6fDo28gZGEgZnJhdWRlfX07IAogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IG1hcmdpbkp1cmlzcHJ1ZGVuY2lhIGkiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIGIpIEFsw6ltIGRvIGl0ZW0gYW50ZXJpb3IsICM6QnsjOlV7ZGV2ZSBzZXIgZml4YWRvIHByYXpvIHJhem/DoXZlbCBkZSwgbm8gbcOheGltbywgOTAgKG5vdmVudGEpIGRpYXMsIGFww7NzIG8gdmVuY2ltZW50byBkYSBmYXR1cmEgZGUgcmVjdXBlcmHDp8OjbyBkZSBjb25zdW1vLCBwYXJhIHF1ZSBhIGNvbmNlc3Npb27DoXJpYSBwb3NzYSBzdXNwZW5kZXIgbyBzZXJ2acOnb319LiAoUmVjdXJzbyBFc3BlY2lhbCBSZXBldGl0aXZvIG4uIDE0MTI0MzMgLyBSUy4gUmVsLiBNaW4uIEhFUk1BTiBCRU5KQU1JTi4gMcKqIFNlw6fDo28uIEp1bGdhZG8gZW0gMjUvMDQvMjAxOCkKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRW0gc2UgdHJhdGFuZG8gZGUgZMOpYml0b3MgYW50aWdvcywgZGV2ZSBhIGNvbmNlc3Npb27DoXJpYSB1dGlsaXphci1zZSBkb3MgbWVpb3Mgb3JkaW7DoXJpb3MgZGUgY29icmFuw6dhOyBjYXNvIGNvbnRyw6FyaW8sIGZpY2EgY2FyYWN0ZXJpemFkYSBpbmZyaW5nw6puY2lhIGRvIGFydC4gNDIgZG8gQ8OzZGlnbyBkZSBEZWZlc2EgZG8gQ29uc3VtaWRvci4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFBvaXMgYmVtLCBubyBjYXNvIGRvcyBhdXRvcyBhIHBhcnRlICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0ganVudG91IGFvcyBhdXRvcyBhIGZhdHVyYSBjb20gY29icmFuw6dhIGRlIG11bHRhIHBvciBjb25zdW1vIG7Do28gcmVnaXN0cmFkbyDigJMgQ05SIHJlZmVyZW50ZSBhIHBlcsOtb2RvIG7Do28gY29ycmVzcG9uZGVudGUgYW9zIHRyw6pzIMO6bHRpbW9zIG1lc2VzLCBkZW1vbnN0cmFuZG8sIGNvbW8gaXNzbywgYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gYWxlZ2Fkby4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIHF1ZSBjb25jZXJuZSBhbyBwZXJpZ28gZGEgZGVtb3JhLCBkZW5vdGEtc2UgcXVlIGRhbm8gbWFpb3IgYWR2aXLDoSBjYXNvIGhhamEgYSBpbnRlcnJ1cMOnw6NvIGRvIGZvcm5lY2ltZW50byBkZSBlbmVyZ2lhIGVsw6l0cmljYSBuYSByZWZlcmlkYSB1bmlkYWRlIGRlIGNvbnN1bW8sIHRlbmRvIGVtIHZpc3RhIHRyYXRhci1zZSBkZSBzZXJ2acOnbyBlc3NlbmNpYWwgcXVlIGRldmUgc2VyIG9mZXJlY2lkbyBkZSBtYW5laXJhIGVmaWNpZW50ZSBlIGNvbnTDrW51YSwgYSB0ZW9yIGRvIHF1ZSBlc3RhYmVsZWNlIG8gQ8OzZGlnbyBkZSBEZWZlc2EgZG8gQ29uc3VtaWRvciwgc2VuZG8gZXN0ZSB1bSBwcmVqdcOtem8gaXJyZXZlcnPDrXZlbCwgZSBxdWUsIGN1aWRhbmRvLXNlIGRlIHJlbGHDp8OjbyBjb25zdW1lcmlzdGEsIHBhcmEgbyBxdWFsIGEgbGVnaXNsYcOnw6NvIGVzcGVjw61maWNhIHBlcm1pdGUgYSBpbnZlcnPDo28gZG8gw7RudXMgZGFzIHByb3ZhcyBwYXJhIGEgZ2FyYW50aWEgZG8gZXF1aWzDrWJyaW8gZW50cmUgbyBwcmVzdGFkb3IgZGUgc2VydmnDp29zIGUgbyBjb25zdW1pZG9yLCB0aWRvIGNvbW8gYSBwYXJ0ZSBtYWlzIGZyw6FnaWwgZGEgcmVsYcOnw6NvLCBmaWNhIGEgY2FyZ28gZGEgUmVxdWVyaWRhIGNvbXByb3ZhciBxdWUgYSBjb2JyYW7Dp2Egw6kgbGVnw610aW1hLCBtb3Rpdm8gcG9yIHF1YWwgdGVuaG8gY29tbyBwcmVzZW50ZXMgb3MgcmVxdWlzaXRvcyBuZWNlc3PDoXJpb3MgcGFyYSBhIGNvbmNlc3PDo28gZGEgbWVkaWRhIHBsZWl0ZWFkYS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQXNzaW0sIGRpYW50ZSBkYSBkw7p2aWRhIHNvYnJlIGEgbGVnYWxpZGFkZSBvdSBuw6NvIGRhIGNvYnJhbsOnYSBlZmV0dWFkYSwgYSBxdWFsIHNvbWVudGUgc2Vyw6EgYW5hbGlzYWRhIGFww7NzIGRpbGHDp8OjbyBwcm9iYXTDs3JpYSBlIHJlc29sdmlkYSBlbSBzZW50ZW7Dp2EgZGUgbcOpcml0bywgIzpCeyM6VXtlbnRlbmRvIHF1ZSBvIGRpcmVpdG8gZG8gY29uc3VtaWRvciBlbSB0ZXIgbyBzZXUgZm9ybmVjaW1lbnRvIGRlIGVuZXJnaWEgZWzDqXRyaWNhIG1hbnRpZG8gY2FyZWNlIGRlIG1haW9yIHByb3Rlw6fDo28gY2F1dGVsYXIgZG8gcXVlIG8gZGlyZWl0byBkYSBjb25jZXNzaW9uw6FyaWEgZW0gY29icmFyIHN1YXMgZMOtdmlkYXMgcG9yIG1laW8gZGUgY29ydGUgZG8gc2VydmnDp28sIG91IHF1YWxxdWVyIHRpcG8gZGUgY29hw6fDo299fS4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERpYW50ZSBkbyBleHBvc3RvLCAjOlV7IzpCe0NPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBfSBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhICM6QntwbGVpdGVhZGEgcGVsYSBwYXJ0ZSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlQXRpdmF9IG5hIHBlw6dhIGluaWNpYWx9fSwgY29tIHN1cGVkw6JuZW8gbm8gYXJ0LiAzMDAgZG8gQ8OzZGlnbyBkZSBQcm9jZXNzbyBDaXZpbCwgcGFyYTogCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIDEpIERFVEVSTUlOQVIgcXVlIGEgZW1wcmVzYSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gI3tqMi5lbnYuUEplVmFycy5wcm9jZXNzby5wb2xvcy5wYXJ0ZVBhc3NpdmF9ICM6QntzZSAjOlV7QUJTVEVOSEEgREUgU1VTUEVOREVSfSBvIGZvcm5lY2ltZW50byBkZSBlbmVyZ2lhfSAjOlV7bmEgdW5pZGFkZSBjb25zdW1pZG9yYSAjOkJ7IzpzcGFuQGRlY2lzYW8tVUN7MTE2MzAwMzB9fSBvdSAjOkJ7UkVTVEFCRUxFw4dBIG8gZm9ybmVjaW1lbnRvfSwgbm8gcHJhem8gZGUgNCAocXVhdHJvKSBob3JhcywgZW0gY2FzbyBkZSBzdXNwZW5zw6NvICM6Qnttb3RpdmFkYSB1bmljYW1lbnRlIHBlbGEgZmF0dXJhIENOUn0gb2JqZXRvIGRhIHByZXNlbnRlIGxpZGV9LCBzb2IgcGVuYSBkZSBtdWx0YSBkacOhcmlhIG5vIHZhbG9yIGRlIFIkIDIwMCwwMCAoZHV6ZW50b3MgcmVhaXMpIGVtIGNhc28gZGUgZGVzY3VtcHJpbWVudG87CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7IzpVezIpIFNVU1BFTkRFUiBhIGV4aWdpYmlsaWRhZGUgZG8gZMOpYml0byBlbSBxdWVzdMOjbywgY29tcGV0w6puY2lhICM6c3BhbkBkZWNpc2FvLUNOUi1jb21wZXRlbmNpYXswNS8yMDE4fSAKICAgICAgICAgICAgICAgICAgICAgICAgbm8gdmFsb3IgZGUgIzpzcGFuQGRlY2lzYW8tQ05SLXZhbG9ye1IkIDYuNTQwLDc0IChzZWlzIG1pbCBxdWluaGVudG9zIGUgcXVhcmVudGEgcmVhaXMgZSBzZXRlbnRhIGUgcXVhdHJvIGNlbnRhdm9zKX19fSAKICAgICAgICAgICAgICAgICAgICAgICAgZSBkZW1haXMgZW5jYXJnb3MgcmVsYXRpdm9zIGFvIHNldSB2YWxvciwgYXTDqSBhIHNvbHXDp8OjbyBkYSBjYXVzYSBwb3N0YSBlbSBqdcOtem8sIAogICAgICAgICAgICAgICAgICAgICAgICBkZXZlbmRvIGFzc2ltIGEgZW1wcmVzYSAje2oyLmVudi5QSmVWYXJzLnByb2Nlc3NvLnBvbG9zLnBhcnRlUGFzc2l2YX0gIzpCe3NlICM6VXtBQlNURVIgREUgSU5TRVJJUn0gbyBub21lIGRhICN7ajIuZW52LlBKZVZhcnMucHJvY2Vzc28ucG9sb3MucGFydGVBdGl2YX0gbm9zIMOzcmfDo28gZGUgcmVzdHJpw6fDo28gZGUgY3LDqWRpdG8gZW0gcmF6w6NvIAogICAgICAgICAgICAgICAgICAgICAgICBkbyBvYmpldG8gZGEgcHJlc2VudGUgZGVtYW5kYSwgc29iIHBlbmEgZGUgaWd1YWwgbXVsdGEgYWNpbWEgYXNzaW5hbGFkYS59CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6VXtBIG11bHRhIGRpw6FyaWEgZW0gcmF6w6NvIGRvIGRlc2N1bXByaW1lbnRvIGRlc3RhIGRlY2lzw6NvIHNlcsOhIGFwbGljYWRhIHNvbWVudGUgYXTDqSBvIGxpbWl0ZSBkZSAzMCAodHJpbnRhKSBkaWFzfS4gVWx0cmFwYXNzYWRvIGVzdGUgcHJhem8sIGVtIGRlc2N1bXByaWRhIGEgZGVjaXPDo28sIGEgcGFydGUgaW50ZXJlc3NhZGEgZGV2ZXLDoSBjb211bmljYXIgbyBmYXRvIGEgZXN0ZSBqdcOtem8sIGEgZmltIGRlIHF1ZSBzZWphbSBhZG90YWRhcyBvdXRyYXMgbWVkaWRhcyBhbyBjdW1wcmltZW50byBkZXN0YSBkZWNpc8Ojby4gCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6VXtBIGRldGVybWluYcOnw6NvIHJlc3RyaW5nZS1zZSB0w6NvIHNvbWVudGUgYW9zIHZhbG9yZXMgb3JpdW5kb3MgZGEgbXVsdGEgZGUgZGlmZXJlbsOnYSBkZSBlbmVyZ2lhIGNvbnN1bWlkYSBhcHVyYWRhIHBvciBjb250YSBkYSBpcnJlZ3VsYXJpZGFkZSwgZmljYW5kbyBwb3NzaWJpbGl0YWRvIMOgIHJlcXVlcmlkYSBwcm9tb3ZlciBvIGNvcnRlIGNhc28gc3VyamFtIG1vdGl2b3MganVzdG9zIHN1cGVydmVuaWVudGVzLn0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0NpdGUtc2UgZSBpbnRpbWUtc2UgYSByZWNsYW1hZGEgcGFyYSBhdWRpw6puY2lhIGRlIGNvbmNpbGlhw6fDo28sIGluc3RydcOnw6NvIGUganVsZ2FtZW50byBhZ2VuZGFkYSBub3MgYXV0b3N9LCBjZXJ0byBxdWUgc3VhIGF1c8OqbmNpYSBpbXBvcnRhcsOhIG5vcyBlZmVpdG9zIGRhIGNvbmZpc3PDo28gZSByZXZlbGlhLCBjb20ganVsZ2FtZW50byBpbWVkaWF0byBkYSBjYXVzYSAoYXJ0cy4gMjMgZSAzMCBkYSBMZWkgOS4wOTkvOTUpLiBBbGluaGF2byBxdWUsIHF1YW50byDDoCBwYXJ0ZSBhdXRvcmEsIG8gc2V1IG7Do28gY29tcGFyZWNpbWVudG8gcmVkdW5kYXLDoSBlbSBhcnF1aXZhbWVudG8gcHJlbWF0dXJvIGRvIHBlZGlkby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0ludGltZW0tc2UgYXMgcGFydGVzIGRlc3RhIGRlY2lzw6NvLn0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PiAgICAKICAgICAgICA8L2l0ZW0+ICAKICAgICAgICA8aXRlbSBpZD0iZGVjSXRTZXJ2aWNvVGVyY2Vpcm8iIGxhYmVsPSJTZXJ2acOnbyBUZXJjZWlybyIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEN1aWRhLXNlIGRlIHBlZGlkbyBkZcKgIzpCe1RVVEVMQSBERSBVUkfDik5DSUF9wqBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhIG5hIHF1YWwgbyBhdXRvciBwcmV0ZW5kZSBhIHN1c3BlbnPDo28gZGFzY29icmFuw6dhcyBkZW5vbWluYWRhcyAjOnNwYW5AZGVub21pbmFjYW9TZXJ2aWNve+KAnFNlcnZpw6dvcyBkZSBUZXJjZWlyb3PigJ19wqBkYXMgZmF0dXJhc8KgdGVsZWbDtG5pY2FzLCBzb2LCoG/CoGZ1bmRhbWVudG8gZGUgcXVlIHPDo28gaWxlZ8OtdGltYXMswqBwb2lzIG7Do28gZm9yYW0gY29udHJhdGFkYXMgY29tIGFudcOqbmNpYSBkbyBjb25zdW1pZG9yLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEZWNpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFNlZ3VuZG8gYSBub3ZhIHNpc3RlbcOhdGljYSBwcm9jZXNzdWFsLCBhIHR1dGVsYSBwcm92aXPDs3JpYSBwb2RlIHNlIGZ1bmRhbWVudGFyIGVtIHVyZ8OqbmNpYSBvdSBlbSBldmlkw6puY2lhLiBQb2RlIHRlciBuYXR1cmV6YSBjYXV0ZWxhciBvdSBzYXRpc2ZhdGl2YSwgYSBxdWFsIHBvZGUgc2VyIGNvbmNlZGlkYSBlbSBjYXLDoXRlciBhbnRlY2VkZW50ZSBvdSBpbmNpZGVudGFsIChhcnQuIDI5NCwgQ1BDKS4gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBQZWxvIHJlZ2ltZSBnZXJhbCBkYXMgdHV0ZWxhcyBkZSB1cmfDqm5jaWEsIHJlc3RhcmFtIHVuaWZpY2Fkb3Mgb3MgcHJlc3N1cG9zdG9zIGZ1bmRhbWVudGFpcyBwYXJhIGEgc3VhIGNvbmNlc3PDo28gKGFydC4gMzAwLCBDUEMpOiBlbGVtZW50b3MgcXVlIGV2aWRlbmNpZW0gYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gZSBvIHBlcmlnbyBkZSBkYW5vIG91IG8gcmlzY28gYW8gcmVzdWx0YWRvIMO6dGlsIGRvIHByb2Nlc3NvLiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEEganVyaXNwcnVkw6puY2lhLCBhZG1pdGluZG8gbyBjYWJpbWVudG8gZGUgdHV0ZWxhIGRlIHVyZ8OqbmNpYSwgZ2Vyb3UgbyBlbnVuY2lhZG8gZGUgbi4gMjYsIGNvbSBvIHNlZ3VpbnRlIHRlb3I6IOKAnCM6QntTw6NvIGNhYsOtdmVpcyBhIHR1dGVsYSBhY2F1dGVsYXTDs3JpYSBlIGEgYW50ZWNpcGF0w7NyaWEgbm9zIEp1aXphZG9zIEVzcGVjaWFpcyBDw612ZWlzLCBlbSBjYXLDoXRlciBleGNlcGNpb25hbH3igJ0uIChGw7NydW0gUGVybWFuZW50ZSBkZSBKdcOtemVzIENvb3JkZW5hZG9yZXMgZG9zIEp1aXphZG9zIEVzcGVjaWFpcyBDw612ZWlzIGUgQ3JpbWluYWlzIGRvIEJyYXNpbCAtIFhWIEVuY29udHJvIE5hY2lvbmFsIC0gRmxvcmlhbsOzcG9saXMgLSBTYW50YSBDYXRhcmluYSkuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIGNhc28gZW0gcXVlc3TDo28sIHZpc2x1bWJybyBhIHByZXNlbsOnYSBkb3MgcmVxdWlzaXRvcyBhdXRvcml6YWRvcmVzIGRhIGNvbmNlc3PDo28gZGEgdHV0ZWxhIGRlIHVyZ8OqbmNpYSBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhLCBjb21vIHBhc3NvIGEgZGVtb25zdHJhci4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ29uZm9ybWUgcmVsYXRhZG8gcGVsbyBhdXRvciBuYSBwZcOnYSB2ZXN0aWJ1bGFyLCBvIG1lc21vIMOpIGNsaWVudGUgZGEgcmVjbGFtYWRhIHNvYiBvc8KgbsO6bWVyb3MgIzpCeyM6c3BhbkB0ZWxlZm9uZXNTZXJ2aWNveyhYWCnCoFhYWFhYLVhYWFh9fSwgZSBpbmZvcm1hIHF1ZSDCoHZlcmlmaWNvdcKgcXVlIGEgZW1wcmVzYSByZWNsYW1hZGEgZWZldHVvdSBhIGNvYnJhbsOnYSBkZW5vbWluYWRhIOKAnCM6QnsjOnNwYW5AZGVub21pbmFjYW9TZXJ2aWNve1NlcnZpw6dvc8KgZGUgVGVyY2Vpcm9zfX3igJ0swqBhwqBxdWFsIG7Do28gZm9pIGNvbnRyYXRhZGEgcGVsbyBkZW1hbmRhbnRlLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBPIGRlbWFuZGFudGUgdGFtYsOpbSBhbGVnYSBxdWUgdmVyaWZpY291IG5hcyBmYXR1cmFzIGFudGVyaW9yZXMgc3VhKHMpIGxpbmhhcyBxdWUgbyB2YWxvciBlcmEgY29icmFkbyBhIHTDrXR1bG8gZGUgc2VydmnDp29zwqBkZSB0ZXJjZWlyb3PCoG91IG91dHJhIGRlbm9taW5hw6fDo28gZXF1aXZhbGVudGUuwqBBZHV6IGFpbmRhIHF1ZSBubyBpbnRlbnRvIGRlIHJlc29sdmVyIGEgc2l0dWHDp8OjbyBwcm9jdXJvdSBhIGRlbWFuZGFkYSwgY29udHVkbyBuw6NvIG9idGV2ZSDDqnhpdG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE5vcyB0ZXJtb3MgZG8gYXJ0LiAzNzMgZG8gTkNQQywgY3VtcHJlIGFvIHJlY2xhbWFudGUgZmF6ZXIgcHJvdmEgYWNlcmNhIGRvcyBmYXRvcyBhbGVnYWRvcyBjb21vIGZ1bmRhbWVudG8gZG8gaW52b2NhZG8gZGlyZWl0bywgYXNzaW0gY29tbyBhbyByw6l1LCBhIHByb3ZhIGRvcyBmYXRvcyBpbXBlZGl0aXZvcywgbW9kaWZpY2F0aXZvcyBvdSBleHRpbnRpdm9zIGRhcXVlbGUgZGlyZWl0by4gTyBmYXRvIGRlIGhhdmVyIHJlbGHDp8OjbyBkZSBjb25zdW1vIG7Do28gaW1wbGljYSBhdXRvbcOhdGljYSBpbnZlcnPDo28gZG8gw7RudXMgZGEgcHJvdmEsIHNlbmRvIGluZGlzcGVuc8OhdmVpcyBvcyByZXF1aXNpdG9zIGxlZ2FpcyBwYXJhIHF1ZSBpc3NvIG9jb3JyYSBlIGNvbnNpc3RlbnRlcyBuYSBoaXBvc3N1ZmljacOqbmNpYSB0w6ljbmljYSBkYSBwYXJ0ZSBlIHZlcm9zc2ltaWxoYW7Dp2EgZGUgc3VhcyBhbGVnYcOnw7Vlcy4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgTm8gZW50YW50bywgIiM6QntxdWFuZG8gYSBjYXVzYSBkZSBwZWRpciBhcG9udGFkYSBwZWxvIHJlcXVlcmVudGUgw6kgdW0gZmF0byBhYnNvbHV0YW1lbnRlIG5lZ2F0aXZvLCBpbmN1bWJlIGFvIHLDqXUgZmF6ZXIgYXMgcHJvdmFzIG5lY2Vzc8OhcmlhcyDDoCBkZW5lZ2HDp8OjbyBkYSBwcmV0ZW5zw6NvIGF1dG9yYWwsIGNvbnNvYW50ZSBhIHRlb3JpYSBkYSByZWRpc3RyaWJ1acOnw6NvIGRpbsOibWljYSBkYXMgcHJvdmFzfSIuIChUSk1HIOKAkyBBSS1DdiAxLjA3MDcuMTUuMDMwMzkzLTEvMDAxIOKAkyAxMsKqIEMuQ8Otdi4g4oCTIFJlbC4gSm9zw6kgRmzDoXZpbyBkZSBBbG1laWRhIOKAkyBESmUgMTYuMDMuMjAxNykuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEFzc2ltLCBuYSBtZWRpZGEgZW0gcXVlIG7Do28gdGVyaWEgY29tbyBwcm92YXIgYSBpbmV4aXN0w6puY2lhIGRhIHJlbGHDp8OjbyBqdXLDrWRpY2EgcXVlIGVuc2Vqb3UgYXMgY29icmFuw6dhc8KgcXVlc3Rpb25hZGFzIG5vcyBhdXRvcywgYWRtaXRpciBvIGNvbnRyw6FyaW8gc2VyaWEgaW1wb3IgYW8gY29uc3VtaWRvciBhIHJlYWxpemHDp8OjbyBkZSBwcm92YSBkZSBmYXRvIG5lZ2F0aXZvLCBvIHF1ZSDDqSBpbmFkbWlzc8OtdmVsLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEYSBhbsOhbGlzZSBkb3MgYXV0b3MsIHZlcmlmaWNvIHF1ZSBhIHBhcnRlIHByb21vdmVudGUganVudG91IGFzwqBmYXR1cmFzwqBuYXMgcXVhaXPCoGRlIGZhdG/CoGNvbnN0YW0gYXMgY29icmFuw6dhcyBkZW5vbWluYWRhcyDigJwjOkJ7IzpzcGFuQGRlbm9taW5hY2FvU2Vydmljb3tTZXJ2acOnb3MgZGUgVGVyY2Vpcm9zfX3igJ0sIGFzc2ltIHJlc3RhIGNvbXByb3ZhZGEgYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8uIE5vIHF1ZSBjb25jZXJuZSBhb8KgcGVyaWN1bHVtIGluIG1vcmEsIG8gbWVzbW8gc2UgZMOhIG5hIG1lZGlkYSBlbSBxdWUgbyBhdXRvciBwb2RlIGVmZXR1YXIgbyBwYWdhbWVudG8gZGUgdW0gZMOpYml0byBxdWUgbsOjbyDDqSBkZSBzdWEgcmVzcG9uc2FiaWxpZGFkZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgT3V0cm9zc2ltLCBuw6NvIGjDoSBwcmVqdcOtem/CoCM6SXtpbiByZSB2ZXJzb30sIHZleiBxdWXCoCM6VXthIHNpdHVhw6fDo28gcG9kZSBzZXIgcmVzdGFiZWxlY2lkYX0sIGNhc28gYSBlbXByZXNhIHJlY2xhbWFkYSB0cmFnYSBhb3MgYXV0b3MgcHJvdmEgZGUgZmF0byBleHRpbnRpdm8sIG1vZGlmaWNhdGl2byBvdSBpbXBlZGl0aXZvIGRvIGRpcmVpdG8gZGEgcGFydGUgcmVxdWVyZW50ZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRGlhbnRlIGRvIGV4cG9zdG8sIzpCe8KgIzpVe0NPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBfSBwbGVpdGVhZGEgcGVsYSBwYXJ0ZSBhdXRvcmEgbmEgaW5pY2lhbH0sIGNvbSBzdXBlZMOibmVvIG5vIGFydC4gMzAwIGRvIEPDs2RpZ28gZGUgUHJvY2Vzc28gQ2l2aWwsIHBhcmHCoGRldGVybWluYXIgw6DCoGVtcHJlc2EgZGVtYW5kYWRhIHF1ZcKgIzpCeyM6VXtTVVNQRU5EQX19wqBhIGV4aWdpYmlsaWRhZGUgZG9zIGTDqWJpdG9zIGVtIHF1ZXN0w6NvwqBkZW5vbWluYWRvcyDigJwjOnNwYW5AZGVub21pbmFjYW9TZXJ2aWNve1NlcnZpw6dvcyBkZSBUZXJjZWlyb3N94oCdwqBhdMOpIGEgcmVzb2x1w6fDo28gZGEgbGlkZSzCoCM6Qntzb2IgcGVuYSBkZSBtdWx0YSBwb3IgZmF0dXJhwqBlbWl0aWRhIGNvbSBjb2JyYW7Dp2FzIGluZGV2aWRhc8Kgbm8gdmFsb3IgZGUgUiQgMjAwLDAwIChkdXplbnRvcyByZWFpcyl9IGVtIGNhc28gZGUgZGVzY3VtcHJpbWVudG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntFbSBuw6NvIGhhdmVuZG8gdGVtcG8gaMOhYmlsIHBhcmEgY3VtcHJpbWVudG8gZGFzIGNvbXVuaWNhw6fDtWVzLCByZWRlc2lnbmUtc2UgYSBhdWRpw6puY2lhIHJlZ2lzdHJhZGEgYXV0b21hdGljYW1lbnRlIHBlbG8gc2lzdGVtYSBQamUufS4gQ0lURS1TRSBlIElOVElNRS1TRcKgYSByZWNsYW1hZGEgcGFyYSBhdWRpw6puY2lhIGRlIENvbmNpbGlhw6fDo28sIEluc3RydcOnw6NvIGUgSnVsZ2FtZW50byBjZXJ0byBxdWUgc3VhIGF1c8OqbmNpYSBpbXBvcnRhcsOhIG5vcyBlZmVpdG9zIGRhIGNvbmZpc3PDo28gZSByZXZlbGlhLCBjb20ganVsZ2FtZW50byBpbWVkaWF0byBkYSBjYXVzYSAoYXJ0cy4gMjMgZSAzMCBkYSBMZWkgOS4wOTkvOTUpLiBBbGluaGF2byBxdWUsIHF1YW50byDDoCBwYXJ0ZSBhdXRvcmEsIG8gc2V1IG7Do28gY29tcGFyZWNpbWVudG8gcmVkdW5kYXLDoSBlbSBhcnF1aXZhbWVudG8gcHJlbWF0dXJvIGRvIHBlZGlkby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0ludGltZW0tc2UgYXMgcGFydGVzIGRlc3RhIGRlY2lzw6NvLn0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0RGVmZXJpbWVudG8iIGxhYmVsPSJEZWZlcmltZW50byBHZW7DqXJpY28iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0ic2ltcGxlRWxlbWVudHNEZWZzIiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8c2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBDdWlkYS1zZSBkZSBwZWRpZG8gZGUgIzpCe1RVVEVMQSBERSBVUkfDik5DSUF9IGRlIG5hdHVyZXphIGFudGVjaXBhZGEgZm9ybXVsYWRhIHBlbGEgYXV0b3JhIHF1ZSBwcmV0ZW5kZSBfX19fX19fX19fX19fX19fX19fX19fX18uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEZWNpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBTZWd1bmRvIGEgbm92YSBzaXN0ZW3DoXRpY2EgcHJvY2Vzc3VhbCwgYSB0dXRlbGEgcHJvdmlzw7NyaWEgcG9kZSBzZSBmdW5kYW1lbnRhciBlbSB1cmfDqm5jaWEgb3UgZW0gZXZpZMOqbmNpYS4gUG9kZSB0ZXIgbmF0dXJlemEgY2F1dGVsYXIgb3Ugc2F0aXNmYXRpdmEsIGEgcXVhbCBwb2RlIHNlciBjb25jZWRpZGEgZW0gY2Fyw6F0ZXIgYW50ZWNlZGVudGUgb3UgaW5jaWRlbnRhbCAoYXJ0LiAyOTQsIENQQykuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBQZWxvIHJlZ2ltZSBnZXJhbCBkYXMgdHV0ZWxhcyBkZSB1cmfDqm5jaWEsIHJlc3RhcmFtIHVuaWZpY2Fkb3Mgb3MgcHJlc3N1cG9zdG9zIGZ1bmRhbWVudGFpcyBwYXJhIGEgc3VhIGNvbmNlc3PDo28gKGFydC4gMzAwLCBDUEMpOiBlbGVtZW50b3MgcXVlIGV2aWRlbmNpZW0gYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gZSBvIHBlcmlnbyBkZSBkYW5vIG91IG8gcmlzY28gYW8gcmVzdWx0YWRvIMO6dGlsIGRvIHByb2Nlc3NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIGNhc28gZW0gcXVlc3TDo28sIHZpc2x1bWJybyBhIHByZXNlbsOnYSBkb3MgcmVxdWlzaXRvcyBhdXRvcml6YWRvcmVzIGRhIGNvbmNlc3PDo28gZGEgdHV0ZWxhIGRlIHVyZ8OqbmNpYSBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhLCBjb25zaXN0ZW50ZSBuYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gaW52b2NhZG8uIAogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0Rlc3NhIG1hbmVpcmEsIENPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBIHJlcXVlcmlkbyBwZWxhIHBhcnRlIHJlY2xhbWFudGUgbmEgaW5pY2lhbCBwYXJhIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXywgc29iIHBlbmEgZGUgbXVsdGEgZGnDoXJpYSBubyB2YWxvciBkZSBSJCAyMDAsMDAgKERVWkVOVE9TIFJFQUlTKSBlbSBjYXNvIGRlIGRlc2N1bXByaW1lbnRvLCBsaW1pdGFkYSBhbyBwcmF6byBkZSAzMCAodHJpbnRhKSBkaWFzLn0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntJbnZlcnRvIG8gw7RudXMgZGEgcHJvdmEgcGFyYSBxdWUgYXTDqSBhIGF1ZGnDqm5jaWEsIGEgZW1wcmVzYSByZXF1ZXJpZGEgYXByZXNlbnRlIGNvbnRyYXRvIG91IG5vdGEgZGUgY29tcHJhIHJlYWxpemFkYSBwZWxvIGF1dG9yLCBvdSBxdWFscXVlciBvdXRybyBkb2N1bWVudG8gcXVlIGZ1bmRhbWVudGUgYSBpbnNjcmnDp8OjbyBkbyBub21lIGRvIHJlY2xhbWFudGUgbm9zIMOzcmfDo29zIGRlIHByb3Rlw6fDo28gYW8gY3LDqWRpdG8ufQogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0NJVEUtU0UgZSBJTlRJTUUtU0V9IGEgcmVjbGFtYWRhIHBhcmEgYXVkacOqbmNpYSBkZSAjOkJ7IzpVe0NvbmNpbGlhw6fDo28sIEluc3RydcOnw6NvIGUgSnVsZ2FtZW50byBkZXNpZ25hZGF9fSwgY2VydG8gcXVlIHN1YSBhdXPDqm5jaWEgaW1wb3J0YXLDoSBub3MgZWZlaXRvcyBkYSBjb25maXNzw6NvIGUgcmV2ZWxpYSwgY29tIGp1bGdhbWVudG8gaW1lZGlhdG8gZGEgY2F1c2EgKGFydHMuIDIzIGUgMzAgZGEgTGVpIDkuMDk5Lzk1KS4gQWxpbmhhdm8gcXVlLCBxdWFudG8gw6AgcGFydGUgYXV0b3JhLCBvIHNldSBuw6NvIGNvbXBhcmVjaW1lbnRvIHJlZHVuZGFyw6EgZW0gYXJxdWl2YW1lbnRvIHByZW1hdHVybyBkbyBwZWRpZG8uIE5vIG1hbmRhZG8gZGV2ZXLDo28gc2VyIGNvbnNpZ25hZGFzIGFzIGFkdmVydMOqbmNpYXMgbmVjZXNzw6FyaWFzLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0Q05SQ2VtYXIiIGxhYmVsPSJDTlIgQ0VNQVIiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0ic2ltcGxlRWxlbWVudHNEZWZzIiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8c2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEaXNwZW5zYWRvIG8gUmVsYXTDs3Jpby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntEZWNpZG8gZW0gc2VkZSBkZSBsaW1pbmFyIG8gcGVkaWRvIGRlIGFic3RlbsOnw6NvIGRlIGNvcnRlLiBBIHBhcnRlIGF1dG9yYSBxdWVzdGlvbmEgdmFsb3JlcyByZWZlcmVudGVzIGEgdW1hIG11bHRhIGFkbWluaXN0cmF0aXZhLn0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmEgYSBjb25jZXNzw6NvIGRhIHR1dGVsYSBkZSB1cmfDqm5jaWEgw6kgbmVjZXNzw6FyaWEgYSBwcmVzZW7Dp2EgZG9zIHJlcXVpc2l0b3MgbGVnYWlzLCBtYXRlcmlhbGl6YWRvcyBuYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gZSBvIHBlcmlnbyBkZSBkYW5vIG91IG8gcmlzY28gYW8gcmVzdWx0YWRvIMO6dGlsIGRvIHByb2Nlc3NvIChhcnRpZ28gMzAwIGRvIE5vdm8gQ8OzZGlnbyBkZSBQcm9jZXNzbyBDaXZpbCkuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBIGp1cmlzcHJ1ZMOqbmNpYSwgYWRtaXRpbmRvIG8gY2FiaW1lbnRvIGRlIHR1dGVsYSBkZSB1cmfDqm5jaWEsIGdlcm91IG8gZW51bmNpYWRvIGRlIG4uIDI2LCBjb20gbyBzZWd1aW50ZSB0ZW9yOiAjOkJ74oCcU8OjbyBjYWLDrXZlaXMgYSB0dXRlbGEgYWNhdXRlbGF0w7NyaWEgZSBhIGFudGVjaXBhdMOzcmlhIG5vcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcywgZW0gY2Fyw6F0ZXIgZXhjZXBjaW9uYWzigJ19LiAoRsOzcnVtIFBlcm1hbmVudGUgZGUgSnXDrXplcyBDb29yZGVuYWRvcmVzIGRvcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcyBlIENyaW1pbmFpcyBkbyBCcmFzaWwgLSBYViBFbmNvbnRybyBOYWNpb25hbCAtIEZsb3JpYW7Ds3BvbGlzIC0gU2FudGEgQ2F0YXJpbmEpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUGFyYSBhIGNvbmNlc3PDo28gZGEgbWVkaWRhIGRlIHVyZ8OqbmNpYSBwbGVpdGVhZGEgcGVsYSBwYXJ0ZSBhdXRvcmEgw6kgbmVjZXNzw6FyaWEgYSBjb25ncnXDqm5jaWEgZGUgZG9pcyByZXF1aXNpdG9zIGLDoXNpY29zLCBxdWFpcyBzZWphbSwgbyAjOkl7ZnVtdXMgYm9uaSBpdXJpc30sIG91IGFwYXLDqm5jaWEgZGFzIGFsZWdhw6fDtWVzLCBlIG8gIzpJe3BlcmljdWx1bSBpbiBtb3JhfSwgb3UgcGVyaWdvIGRlIGRhbm8gZ3JhdmUuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEYSBhbsOhbGlzZSBkb3MgZmF0b3MgbmFycmFkb3MgZSBkYSBkb2N1bWVudGHDp8OjbyBhbmV4YWRhLCB2ZXJpZmljbyBhIHBvc3NpYmlsaWRhZGUgZGUgY29uY2Vzc8OjbyBkYSB0dXRlbGEgb3JhIHBsZWl0ZWFkYSwgcG9zdG8gcXVlLCB1dGlsaXphbmRvIGRlIHVtIGp1w616byBkZSBwcm9iYWJpbGlkYWRlLCB2ZXJpZmljbyBhIGNvZXLDqm5jaWEgZGFzIGFsZWdhw6fDtWVzIGZhY2UgYW9zIGZhdG9zIGUgcHJvdmFzIGFwcmVzZW50YWRhcywgZXhpc3RpbmRvIGEgcG9zc2liaWxpZGFkZSBxdWUgbyBkaXJlaXRvIGRpc2N1dGlkbyBlbSBqdcOtem8gZXN0ZWphIGVtIHJpc2NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgTyBTVEogZmlybW91IGVudGVuZGltZW50byBxdWU6ICM6Qnsiw6kgaWxlZ2FsIGEgaW50ZXJydXDDp8OjbyBubyBmb3JuZWNpbWVudG8gZGUgZW5lcmdpYSBlbMOpdHJpY2Egbm9zIGNhc29zIGRlIGTDrXZpZGFzIGNvbnRlc3RhZGFzIGVtIEp1w616bywgZGVjb3JyZW50ZXMgZGUgc3Vwb3N0YSBmcmF1ZGUgbm8gbWVkaWRvciBkZSBjb25zdW1vIn0gKFJFc3AgMTAxNjc0MS9SUykuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7RG8gZXhwb3N0bywgY29tIGZ1bmRhbWVudG8gbm8gYXJ0aWdvIDMwMCBkbyBOb3ZvIEPDs2RpZ28gZGUgUHJvY2Vzc28gQ2l2aWwsICM6SXtERUZJUk8gQSBMSU1JTkFSfSBwcmV0ZW5kaWRhIHBhcmEgZGV0ZXJtaW5hciBxdWUgYSByZXF1ZXJpZGEgc2UgYWJzdGVuaGEgZGUgc3VzcGVuZGVyIG8gZm9ybmVjaW1lbnRvIGRlIGVuZXJnaWEgZGEgY29udGEgY29udHJhdG8gbi4gWFhYWH0uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7TyBkZXNjdW1wcmltZW50byBkZXN0YSBkZWNpc8OjbyBmaWNhIHN1amVpdG8gw6AgbXVsdGEgZGnDoXJpYSBubyB2YWxvciBkZSBSJDIwMCwwMCAoZHV6ZW50b3MgcmVhaXMpfS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntDSVRFLVNFIGUgSU5USU1FLVNFfSBhIHJlY2xhbWFkYSBwYXJhIGF1ZGnDqm5jaWEgZGUgI3tqMi5lbnYuUEplVmFycy5hdWRpZW5jaWEudGlwb30gZGVzaWduYWRhIHBhcmEgbyBkaWEgI3tqMi5lbnYuUEplVmFycy5hdWRpZW5jaWEuZGF0YX0sIGNlcnRvIHF1ZSBzdWEgYXVzw6puY2lhIGltcG9ydGFyw6Egbm9zIGVmZWl0b3MgZGEgY29uZmlzc8OjbyBlIHJldmVsaWEsIGNvbSBqdWxnYW1lbnRvIGltZWRpYXRvIGRhIGNhdXNhIChhcnRzLiAyMyBlIDMwIGRhIExlaSA5LjA5OS85NSkuIEFsaW5oYXZvIHF1ZSwgcXVhbnRvIMOgIHBhcnRlIGF1dG9yYSwgbyBzZXUgbsOjbyBjb21wYXJlY2ltZW50byByZWR1bmRhcsOhIGVtIGFycXVpdmFtZW50byBwcmVtYXR1cm8gZG8gcGVkaWRvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgSW50aW1lbS1zZSBhcyBwYXJ0ZXMgZGVzdGEgZGVjaXPDo28uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4KICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0RW1wcmVzdGltb0NvbnNpZ25hZG9JcnJlZ3VsYXIiIGxhYmVsPSJFbXByw6lzdGltbyBDb25zaWduYWRvIElycmVndWxhciIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERpc3BlbnNhZG8gbyBSZWxhdMOzcmlvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0RlY2lkbyBlbSBzZWRlIGRlIGxpbWluYXIgZGUgc3VzcGVuc8OjbyBkZSBkZXNjb250b3MuIE8gQXV0b3IgYWxlZ2EgcXVlIG8gYmFuY28gY29uc2lnbm91IGVtcHLDqXN0aW1vIGlycmVndWxhciBlbSBzZXUgYmVuZWbDrWNpb30uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBQYXJhIGEgY29uY2Vzc8OjbyBkYSB0dXRlbGEgZGUgdXJnw6puY2lhIMOpIG5lY2Vzc8OhcmlhIGEgcHJlc2Vuw6dhIGRvcyByZXF1aXNpdG9zIGxlZ2FpcywgbWF0ZXJpYWxpemFkb3MgbmEgcHJvYmFiaWxpZGFkZSBkbyBkaXJlaXRvIGUgbyBwZXJpZ28gZGUgZGFubyBvdSBvIHJpc2NvIGFvIHJlc3VsdGFkbyDDunRpbCBkbyBwcm9jZXNzbyAoYXJ0aWdvIDMwMCBkbyBOb3ZvIEPDs2RpZ28gZGUgUHJvY2Vzc28gQ2l2aWwpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmEgYSBjb25jZXNzw6NvIGRhIG1lZGlkYSBkZSB1cmfDqm5jaWEgcGxlaXRlYWRhIHBlbGEgcGFydGUgYXV0b3JhIMOpIG5lY2Vzc8OhcmlhIGEgY29uZ3J1w6puY2lhIGRlIGRvaXMgcmVxdWlzaXRvcyBiw6FzaWNvcywgcXVhaXMgc2VqYW0sIG8gIzpJe2Z1bXVzIGJvbmkgaXVyaXN9LCBvdSBhcGFyw6puY2lhIGRhcyBhbGVnYcOnw7VlcywgZSBvICM6SXtwZXJpY3VsdW0gaW4gbW9yYX0sIG91IHBlcmlnbyBkZSBkYW5vIGdyYXZlLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRGEgYW7DoWxpc2UgZG9zIGZhdG9zIG5hcnJhZG9zIGUgZGEgZG9jdW1lbnRhw6fDo28gYW5leGFkYSwgdmVyaWZpY28gYSBwb3NzaWJpbGlkYWRlIGRlIGNvbmNlc3PDo28gZGEgdHV0ZWxhIG9yYSBwbGVpdGVhZGEsIHBvc3RvIHF1ZSwgdXRpbGl6YW5kbyBkZSB1bSBqdcOtem8gZGUgcHJvYmFiaWxpZGFkZSwgdmVyaWZpY28gYSBjb2Vyw6puY2lhIGRhcyBhbGVnYcOnw7VlcyBmYWNlIGFvcyBmYXRvcyBlIHByb3ZhcyBhcHJlc2VudGFkYXMsIGV4aXN0aW5kbyBhIHBvc3NpYmlsaWRhZGUgcXVlIG8gZGlyZWl0byBkaXNjdXRpZG8gZW0ganXDrXpvIGVzdGVqYSBlbSByaXNjbywgbm90YWRhbWVudGUgcG9yIHRyYXRhci1zZSBkZSBjb21wcm9tZXRpbWVudG8gZGUgdmVyYmEgYWxpbWVudGFyIGVtIGZ1bsOnw6NvIGRlIGTDqWJpdG9zIGRpc2N1dGlkb3MgZW0ganXDrXpvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0RvIGV4cG9zdG8sIGNvbSBmdW5kYW1lbnRvIG5vIGFydGlnbyAzMDAgZG8gTm92byBDw7NkaWdvIGRlIFByb2Nlc3NvIENpdmlsLCAjOkl7REVGSVJPIEEgTElNSU5BUn0gcHJldGVuZGlkYSBwYXJhIGRldGVybWluYXIgcXVlIGEgcmVxdWVyaWRhIHN1c3BlbmRhIG9zIGRlc2NvbnRvcyBubyBiZW5lZsOtY2lvIGRhIHBhcnRlIGF1dG9yYSAoQ29udHJhdG8gbi4gWFhOdW1lcm9Db250cmF0b1hYLCBiZW5lZsOtY2lvIG4uIFhYTnVtZXJvQmVuZWbDrWNpb1hYKS4gSW52ZXJ0byBvIMO0bnVzIGRhIHByb3ZhIHBhcmEgcXVlIGEgZGVtYW5kYWRhIGNvbXByb3ZlLCBhdMOpIGEgYXVkacOqbmNpYSwgYSBjb250cmF0YcOnw6NvIGUgcGFnYW1lbnRvIGRvIHZhbG9yIGRvIGVtcHLDqXN0aW1vLn0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntPIGRlc2N1bXByaW1lbnRvIGRlc3RhIGRlY2lzw6NvIGZpY2Egc3VqZWl0byDDoCBtdWx0YSBubyB2YWxvciBkZSBSJCA1MDAsMDAgKHF1aW5oZW50b3MgcmVhaXMpIHBhcmEgY2FkYSBub3ZvIGRlc2NvbnRvIGVmZXR1YWRvLgogICAgICAgICAgICAgICAgICAgIH08L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntEZXRlcm1pbm8gcXVlIGEgcGFydGUgcmVxdWVyZW50ZSBhcHJlc2VudGUsIGF0w6kgYSBhdWRpw6puY2lhLCBleHRyYXRvIGRlIHN1YSBjb250YSBiYW5jw6FyaWEgZG9zIG1lc2VzIGRlIFhYUGVyaW9kb0Rvc0V4dHJhdG9zWFguCiAgICAgICAgICAgICAgICAgICAgfTwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0NJVEUtU0UgZSBJTlRJTUUtU0V9IGEgcmVjbGFtYWRhIHBhcmEgYXVkacOqbmNpYSBkZSAje2oyLmVudi5QSmVWYXJzLmF1ZGllbmNpYS50aXBvfSBkZXNpZ25hZGEgcGFyYSBvIGRpYSAje2oyLmVudi5QSmVWYXJzLmF1ZGllbmNpYS5kYXRhfSwgY2VydG8gcXVlIHN1YSBhdXPDqm5jaWEgaW1wb3J0YXLDoSBub3MgZWZlaXRvcyBkYSBjb25maXNzw6NvIGUgcmV2ZWxpYSwgY29tIGp1bGdhbWVudG8gaW1lZGlhdG8gZGEgY2F1c2EgKGFydHMuIDIzIGUgMzAgZGEgTGVpIDkuMDk5Lzk1KS4gQWxpbmhhdm8gcXVlLCBxdWFudG8gw6AgcGFydGUgYXV0b3JhLCBvIHNldSBuw6NvIGNvbXBhcmVjaW1lbnRvIHJlZHVuZGFyw6EgZW0gYXJxdWl2YW1lbnRvIHByZW1hdHVybyBkbyBwZWRpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPgogICAgICAgICAgICAgICAgPC9zaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0iZGVjSXRTUENTZXJhc2EiIGxhYmVsPSJTUEMgU0VSQVNBIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InNpbXBsZUVsZW1lbnRzRGVmcyIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPHNpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgRGlzcGVuc2FkbyBvIFJlbGF0w7NyaW8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7RGVjaWRvIGVtIHNlZGUgZGUgbGltaW5hciBvIHBlZGlkbyBkZSByZXRpcmFkYSBkZSByZXN0cmnDp8Ojby59CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBQYXJhIGEgY29uY2Vzc8OjbyBkYSB0dXRlbGEgZGUgdXJnw6puY2lhIMOpIG5lY2Vzc8OhcmlhIGEgcHJlc2Vuw6dhIGRvcyByZXF1aXNpdG9zIGxlZ2FpcywgbWF0ZXJpYWxpemFkb3MgbmEgcHJvYmFiaWxpZGFkZSBkbyBkaXJlaXRvIGUgbyBwZXJpZ28gZGUgZGFubyBvdSBvIHJpc2NvIGFvIHJlc3VsdGFkbyDDunRpbCBkbyBwcm9jZXNzbyAoYXJ0aWdvIDMwMCBkbyBOb3ZvIEPDs2RpZ28gZGUgUHJvY2Vzc28gQ2l2aWwpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmEgY29uY2Vzc8OjbyBkYSBtZWRpZGEgZGUgdXJnw6puY2lhIHBsZWl0ZWFkYSBwZWxhIHBhcnRlIGF1dG9yYSDDqSBuZWNlc3PDoXJpYSBhIGNvbmdydcOqbmNpYSBkZSBkb2lzIHJlcXVpc2l0b3MgYsOhc2ljb3MsIHF1YWlzIHNlamFtLCBvICM6SXtmdW11cyBib25pIGl1cmlzfSwgb3UgYXBhcsOqbmNpYSBkYXMgYWxlZ2HDp8O1ZXMsIGUgbyAjOkl7cGVyaWN1bHVtIGluIG1vcmF9LCBvdSBwZXJpZ28gZGUgZGFubyBncmF2ZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERhIGFuw6FsaXNlIGRvcyBmYXRvcyBuYXJyYWRvcyBlIGRhIGRvY3VtZW50YcOnw6NvIGFuZXhhZGEsIG5vdGFkYW1lbnRlIGEgbmVnYXRpdmEgZGUgcXVhbHF1ZXIgdsOtbmN1bG8ganVyw61kaWNvIGNvbSBhIGZvcm5lY2Vkb3JhLCB2ZXJpZmljbyBhIHBvc3NpYmlsaWRhZGUgZGUgY29uY2Vzc8OjbyBkYSB0dXRlbGEgb3JhIHBsZWl0ZWFkYSwgcG9zdG8gcXVlLCB1dGlsaXphbmRvIGRlIHVtIGp1w616byBkZSBwcm9iYWJpbGlkYWRlLCB2ZXJpZmljbyBhIGNvZXLDqm5jaWEgZGFzIGFsZWdhw6fDtWVzIGZhY2UgYW9zIGZhdG9zIGUgcHJvdmFzIGFwcmVzZW50YWRhcywgZXhpc3RpbmRvIGEgcG9zc2liaWxpZGFkZSBxdWUgbyBkaXJlaXRvIGRpc2N1dGlkbyBlbSBqdcOtem8gZXN0ZWphIGVtIHJpc2NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0RvIGV4cG9zdG8sIGNvbSBmdW5kYW1lbnRvIG5vIGFydGlnbyAzMDAgZG8gTm92byBDw7NkaWdvIGRlIFByb2Nlc3NvIENpdmlsLCAjOkl7REVGSVJPIEEgTElNSU5BUn0gcHJldGVuZGlkYSBwYXJhIGRldGVybWluYXIgcXVlOiBYWFhUZXh0b0xpdnJlU29icmVEaXNwb3NpdGl2b1hYWC4KICAgICAgICAgICAgICAgICAgICB9PC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7TyBkZXNjdW1wcmltZW50byBkZXN0YSBkZWNpc8OjbyBmaWNhIHN1amVpdG8gw6AgbXVsdGEgZGnDoXJpYSBubyB2YWxvciBkZSBSJDIwMCwwMCAoZHV6ZW50b3MgcmVhaXMpLCBhcGxpY8OhdmVsIGF0w6kgbyBsaW1pdGUgZGUgMzAgKHRyaW50YSkgZGlhcy4gVWx0cmFwYXNzYWRvIGVzc2UgcHJhem8sIGNhc28gYSBwYXJ0ZSBhdXRvcmEgaW5mb3JtZSBvIGRlc2N1bXByaW1lbnRvIGRhIGRlY2lzw6NvLCBvZmljaWUtc2UgZGlyZXRhbWVudGUgYW8gw7NyZ8OjbyBxdWUgcmVnaXN0cm91IGEgcmVzdHJpw6fDo28ufQogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0NJVEUtU0UgZSBJTlRJTUUtU0V9IGEgcmVjbGFtYWRhIHBhcmEgYXVkacOqbmNpYSBkZSAje2oyLmVudi5QSmVWYXJzLmF1ZGllbmNpYS50aXBvfSBkZXNpZ25hZGEgcGFyYSBvIGRpYSAje2oyLmVudi5QSmVWYXJzLmF1ZGllbmNpYS5kYXRhfSwgY2VydG8gcXVlIHN1YSBhdXPDqm5jaWEgaW1wb3J0YXLDoSBub3MgZWZlaXRvcyBkYSBjb25maXNzw6NvIGUgcmV2ZWxpYSwgY29tIGp1bGdhbWVudG8gaW1lZGlhdG8gZGEgY2F1c2EgKGFydHMuIDIzIGUgMzAgZGEgTGVpIDkuMDk5Lzk1KS4gQWxpbmhhdm8gcXVlLCBxdWFudG8gw6AgcGFydGUgYXV0b3JhLCBvIHNldSBuw6NvIGNvbXBhcmVjaW1lbnRvIHJlZHVuZGFyw6EgZW0gYXJxdWl2YW1lbnRvIHByZW1hdHVybyBkbyBwZWRpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPgogICAgICAgICAgICAgICAgPC9zaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgIDwvaXRlbUNvbnRlbnQ+CiAgICAgICAgPC9pdGVtPiAgICAgICAgICAKICAgICAgICAgICAKICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0iZGVjSXRJbmRlZmVyaW1lbnRvIiBsYWJlbD0iSW5kZWZlcmltZW50byBHZW7DqXJpY28iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0ic2ltcGxlRWxlbWVudHNEZWZzIiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8c2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBDdWlkYS1zZSBkZSBwZWRpZG8gZGUgIzpCe1RVVEVMQSBERSBVUkfDik5DSUF9IGRlIG5hdHVyZXphIGFudGVjaXBhZGEgZm9ybXVsYWRhIHBlbGEgYXV0b3JhIHF1ZSBwcmV0ZW5kZSBfX19fX19fX19fX19fX19fX19fX19fX18uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEZWNpZG8uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBTZWd1bmRvIGEgbm92YSBzaXN0ZW3DoXRpY2EgcHJvY2Vzc3VhbCwgYSB0dXRlbGEgcHJvdmlzw7NyaWEgcG9kZSBzZSBmdW5kYW1lbnRhciBlbSB1cmfDqm5jaWEgb3UgZW0gZXZpZMOqbmNpYS4gUG9kZSB0ZXIgbmF0dXJlemEgY2F1dGVsYXIgb3Ugc2F0aXNmYXRpdmEsIGEgcXVhbCBwb2RlIHNlciBjb25jZWRpZGEgZW0gY2Fyw6F0ZXIgYW50ZWNlZGVudGUgb3UgaW5jaWRlbnRhbCAoYXJ0LiAyOTQsIENQQykuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBQZWxvIHJlZ2ltZSBnZXJhbCBkYXMgdHV0ZWxhcyBkZSB1cmfDqm5jaWEsIHJlc3RhcmFtIHVuaWZpY2Fkb3Mgb3MgcHJlc3N1cG9zdG9zIGZ1bmRhbWVudGFpcyBwYXJhIGEgc3VhIGNvbmNlc3PDo28gKGFydC4gMzAwLCBDUEMpOiBlbGVtZW50b3MgcXVlIGV2aWRlbmNpZW0gYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gZSBvIHBlcmlnbyBkZSBkYW5vIG91IG8gcmlzY28gYW8gcmVzdWx0YWRvIMO6dGlsIGRvIHByb2Nlc3NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQSBqdXJpc3BydWTDqm5jaWEsIGFkbWl0aW5kbyBvIGNhYmltZW50byBkZSB0dXRlbGEgZGUgdXJnw6puY2lhLCBnZXJvdSBvIGVudW5jaWFkbyBkZSBuLiAyNiwgY29tIG8gc2VndWludGUgdGVvcjogIzpCe+KAnFPDo28gY2Fiw612ZWlzIGEgdHV0ZWxhIGFjYXV0ZWxhdMOzcmlhIGUgYSBhbnRlY2lwYXTDs3JpYSBub3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMsIGVtIGNhcsOhdGVyIGV4Y2VwY2lvbmFs4oCdfS4gKEbDs3J1bSBQZXJtYW5lbnRlIGRlIEp1w616ZXMgQ29vcmRlbmFkb3JlcyBkb3MgSnVpemFkb3MgRXNwZWNpYWlzIEPDrXZlaXMgZSBDcmltaW5haXMgZG8gQnJhc2lsIC0gWFYgRW5jb250cm8gTmFjaW9uYWwgLSBGbG9yaWFuw7Nwb2xpcyAtIFNhbnRhIENhdGFyaW5hKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE5vIGNhc28gZW0gcXVlc3TDo28sICM6Qntuw6NvfSB2aXNsdW1icm8gYSBwcmVzZW7Dp2EgZG9zIHJlcXVpc2l0b3MgYXV0b3JpemFkb3JlcyBkYSBjb25jZXNzw6NvIGRhIHR1dGVsYSBkZSB1cmfDqm5jaWEgZGUgbmF0dXJlemEgYW50ZWNpcGFkYSwgY29uc2lzdGVudGUgbmEgcHJvYmFiaWxpZGFkZSBkbyBkaXJlaXRvIGludm9jYWRvLiAKICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntEZXNzYSBtYW5laXJhLCBOw4NPIENPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBIHJlcXVlcmlkbyBwZWxhIHBhcnRlIHJlY2xhbWFudGUgbmEgaW5pY2lhbC59CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7Q0lURS1TRSBlIElOVElNRS1TRX0gYSByZWNsYW1hZGEgcGFyYSBhdWRpw6puY2lhIGRlICM6QnsjOlV7Q29uY2lsaWHDp8OjbywgSW5zdHJ1w6fDo28gZSBKdWxnYW1lbnRvIGRlc2lnbmFkYX19LCBjZXJ0byBxdWUgc3VhIGF1c8OqbmNpYSBpbXBvcnRhcsOhIG5vcyBlZmVpdG9zIGRhIGNvbmZpc3PDo28gZSByZXZlbGlhLCBjb20ganVsZ2FtZW50byBpbWVkaWF0byBkYSBjYXVzYSAoYXJ0cy4gMjMgZSAzMCBkYSBMZWkgOS4wOTkvOTUpLiBBbGluaGF2byBxdWUsIHF1YW50byDDoCBwYXJ0ZSBhdXRvcmEsIG8gc2V1IG7Do28gY29tcGFyZWNpbWVudG8gcmVkdW5kYXLDoSBlbSBhcnF1aXZhbWVudG8gcHJlbWF0dXJvIGRvIHBlZGlkby4gTm8gbWFuZGFkbyBkZXZlcsOjbyBzZXIgY29uc2lnbmFkYXMgYXMgYWR2ZXJ0w6puY2lhcyBuZWNlc3PDoXJpYXMuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0RGV2VmFsclBhZ29zQ29tcHJhQ2VsdWxhciIgbGFiZWw9IkRldm9sdcOnw6NvIFZhbG9yZXMgUGFnb3MgQ2VsdWxhciIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERpc3BlbnNhZG8gbyBSZWxhdMOzcmlvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0RlY2lkbyBlbSBzZWRlIGRlIGxpbWluYXIgbyBwZWRpZG8gZGUgZGV2b2x1w6fDo28gZGUgdmFsb3JlcyBwYWdvcyBwZWxhIGNvbXByYSBkZSBhcGFyZWxobyBjZWx1bGFyLgogICAgICAgICAgICAgICAgICAgIH08L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFBhcmEgYSBjb25jZXNzw6NvIGRhIHR1dGVsYSBkZSB1cmfDqm5jaWEgw6kgbmVjZXNzw6FyaWEgYSBwcmVzZW7Dp2EgZG9zIHJlcXVpc2l0b3MgbGVnYWlzLCBtYXRlcmlhbGl6YWRvcyBuYSBwcm9iYWJpbGlkYWRlIGRvIGRpcmVpdG8gZSBvIHBlcmlnbyBkZSBkYW5vIG91IG8gcmlzY28gYW8gcmVzdWx0YWRvIMO6dGlsIGRvIHByb2Nlc3NvIChhcnRpZ28gMzAwIGRvIE5vdm8gQ8OzZGlnbyBkZSBQcm9jZXNzbyBDaXZpbCkuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBIGp1cmlzcHJ1ZMOqbmNpYSwgYWRtaXRpbmRvIG8gY2FiaW1lbnRvIGRlIHR1dGVsYSBkZSB1cmfDqm5jaWEsIGdlcm91IG8gZW51bmNpYWRvIGRlIG4uIDI2LCBjb20gbyBzZWd1aW50ZSB0ZW9yOiAjOkJ74oCcU8OjbyBjYWLDrXZlaXMgYSB0dXRlbGEgYWNhdXRlbGF0w7NyaWEgZSBhIGFudGVjaXBhdMOzcmlhIG5vcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcywgZW0gY2Fyw6F0ZXIgZXhjZXBjaW9uYWzigJ19LiAoRsOzcnVtIFBlcm1hbmVudGUgZGUgSnXDrXplcyBDb29yZGVuYWRvcmVzIGRvcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcyBlIENyaW1pbmFpcyBkbyBCcmFzaWwgLSBYViBFbmNvbnRybyBOYWNpb25hbCAtIEZsb3JpYW7Ds3BvbGlzIC0gU2FudGEgQ2F0YXJpbmEpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgUGFyYSBhIGNvbmNlc3PDo28gZGEgdHV0ZWxhIGRlIHVyZ8OqbmNpYSBwbGVpdGVhZGEgcGVsbyBhdXRvciwgw6kgbmVjZXNzw6FyaWEgYSBjb25ncnXDqm5jaWEgZGUgZG9pcyByZXF1aXNpdG9zIGLDoXNpY29zLCBxdWFpcyBzZWphbSwgbyBmdW11cyBib25pIGl1cmlzLCBvdSBhcGFyw6puY2lhIGRhcyBhbGVnYcOnw7VlcywgZSBvIHBlcmljdWx1bSBpbiBtb3JhLCBvdSBwZXJpZ28gZGUgZGFubyBncmF2ZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIE1hcywgZGEgYW7DoWxpc2UgZG9zIGZhdG9zIG5hcnJhZG9zIGUgZGEgZG9jdW1lbnRhw6fDo28gYW5leGFkYSwgdmVyaWZpY28gcXVlIG7Do28gaMOhIHBvc3NpYmlsaWRhZGUgZGUgY29uY2Vzc8OjbyBkYSB0dXRlbGEgb3JhIHBsZWl0ZWFkYSBuZXN0YSBmYXNlIGRlIGNvZ25pw6fDo28gc3Vtw6FyaWEuIEluaWNpYWxtZW50ZSBuw6NvIGjDoSBub3MgYXV0b3MgcHJvdmEgY2FiYWwgcXVlIFhYVGV4dG9MaXZyZVhYLCBzZW5kbyBuZWNlc3PDoXJpYSBhIGluc3RydcOnw6NvIHByb2JhdMOzcmlhIHBhcmEgdmVyaWZpY2FyIG9zIGZhdG9zLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgT3V0cm9zc2ltLCBuw6NvIHJlc3RvdSBkZW1vbnN0cmFkbyBvIHBlcmlnbyBkYSBkZW1vcmEgZW0gY2FzbyBkYSBuw6NvIGRldm9sdcOnw6NvIGltZWRpYXRhIGRvcyB2YWxvcmVzIHBhZ29zLCBlaXMgcXVlIGEgcsOpIG7Do28gw6kgaW5zb2x2ZW50ZSBlIGV2ZW50dWFsIGNvbmRlbmHDp8OjbyBwZWN1bmnDoXJpYSBhbyBmaW5hbCBkYSBpbnN0cnXDp8OjbyBkZW1vbnN0cmEtc2Ugc3VmaWNpZW50ZSBwYXJhIHNhdGlzZmF6ZXIgbyBhbGVnYWRvIHByZWp1w616bywgZGVzdGUgbW9kbywgZW50ZW5kbyBxdWUgYSByZWNsYW1hbnRlIHBvZGUgYWd1YXJkYXIgYSBzb2x1w6fDo28gZGEgZGVtYW5kYS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntEbyBleHBvc3RvLCBhdXNlbnRlcyBvcyByZXF1aXNpdG9zIGRvIGFydC4gMzAwIGRvIENQQywgaW5kZWZpcm8gbyBwZWRpZG8gbGltaW5hci59CiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICAjOkJ7Q0lURS1TRSBlIElOVElNRS1TRX0gYSByZWNsYW1hZGEgcGFyYSBhdWRpw6puY2lhIGRlICN7ajIuZW52LlBKZVZhcnMuYXVkaWVuY2lhLnRpcG99IGRlc2lnbmFkYSBwYXJhIG8gZGlhICN7ajIuZW52LlBKZVZhcnMuYXVkaWVuY2lhLmRhdGF9LCBjZXJ0byBxdWUgc3VhIGF1c8OqbmNpYSBpbXBvcnRhcsOhIG5vcyBlZmVpdG9zIGRhIGNvbmZpc3PDo28gZSByZXZlbGlhLCBjb20ganVsZ2FtZW50byBpbWVkaWF0byBkYSBjYXVzYSAoYXJ0cy4gMjMgZSAzMCBkYSBMZWkgOS4wOTkvOTUpLiBBbGluaGF2byBxdWUsIHF1YW50byDDoCBwYXJ0ZSBhdXRvcmEsIG8gc2V1IG7Do28gY29tcGFyZWNpbWVudG8gcmVkdW5kYXLDoSBlbSBhcnF1aXZhbWVudG8gcHJlbWF0dXJvIGRvIHBlZGlkby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEludGltZW0tc2UgYXMgcGFydGVzIGRlc3RhIGRlY2lzw6NvLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+CiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+ICAgICAgICAgICAKICAgICAgICA8aXRlbSBpZD0iZGVjSXRSZWN1cnNvUmVjZWJpbWVudG9KdXN0R3JhdCIgbGFiZWw9IlJlY2ViaW1lbnRvIHwgSnVzdGnDp2EgR3JhdHVpdGEiIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0ic2ltcGxlRWxlbWVudHNEZWZzIiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8c2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBEZWZpcm8gbyBwZWRpZG8gZGUgYXNzaXN0w6puY2lhIGdyYXR1aXRhIGZvcm11bGFkbyBwZWxhIHBhcnRlIHJlY29ycmVudGUuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBSZWNlYm8gbyByZWN1cnNvIG5vcyBlZmVpdG9zIGRldm9sdXRpdm8gZSBzdXNwZW5zaXZvLCBjb25mb3JtZSBhcnQuIDQzIGRhIExlaSA5LjA5OS85NS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEludGltZS1zZSBhKHMpIHBhcnRlKHMpIHJlY29ycmlkYShzKSwgcGFyYSBhcHJlc2VudGFyKGVtKSBjb250cmFycmF6w7VlcywgYXRyYXbDqXMgZGUgYWR2b2dhZG8sIG5vIHByYXpvIGRlIDEwIChkZXopIGRpYXMsIGFww7NzIHN1YmFtIG9zIGF1dG9zIMOgIEVnLiBUdXJtYSBSZWN1cnNhbCBjb20gYXMgZGV2aWRhcyBob21lbmFnZW5zLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ3VtcHJhLXNlLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0UmVjdXJzb1JlY2ViaW1lbnRvIiBsYWJlbD0iUmVjZWJpbWVudG8iIGRhdGFQbHVzPSIiPgogICAgICAgICAgICA8aXRlbUNvbnRlbnQgdHlwZT0ic2ltcGxlRWxlbWVudHNEZWZzIiBhZGR0Q2xhc3NTdHlsZXM9IiI+CiAgICAgICAgICAgICAgICA8c2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBSZWNlYm8gbyByZWN1cnNvIGFwZW5hcyBubyBlZmVpdG8gZGV2b2x1dGl2bywgY29uZm9ybWUgYXJ0LiA0MyBkYSBMZWkgOS4wOTkvOTUuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWUtc2UgYShzKSBwYXJ0ZShzKSByZWNvcnJpZGEocyksIHBhcmEgYXByZXNlbnRhcihlbSkgY29udHJhcnJhesO1ZXMsIGF0cmF2w6lzIGRlIGFkdm9nYWRvLCBubyBwcmF6byBkZSAxMCAoZGV6KSBkaWFzLCBhcMOzcyBzdWJhbSBvcyBhdXRvcyDDoCBFZy4gVHVybWEgUmVjdXJzYWwgY29tIGFzIGRldmlkYXMgaG9tZW5hZ2Vucy4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEN1bXByYS1zZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0UmVjdXJzb1JlY2ViaW1lbnRvU3VzcGVuc2FvIiBsYWJlbD0iUmVjZWJpbWVudG8gfCBTdXNwZW5zaXZvIGUgRGV2b2x1dGl2byIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFJlY2VibyBvIHJlY3Vyc28gbm9zIHNldXMgZWZlaXRvcyBkZXZvbHV0aXZvIGUgc3VzcGVuc2l2bywgY29uZm9ybWUgYXJ0LiA0MyBkYSBMZWkgOS4wOTkvOTUuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWUtc2UgYShzKSBwYXJ0ZShzKSByZWNvcnJpZGEocyksIHBhcmEgYXByZXNlbnRhcihlbSkgY29udHJhcnJhesO1ZXMsIGF0cmF2w6lzIGRlIGFkdm9nYWRvLCBubyBwcmF6byBkZSAxMCAoZGV6KSBkaWFzLCBhcMOzcyBzdWJhbSBvcyBhdXRvcyDDoCBFZy4gVHVybWEgUmVjdXJzYWwgY29tIGFzIGRldmlkYXMgaG9tZW5hZ2Vucy4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIEN1bXByYS1zZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3NpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgPC9pdGVtQ29udGVudD4KICAgICAgICA8L2l0ZW0+CiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0UmVjdXJzb1JlY2ViaW1lbnRvU3ViaXIiIGxhYmVsPSJSZWNlYmltZW50byB8IEp1c3Rpw6dhIEdyYXR1aXRhIHwgUmVtZXRlciBUUiIgZGF0YVBsdXM9IiI+CiAgICAgICAgICAgIDxpdGVtQ29udGVudCB0eXBlPSJzaW1wbGVFbGVtZW50c0RlZnMiIGFkZHRDbGFzc1N0eWxlcz0iIj4KICAgICAgICAgICAgICAgIDxzaW1wbGVFbGVtZW50c0RlZnM+CiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERlZmlybyBvIHBlZGlkbyBkZSBhc3Npc3TDqm5jaWEgZ3JhdHVpdGEgZm9ybXVsYWRvIHBlbGEgcGFydGUgcmVjb3JyZW50ZS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFJlY2VibyBvIHJlY3Vyc28gYXBlbmFzIG5vIGVmZWl0byBkZXZvbHV0aXZvLCBjb25mb3JtZSBhcnQuIDQzIGRhIExlaSA5LjA5OS85NS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnNpZGVyYW5kbyBxdWUgYShzKSBwYXJ0ZShzKSByZWNvcnJpZGEocykgasOhIGFwcmVzZW50b3UoYXJhbSkgY29udHJhcnJhesO1ZXMsIHN1YmFtIG9zIGF1dG9zIMOgIEVnLiBUdXJtYSBSZWN1cnNhbCBjb20gYXMgZGV2aWRhcyBob21lbmFnZW5zLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ3VtcHJhLXNlLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgICAgCiAgICAgICAgPGl0ZW0gaWQ9ImRlY0l0VGVsZWZvbmVpYUluZGVmZXJpbWVudG8iIGxhYmVsPSJUZWxlZm9uZSBpbmRlZmVyaW1lbnRvIiBkYXRhUGx1cz0iIj4KICAgICAgICAgICAgPGl0ZW1Db250ZW50IHR5cGU9InNpbXBsZUVsZW1lbnRzRGVmcyIgYWRkdENsYXNzU3R5bGVzPSIiPgogICAgICAgICAgICAgICAgPHNpbXBsZUVsZW1lbnRzRGVmcz4KICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgQ3VpZGEtc2UgZGUgcGVkaWRvIGRlICM6QntUVVRFTEEgREUgVVJHw4pOQ0lBfSBkZSBuYXR1cmV6YSBhbnRlY2lwYWRhIG5vIHF1YWwgYSBhdXRvcmEgcHJldGVuZGUgbyBkZXNibG9xdWVpbyBkbyBuw7ptZXJvIGRlIGNlbHVsYXIsIHNvYiBmdW5kYW1lbnRvIGRlIHRlciBzaWRvIGJsb3F1ZWFkbyBpbmRldmlkYW1lbnRlIHBlbGEgcmVjbGFtYWRhIGUgdHJhbnNmZXJpZG8gcGFyYSB0ZXJjZWlyby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIERlY2lkby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFNlZ3VuZG8gYSBub3ZhIHNpc3RlbcOhdGljYSBwcm9jZXNzdWFsLCBhIHR1dGVsYSBwcm92aXPDs3JpYSBwb2RlIHNlIGZ1bmRhbWVudGFyIGVtIHVyZ8OqbmNpYSBvdSBlbSBldmlkw6puY2lhLiBQb2RlIHRlciBuYXR1cmV6YSBjYXV0ZWxhciBvdSBzYXRpc2ZhdGl2YSwgYSBxdWFsIHBvZGUgc2VyIGNvbmNlZGlkYSBlbSBjYXLDoXRlciBhbnRlY2VkZW50ZSBvdSBpbmNpZGVudGFsIChhcnQuIDI5NCwgQ1BDKS4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgIFBlbG8gcmVnaW1lIGdlcmFsIGRhcyB0dXRlbGFzIGRlIHVyZ8OqbmNpYSwgcmVzdGFyYW0gdW5pZmljYWRvcyBvcyBwcmVzc3Vwb3N0b3MgZnVuZGFtZW50YWlzIHBhcmEgYSBzdWEgY29uY2Vzc8OjbyAoYXJ0LiAzMDAsIENQQyk6IGVsZW1lbnRvcyBxdWUgZXZpZGVuY2llbSBhIHByb2JhYmlsaWRhZGUgZG8gZGlyZWl0byBlIG8gcGVyaWdvIGRlIGRhbm8gb3UgbyByaXNjbyBhbyByZXN1bHRhZG8gw7p0aWwgZG8gcHJvY2Vzc28uCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBBIGp1cmlzcHJ1ZMOqbmNpYSwgYWRtaXRpbmRvIG8gY2FiaW1lbnRvIGRlIHR1dGVsYSBkZSB1cmfDqm5jaWEsIGdlcm91IG8gZW51bmNpYWRvIGRlIG4uIDI2LCBjb20gbyBzZWd1aW50ZSB0ZW9yOiAjOkJ74oCcU8OjbyBjYWLDrXZlaXMgYSB0dXRlbGEgYWNhdXRlbGF0w7NyaWEgZSBhIGFudGVjaXBhdMOzcmlhIG5vcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcywgZW0gY2Fyw6F0ZXIgZXhjZXBjaW9uYWzigJ19LiAoRsOzcnVtIFBlcm1hbmVudGUgZGUgSnXDrXplcyBDb29yZGVuYWRvcmVzIGRvcyBKdWl6YWRvcyBFc3BlY2lhaXMgQ8OtdmVpcyBlIENyaW1pbmFpcyBkbyBCcmFzaWwgLSBYViBFbmNvbnRybyBOYWNpb25hbCAtIEZsb3JpYW7Ds3BvbGlzIC0gU2FudGEgQ2F0YXJpbmEpLgogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgTm8gY2FzbyBlbSBxdWVzdMOjbywgIzpCeyM6SXtuw6NvfX0gdmlzbHVtYnJvIGEgcHJlc2Vuw6dhIGRlIHVtIGRvcyByZXF1aXNpdG9zIGF1dG9yaXphZG9yZXMgZGEgY29uY2Vzc8OjbyBkYSB0dXRlbGEgZGUgdXJnw6puY2lhIGRlIG5hdHVyZXphIGFudGVjaXBhZGEsIGNvbnNpc3RlbnRlIG5hIHByb2JhYmlsaWRhZGUgZG8gZGlyZWl0byBpbnZvY2Fkby4gSXNzbyBwb3JxdWUsIGFwZXNhciBkYSBwYXJ0ZSByZWNsYW1hbnRlIHRlciBhbGVnYWRvIHNlciB1c3XDoXJpYSBkbyBuw7ptZXJvIHRlbGVmw7RuaWNvIGjDoSBhbm9zLCAjOkl7bsOjbyBqdW50b3UgYW9zIGF1dG9zIG5lbmh1bWEgcHJvdmEgcXVlIGVtYmFzYXNzZSBzdWFzIGFmaXJtYcOnw7VlcywgcmVzc2FsdGFuZG8gcXVlIGZvaSBqdW50YWRvIGFwZW5hcyB1bWEgY29udGEgdGVsZWbDtG5pY2Egbm8gbm9tZSBkZSB0ZXJjZWlybyAoWFhYUmVmZXJlbmNpYURvY3VtZW50b1hYWCksIGRlaXhhbmRvIGEgYXV0b3JhIGRlIGRlbW9uc3RyYXIgYSBleGlzdMOqbmNpYSBkZSBmYXR1cmFzIGFudGVyaW9yZXMgZW0gc2V1IG5vbWUsIGRlIGZvcm1hIGEgaW5kaWNhciBhIHZlcm9zc2ltaWxoYW7Dp2EgZG8gYWxlZ2Fkb30uIAogICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudG8+IAoKICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudG8gdGFnPSJwIiBzY29wZT0iTk9ORSIgY2xhc3M9InAgRm50TW9kRGVmYXVsdCBJbmRudDNjbSBtYXJnaW5BdG9KdWRpY2lhbCIgPiAKICAgICAgICAgICAgICAgICAgICAgICAgIzpCe0Rlc3NhIG1hbmVpcmEsICM6SXtOw4NPIENPTkNFRE8gQSBUVVRFTEEgREUgVVJHw4pOQ0lBfSByZXF1ZXJpZG8gcGVsYSBwYXJ0ZSByZWNsYW1hbnRlIG5hIGluaWNpYWwuIH0KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKCiAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnRvIHRhZz0icCIgc2NvcGU9Ik5PTkUiIGNsYXNzPSJwIEZudE1vZERlZmF1bHQgSW5kbnQzY20gbWFyZ2luQXRvSnVkaWNpYWwiID4gCiAgICAgICAgICAgICAgICAgICAgICAgICM6QntDSVRFLVNFIGUgSU5USU1FLVNFfSBhIHJlY2xhbWFkYSBwYXJhIGF1ZGnDqm5jaWEgIzpCeyM6SXtkZSAje2oyLmVudi5QSmVWYXJzLmF1ZGllbmNpYS50aXBvfSBkZXNpZ25hZGEgcGFyYSBvIGRpYSAje2oyLmVudi5QSmVWYXJzLmF1ZGllbmNpYS5kYXRhfX19LCBjZXJ0byBxdWUgc3VhIGF1c8OqbmNpYSBpbXBvcnRhcsOhIG5vcyBlZmVpdG9zIGRhIGNvbmZpc3PDo28gZSByZXZlbGlhLCBjb20ganVsZ2FtZW50byBpbWVkaWF0byBkYSBjYXVzYSAoYXJ0cy4gMjMgZSAzMCBkYSBMZWkgOS4wOTkvOTUpLiBBbGluaGF2byBxdWUsIHF1YW50byDDoCBwYXJ0ZSBhdXRvcmEsIG8gc2V1IG7Do28gY29tcGFyZWNpbWVudG8gcmVkdW5kYXLDoSBlbSBhcnF1aXZhbWVudG8gcHJlbWF0dXJvIGRvIHBlZGlkby4gTm8gbWFuZGFkbyBkZXZlcsOjbyBzZXIgY29uc2lnbmFkYXMgYXMgYWR2ZXJ0w6puY2lhcyBuZWNlc3PDoXJpYXMuCiAgICAgICAgICAgICAgICAgICAgPC9lbGVtZW50bz4gCgogICAgICAgICAgICAgICAgICAgIDxlbGVtZW50byB0YWc9InAiIHNjb3BlPSJOT05FIiBjbGFzcz0icCBGbnRNb2REZWZhdWx0IEluZG50M2NtIG1hcmdpbkF0b0p1ZGljaWFsIiA+IAogICAgICAgICAgICAgICAgICAgICAgICBJbnRpbWVtLXNlIGFzIHBhcnRlcyBkZXN0YSBkZWNpc8Ojby4KICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnRvPiAKICAgICAgICAgICAgICAgIDwvc2ltcGxlRWxlbWVudHNEZWZzPgogICAgICAgICAgICA8L2l0ZW1Db250ZW50PgogICAgICAgIDwvaXRlbT4gICAgICAgICAgICAgICAgCiAgICA8L2l0ZW1zPgogIDwvc2VsZWN0b3JEZWY+CjwvRGVmaW5pdGlvbnM+Cg=="
};