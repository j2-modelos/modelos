window.j2.res.mod.atoOrdinatorioSelSrc.xmlEncode = {      
  load : "<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<Definitions xmlns="http://j2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SeleectorsItemsDefinitions" targetNamespace="http://j2" xsi:schemaLocation="http://j2 ../XML/j2.xsd">
  <selectorDef id="selectorBlocoAssinaturas" grouped="false">
    <eventFire event="signatario.onChange"/>
    <itemFormats>
      <elemento tag="p" class="p FntMod Indnt1cm" scope="NONE">
         #{textContent}
      </elemento>
    </itemFormats>
    <groupsDefs>
        <group label="[Selecione]">
            <gItem id="atoOrdItGenerico"/>
        </group>
    
        <group label="Alvará Judicial">
            <!--<gItem id="atoOrdMigracaoPROJUDI"/>-->
            <gItem id="atoOrdPortaria14232020PartePrestarDadosBancarios"/>
            <gItem id="atoOrdPortaria14232020AdvogadoPrestarDadosBancarios"/>
            <!--<gItem id="atoOrdPortaria14232020"/>-->
            <gItem id="atoOrdPortaria14232020JuntarProcuracao"/>
            <gItem id="atoOrdPortaria142320202"/>
        </group>  
            
        <group label="Audiência">
            <gItem id="atoOrdItCancelamentoAudiencia"/>
            <gItem id="atoOrdItCancelamentoAudienciaTempoHabil"/>
            <gItem id="atoOrdItDesignacaoAudiencia"/>
            <gItem id="atoOrdItRedesignacaoAudiencia"/>
            <gItem id="atoOrdItRedesignacaoAudienciaInviabilidadeVideoConferencia"/>
            <gItem id="atoOrdItRedesignacaoAudienciaSemRetornoAR"/>
            <gItem id="atoOrdAudienciaVideoConferencia"/>
            <gItem id="atoOrdAudienciaVideoConferencia2"/>
        </group>
        <group label="Carta Precatória">
            <gItem id="atoOrdItPrecatoriaCumprimento"/>
            <gItem id="atoOrdItDevolvPrec"/>
            <gItem id="atoOrdItPrecatoriaJuntarCertificarArquivar"/>
            <gItem id="atoOrdItTomarCienciaRetPrecatoria"/>
            <gItem id="atoOrdItRespondDepecante"/>
            <gItem id="atoOrdItSolicitarDevolucao"/>
        </group>
        <group label="Central Mandados">
            <gItem id="atoOrdItDevMandAirton"/>
            <gItem id="atoOrdItDevMandLudugero"/>
        </group>
        
        <group label="Cumprimentos #{j2.env.PJeVars.processo.polos.parteAtiva}">
            <gItem id="atoOrdItApresentEndParteAtiva"/>
            <gItem id="atoOrdItJuntComprovEnd"/>
            <gItem id="atoOrdItPgtoOnerosoAdvogado"/>
            <gItem id="atoOrdItPgtoOnerosoParte"/>
        </group>
        
        <group label="Manifestações">
            <gItem id="atoOrdItTomarCiencDiligFrust"/>
            <gItem id="atoOrdItManifestarSeAtiva"/>
            <gItem id="atoOrdItManifestarSeAtivaEmbDecl"/>
            <gItem id="atoOrdItManifestarSePassiva"/>
            <gItem id="atoOrdItManifestarSePassivaEmbDecl"/>
            <gItem id="atoOrdItManifHabilitSucessores"/>
            <gItem id="atoOrdItManifDepositoVoluntario"/>
        </group>
        
        <group label="Secretaria">
            <gItem id="atoOrdItArquivar"/>
            <gItem id="atoOrdItEncaminharContadoria"/>
            <gItem id="atoOrdItReiterarCitação"/>
            <gItem id="atoOrdItReiterarIntimacaoARNegativo"/>
            <gItem id="atoOrdItReiterarIntimacaoMandadoNegativo"/>
            <gItem id="atoOrdItIntimarParaPericiaIML"/>
            <gItem id="atoOrdItIntimarParaPericiaIMLPoloPassivo"/>
        </group>
        
        <group label="Outros Atos">
            <gItem id="atoOrdItRetTRROED"/>    
        </group>
        
        <!--group label="Ad Hoc">
            <gItem id="atoOrdItRedesigCopa"/>
        </group-->
    </groupsDefs>
    <items>
                <item id="atoOrdAudienciaVideoConferencia" label="Intimar Audiência por vídeo conferência (Sala 1)" dataPlus="{ 'descricaoAppend': 'Intimar da audiência por vídeo conferência' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{CIENTIFICAR} as partes de que a #:B{audiência} designada nos autos  para o dia 
                        #:U{#:B{#{j2.env.PJeVars.audiencia.data}}},  será realizada #:B{por meio de videoconferência}, 
                        nos moldes em que prevê a Lei 13.994/2020, que alterou os arts. 22 e 23 da lei 9.099/99;

                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{INTIMAR} as partes de que #:B{na data e hora agendada} para a audiência devem, por 
                        meio da internet, devem:
                    </elemento>
                    
                    <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                #:B{acessar o link} #:U{https://vc.tjma.jus.br/2jecitz} (preferencialmente por meio do navegador Google Chrome), 
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                digitar no campo “login” o nome do participante, 
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                inserir a #:B{senha} tjma1234, 
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                ao visualizar a pergunta “como você gostaria de se juntar ao áudio” clicar no ícone  do microfone e disponibilizar acesso à câmera 
                                do dispositivo que estiver utilizando (computador, notebook, tablet ou celular);
                            </elemento>
                        </elemento>
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>  
        
        <item id="atoOrdAudienciaVideoConferencia2" label="Intimar Audiência por vídeo conferência (Sala 2)" dataPlus="{ 'descricaoAppend': 'Intimar da audiência por vídeo conferência' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{CIENTIFICAR} as partes de que a #:B{audiência} designada nos autos  para o dia 
                        #:U{#:B{#{j2.env.PJeVars.audiencia.data}}},  será realizada #:B{por meio de videoconferência}, 
                        nos moldes em que prevê a Lei 13.994/2020, que alterou os arts. 22 e 23 da lei 9.099/99;

                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{INTIMAR} as partes de que #:B{na data e hora agendada} para a audiência devem, por 
                        meio da internet, devem:
                    </elemento>
                    
                    <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                #:B{acessar o link} #:U{https://vc.tjma.jus.br/2jecitz2} (preferencialmente por meio do navegador Google Chrome), 
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                digitar no campo “login” o nome do participante, 
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                inserir a #:B{senha} tjma1234, 
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                ao visualizar a pergunta “como você gostaria de se juntar ao áudio” clicar no ícone  do microfone e disponibilizar acesso à câmera 
                                do dispositivo que estiver utilizando (computador, notebook, tablet ou celular);
                            </elemento>
                        </elemento>
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>  
        
        <item id="atoOrdPortaria14232020PartePrestarDadosBancarios" label="Portaria-TJ 14232020 | Parte Informar dados bancários" dataPlus="{ 'descricaoAppend': 'Parte prestar dados bancários' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    INTIMAÇÃO do(a) #:B{parte #{j2.env.PJeVars.processo.polos.parteAtiva}} para, no prazo de 5(cinco) dias, informar nos autos os #:B{dados bancários necessários} 
                    (banco, agência, conta e CPF do titular da conta) para que seja efetivado o #:B{crédito do alvará} na conta em questão;
                </data>
            </itemContent>
        </item>  
        
        <item id="atoOrdPortaria14232020AdvogadoPrestarDadosBancarios" label="Portaria-TJ 14232020 | Advogado Informar dados bancários" dataPlus="{ 'descricaoAppend': 'Advogado prestar dados bancários' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    INTIMAÇÃO do(a) #:b{advogado(a)} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para, no prazo de 5(cinco) dias, informar nos 
                    autos os #:b{dados bancários necessários} (banco, agência, conta e CPF do titular da conta) para que seja 
                    efetivado o #:b{crédito do alvará} de sucumbência(e/ou contratual) na conta em questão;
                </data>
            </itemContent>
        </item>  
        
        <item id="atoOrdPortaria14232020" label="Tomar ciência da Portaria-TJ 14232020" dataPlus="{ 'descricaoAppend': 'Tomar ciência Portaria-TJ 14232020' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO do(s) credor(es)} para tomar(em) ciência do inteiro teor da #:B{Portaria TJ 14232020} (validação 41625D91B2), em anexo, que 
                    regulamenta a forma de recebimento do crédito referente ao(s) alvará(s) que será(ão) expedido(s) no 2º JEC 
                    de Imperatriz no período em que perdurar a prorrogação, pelo TJMA e CGJ, da suspensão de atendimento presencial 
                    de partes e advogados, conforme Portaria Conjunta 142020 (validação 84E344DA0F).
                </data>
            </itemContent>
        </item>  
        
        <item id="atoOrdPortaria142320202" label="Tomar ciência da Portaria-TJ 14232020" dataPlus="{ 'descricaoAppend': 'Tomar ciência Portaria-TJ 14232020' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{INTIMAÇÃO do(s) credor(es)} para tomar(em) ciência do inteiro teor da #:B{Portaria TJ 14232020} (validação 41625D91B2), em anexo, que 
                        regulamenta a forma de recebimento do crédito referente ao(s) alvará(s) que será(ão) expedido(s) no 2º JEC 
                        de Imperatriz no período em que perdurar a prorrogação, pelo TJMA e CGJ, da suspensão de atendimento presencial 
                        de partes e advogados, conforme Portaria Conjunta 142020 (validação 84E344DA0F).
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt15mm " >
                        <elemento tag="img" scope="NONE">
                            <HTMLAttribute name="src" value="data:image/png;base64,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"/>
                            <HTMLAttribute name="style" value="vertical-align: bottom; height: 12px; margin-right: 2px;"/>
                        </elemento>
                        <elemento tag="span" scope="NONE"> #:b{Anexos}</elemento>
                    </elemento>
                    <elemento tag="ul" scope="NONE" class="p FntModDefault AttachementUL" >
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                <elemento tag="span" scope="NONE" id="potariaSpan">
                                    <HTMLAttribute name="title" value="Abrir Portaria TJ 14232020"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/w40dsh70bymyoik/Portaria%2014232020%20-%20expedi%C3%A7%C3%A3o%20de%20alvar%C3%A1%20durante%20suspens%C3%A3o%20de%20atendimento%20-%20COVID-19.pdf?raw=1', 'popPortaria', 'width=780, height=740, scrollbars=yes').focus();"/>
                                    <HTMLAttribute name="style" value="cursor: pointer;"/>
                                    <elemento tag="u" scope="NONE">
                                        Portaria TJ 14232020
                                        <elemento tag="img" scope="NONE" id="potariaSpan.view">
                                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                            <HTMLAttribute name="style" value="vertical-align: bottom; height: 12px;"/>
                                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/w40dsh70bymyoik/Portaria%2014232020%20-%20expedi%C3%A7%C3%A3o%20de%20alvar%C3%A1%20durante%20suspens%C3%A3o%20de%20atendimento%20-%20COVID-19.pdf?raw=1', 'popPortaria', 'width=780, height=740, scrollbars=yes').focus();"/>
                                        </elemento>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="li" scope="NONE">
                            <elemento tag="p" scope="NONE" class="p FntModDefault " >
                                <elemento tag="span" scope="NONE" id="potariaSpan2">
                                    <HTMLAttribute name="title" value="Abrir Portaria Conjunta 14/2020"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/1ou8ugxoxr3carp/PORTARIA-CONJUNTA%20-%20142020%20-%20Suspens%C3%A3o%20COVID-19%29.pdf?raw=1', 'popPortaria2', 'width=780, height=740, scrollbars=yes').focus();"/>
                                    <HTMLAttribute name="style" value="cursor: pointer;"/>
                                    <elemento tag="u" scope="NONE">
                                        Portaria Conjunta 14/2020
                                        <elemento tag="img" scope="NONE" id="potariaSpan.view2">
                                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                            <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/1ou8ugxoxr3carp/PORTARIA-CONJUNTA%20-%20142020%20-%20Suspens%C3%A3o%20COVID-19%29.pdf?raw=1', 'popPortaria2', 'width=780, height=740, scrollbars=yes').focus();"/>
                                        </elemento>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>  
        
        <item id="atoOrdPortaria14232020JuntarProcuracao" label="Juntar Procuração Portaria-TJ 14232020" dataPlus="{ 'descricaoAppend': 'Juntar Procuração' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO do(a) advogado(a) da parte #{j2.env.PJeVars.processo.polos.parteAtiva}} para,
                    no prao de 5 dias, apresentar #:B{procuração com poderes para "receber e dar quitação"}, nos termos do Código de Normas e
                    da #:B{Portaria TJ 14232020} (validação 41625D91B2), em anexo, #:B{OU} para, no prazo de #:B{5 dias}, informar nos autos os
                    #:B{dados bancários necessários de titularidade da parte #{j2.env.PJeVars.processo.polos.parteAtiva}}
                    (banco, agência, conta e CPF do titular da conta) para que seja efetivado o #:B{crédito do alvará} na conta em questão.
                </data>
            </itemContent>
        </item>  
        
        
        <item id="atoOrdMigracaoPROJUDI" label="Migração PROJUDI" dataPlus="{ 'descricaoAppend': 'Ciência Migração PROJUDI' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                  Em consonância ao disposto na Portaria Conjunta nº 05/2017, que disciplina sobre a virtualização da 
                  fase de cumprimento de sentença para o sistema Pje - Processo Judicial eletrônico, FICAM POR ESTE INTIMADAS 
                  AS PARTES, por seus respectivos procuradores, para que, no prazo de 05 (cinco) dias, pratiquem os atos 
                  necessários para a regular habilitação no Sistema de Processo Judicial Eletrônico – PJE, bem como para que 
                  se manifestarem sobre eventual irregularidade na migração dos autos digitais, no prazo de 05 (cinco), para 
                  que determine as correções de eventuais equívocos, ilegibilidades ou ausência de documentos e/ou conteúdos 
                  audiovisuais dos autos físicos. Ficando ainda, INTIMADAS de que após a conclusão de procedimento de migração, 
                  o processo passará a tramitar exclusivamente no Sistema Pje - Processo Judicial Eletrônico, com o consequente 
                  arquivamento dos autos no Sistema PROJUDI.
                </data>
            </itemContent>
        </item>  
              
        <item id="atoOrdItEncaminharContadoria" label="Encaminhar Contadoria" dataPlus="{ 'descricaoAppend': 'Encaminhamento' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{ENCAMINHAMENTO} dos autos para contadoria, para fins de conferência, considerando as inconsistências encontradas nos cálculos juntados.
                </data>
            </itemContent>
        </item>        
        <item id="atoOrdItGenerico" label="Genérico" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{XXXXDiligênciaXXXX}, XXXXXXXXXXXX.
                </data>
            </itemContent>
        </item>        
        <item id="atoOrdItReiterarCitação" label="Reiterar Citação" dataPlus="{ 'descricaoAppend': 'Reiteração Citação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REITERAÇÃO} da citação por carta ou mandado em razão do apontamento de novo endereço pela parte #{j2.env.PJeVars.processo.polos.parteAtiva}.
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItReiterarIntimacaoARNegativo" label="Reiterar Intimação | Carta Negativa" dataPlus="{ 'descricaoAppend': 'Reiterar Intimação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REITERAÇÃO} da intimação #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} por #:U{mandado} em razão 
                    do resultado negativa por carta via correios.
                </data>
            </itemContent>
        </item>       
        <item id="atoOrdItReiterarIntimacaoMandadoNegativo" label="Reiterar Intimação | Manado Negativo" dataPlus="{ 'descricaoAppend': 'Reiterar Intimação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REITERAÇÃO} da intimação #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} por #:U{carta} em razão 
                    do resultado negativa do mandado.
                </data>
            </itemContent>
        </item>       
        
                                                                                         
        <item id="atoOrdItIntimarParaPericiaIML" label="Intimar #{j2.env.PJeVars.processo.polos.parteAtiva} da perícia do IML" dataPlus="{ 'descricaoAppend': 'Intimar da perícia do IML' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} sobre o ofício do IML acostado no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, 
                    com informação sobre a perícia agendada, recomendações para o exame e lista de documentos que devem ser entregues pela parte na instituição.
                </data>
            </itemContent>
        </item>                                                                               
        <item id="atoOrdItIntimarParaPericiaIMLPoloPassivo" label="Intimar #{j2.env.PJeVars.processo.polos.partePassiva} da perícia do IML" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.partePassiva} para tomar ciência da designação de perícia junto ao IML.
                </data>
            </itemContent>
        </item> 
        
        <item id="atoOrdItManifestarSeAtiva" label="Manifestar-se #{j2.env.PJeVars.processo.polos.parteAtiva}" dataPlus="{ 'descricaoAppend': 'Manifestar-se #{j2.env.PJeVars.processo.polos.parteAtiva}' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para, no prazo de 15 (quinze) 
                    dias, adotar qualquer das posturas indicadas no art. 436 do CPC acerca do documento #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>                                                                               
        <item id="atoOrdItManifestarSePassiva" label="Manifestar-se #{j2.env.PJeVars.processo.polos.partePassiva}" dataPlus="{ 'descricaoAppend': 'Manifestar-se #{j2.env.PJeVars.processo.polos.partePassiva}' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.partePassiva} para, no prazo de 15 (quinze) 
                    dias adotar qualquer das posturas indicadas no art. 436 do CPC acerca do documento #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>     
        <item id="atoOrdItManifestarSeAtivaEmbDecl" label="Manifestar-se #{j2.env.PJeVars.processo.polos.parteAtiva} | Embargos de Declaração" dataPlus="{ 'descricaoAppend': 'Manifestar-se #{j2.env.PJeVars.processo.polos.parteAtiva} dos Embargos de Declaração' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para, no prazo de 5 (cinco) 
                    dias, manifestar-se acerca dos EMBARGOS DE DECLARAÇÃO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} interpostos pela parte #{j2.env.PJeVars.processo.polos.partePassiva}.
                </data>
            </itemContent>
        </item>                                                                               
        <item id="atoOrdItManifestarSePassivaEmbDecl" label="Manifestar-se #{j2.env.PJeVars.processo.polos.partePassiva} | Embargos de Declaração" dataPlus="{ 'descricaoAppend': 'Manifestar-se #{j2.env.PJeVars.processo.polos.partePassiva} dos Embargos de Declaração' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.partePassiva} para, no prazo de 5 (cinco) 
                    dias, manifestar-se acerca dos EMBARGOS DE DECLARAÇÃO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} interpostos pela parte #{j2.env.PJeVars.processo.polos.parteAtiva}.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItRespondDepecante" label="Responder por ofício Juízo Deprecante" dataPlus="{ 'descricaoAppend': 'Responder Ofício Deprecado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{ENCAMINHAMENTO} de resposta ao Juízo Deprecante por ofício acerca das informações solicitadas no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItSolicitarDevolucao" label="Solicitar Devolução" dataPlus="{ 'descricaoAppend': 'Solicitar Devolução Carta Precatória' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{EXPEDIÇÃO} de ofício ao Juízo Deprecado solicitando a devolução da carta precatória #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}
                    considerando que até a presente data a referida missiva não fora devolvida.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItTomarCienciaRetPrecatoria" label="Tomar ciência retorno carta precatória" dataPlus="{ 'descricaoAppend': 'Tomar ciência retorno de carta precatória' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para tomar ciência do retorno da carta precatória (#:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}).
                </data>
            </itemContent>
        </item>     
             
        <item id="atoOrdItTomarCiencDiligFrust" label="Tomar cidência da diligência/expediente frustrado" dataPlus="{ 'descricaoAppend': 'Tomar ciência diligência/expediente negativo' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para tomar ciência da expediente/diligência negativo(a) #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItDevMandLudugero" label="Solicitar devolução de mandado - Ludugero" dataPlus="{ 'descricaoAppend': 'Solicitação Devolução de Mandado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{SOLICITAÇÃO} ao Oficial de Justiça LUDUGERO PEREIRA DE SÁ NETO para que realize o cumprimento do mandado #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>     
        <item id="atoOrdItDevMandAirton" label="Solicitar devolução de mandado - Aitron" dataPlus="{ 'descricaoAppend': 'Solicitação Devolução de Mandado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{SOLICITAÇÃO} ao Oficial de Justiça AIRTON TAVARES DA SILVA para que realize o cumprimento do mandado #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItRetTRROED" label="Requerer o que entender de direito retorno TR partes " dataPlus="{ 'descricaoAppend': 'Requerer de direito' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} das partes para requererem o que entender de direito no prazo de 15 (quinze) dias, considerando o retorno dos autos da Turma Recursal.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItArquivar" label="Arquivar os autos" dataPlus="{ 'descricaoAppend': 'Arquivar' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{ARQUIVAMENTO} dos presentes autos.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItDevolvPrec" label="Devolver Carta Precatória" dataPlus="{ 'descricaoAppend': 'Devolução Carta Precatória' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{DEVOLUÇÃO} da Carta Precatória ao juízo deprecante, considerando o seu cumpirmento.
                </data>
            </itemContent>
        </item>     
        
        
        
        <item id="atoOrdItApresentEndParteAtiva" label="Intimar apresentar endereço da parte passiva" dataPlus="{ 'descricaoAppend': '#{j2.env.PJeVars.processo.polos.parteAtiva} atualizar endereço #{j2.env.PJeVars.processo.polos.partePassiva}' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para no prazo de #:B{10 (dez) dias} que aponte endereço atual
                    da #{j2.env.PJeVars.processo.polos.partePassiva}, indicando pontos de referência para o local quando possível.
                </data>
            </itemContent>
        </item>     

        <item id="atoOrdItJuntComprovEnd" label="Juntar Comprovante Residencia Atual" dataPlus="{ 'descricaoAppend': '#{j2.env.PJeVars.processo.polos.parteAtiva} juntar comprovante de endereço' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para que junte aos autos comprovante de endereço em seu nome, 
                    atual (dos últimos 3 meses) e legível.
                </data>
            </itemContent>
        </item>     
        
        <item id="atoOrdItCancelamentoAudiencia" label="Cancelar Audiência" dataPlus="{ 'descricaoAppend': 'Cancelamento audiência' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{CANCELAMENTO} da audiência de #{j2.env.PJeVars.audiencia.tipo} designada, considerando #:span@atoOrdItCancelamentoAudiencia-motivo{XXXXtextoLivreXXXX}.
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItCancelamentoAudienciaTempoHabil" label="Cancelar Audiência | Falta Tempo Hábil" dataPlus="{ 'descricaoAppend': 'Cancelamento audiência' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{CANCELAMENTO} da audiência de #{j2.env.PJeVars.audiencia.tipo} designada, considerando a falta de tempo hábil para cumprimento data determinação #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} e/ou citação da #{j2.env.PJeVars.processo.polos.partePassiva} até a data designada.
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItDesignacaoAudiencia" label="Designação de Audiência" dataPlus="{ 'descricaoAppend': 'Designação audiência' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{DESIGNAÇÃO} da audiência de Audiência de Conciliação, Instrução e Julgamento, considerando o impulsionamento do feito promovido pela #{j2.env.PJeVars.processo.polos.parteAtiva}.
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItRedesignacaoAudiencia" label="Redesignação Audiência" dataPlus="{ 'descricaoAppend': 'Redesignação audiência' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REDESIGNAÇÃO} da audiência de #{j2.env.PJeVars.audiencia.tipo} designada, considerando a falta de tempo hábil para citação/intimação da(s) parte(s).
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItRedesignacaoAudienciaInviabilidadeVideoConferencia" label="Redesignação Audiência | Inviabilidade videoconferência" dataPlus="{ 'descricaoAppend': 'Redesignação audiência inviabilidade videoconferência' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REDESIGNAÇÃO} da audiência de #{j2.env.PJeVars.audiencia.tipo} designada, vez que a pauta de audiências da unidade no meses de #:B{maio/2020 a julho/2020} 
                    ocorrerão por meio de #:B{videoconferência} para os processos com #:B{citação positiva} e com #:B{possibilidade de comunicação para as partes} e, no presente 
                    caso, não há possibilidade de intimação da #:B{parte #{j2.env.PJeVars.processo.polos.partePassiva}} sobre sua viabilidade de acesso à videoconferência, 
                    vez que não constituiu advogado e/ou está com unidade fechada em Imperatriz/MA.
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItRedesignacaoAudienciaSemRetornoAR" label="Redesignação Audiência | sem retorno de AR" dataPlus="{ 'descricaoAppend': 'Redesignação audiência sem retorno de AR' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REDESIGNAÇÃO} da audiência de #{j2.env.PJeVars.audiencia.tipo} designada, diante da #:B{ausência de retorno do(s) AR'(s)} 
                    referente(s) à citação e vez que as audiências da unidade nos meses de maio/2020 a julho/2020 ocorrerão por meio de #:B{videoconferência} 
                    para os processos com #:B{citação positiva} e com possibilidade de comunicação para as partes.                
                </data>
            </itemContent>
        </item>   
        <item id="atoOrdItPgtoOnerosoAdvogado" label="Pagar Selo Oneroso - Advodgado" dataPlus="{ 'descricaoAppend': 'Advogado Recolher Custas' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            INTIMAÇÃO do(a) #:B{advogado(a)} da parte #{j2.env.PJeVars.processo.polos.parteAtiva} para, no prazo de 05(cinco) dias, 
                            acostar aos autos o boleto e o comprovante de pagamento do #:B{Selo Judicial Oneroso} que será utilizado no alvará judicial referente aos honorários e/ou destaque do contratual, nos termos da 
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Resolução GP 46/2018"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popResolucaoGP462018', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Resolução GP 462018
                                <elemento tag="img" scope="NONE" id="docSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popOficio', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            e
                        </elemento>    
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Resolução GP 44/2020"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popResolucaoGP442020', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Resolução GP 442020
                                <elemento tag="img" scope="NONE" id="docSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popResolucaoGP442020', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            .
                        </elemento>        
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        <item id="atoOrdItPgtoOnerosoParte" label="Pagar Selo Oneroso - #{j2.env.PJeVars.processo.polos.parteAtiva}" dataPlus="{ 'descricaoAppend': 'Parte Recolher Custas' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            INTIMAÇÃO da #:B{parte #{j2.env.PJeVars.processo.polos.parteAtiva}} para, no prazo de 05 (cinco) dias, acostar aos autos o boleto e o 
                            comprovante de pagamento do #:B{Selo Judicial} Oneroso que será utilizado no alvará judicial, vez que não consta nos autos concessão do benefício da justiça gratuita, nos termos da 
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Resolução GP 46/2018"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popResolucaoGP462018', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Resolução GP 462018
                                <elemento tag="img" scope="NONE" id="docSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popOficio', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            e
                        </elemento>    
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Resolução GP 44/2020"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popResolucaoGP442020', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Resolução GP 442020
                                <elemento tag="img" scope="NONE" id="docSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/9mli0zvrlajvop5/Resolu%C3%A7%C3%A3o%20GP%20462018%20-%20regulamenta%20uso%20de%20selo%20oneroso.pdf?raw=1', 'popResolucaoGP442020', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            .
                        </elemento>         
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        <item id="atoOrdItRedesigCopa" label="Redesignação COPA" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{REDESIGNAÇÃO} DA AUDIÊNCIA AGENDADA INICIALMENTE PARA  #{j2.env.PJeVars.audiencia.data}, em face da classificação do Brasil para a próxima fase de Copa do Mundo/2018, cujo jogo será no turmo matutino de tal data e não haverá expediente forense, conforme Resolução GP 33/2018.
                </data>
            </itemContent>
        </item>              
        <item id="atoOrdItPrecatoriaCumprimento" label="Cumprimento Finliadade" dataPlus="{ 'descricaoAppend': 'Cumprimiento Carta Precatória' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:U{#:B{CUMPRIMENTO} da finalidade deprecada}, servindo a carta como mandado, e em seguida,
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{DEVOLUÇÃO} ao Juízo Deprecante com as nossas homenagens.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
                
        <item id="atoOrdItPrecatoriaJuntarCertificarArquivar" label="Juntar, certificar e arquivar" dataPlus="{ 'descricaoAppend': 'Juntar, certificar e arquiva Carta Precatória devolvida' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{JUNTAR} os documentos principais da Carta Precatória no processo principal/originário.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{CERTIFICAR} a juntada correspondente e, em seguieda,
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{ARQUIVAR} os presentes autos.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        
        <item id="atoOrdItManifHabilitSucessores" label="Manifestar-se sobre habilitação de sucessor" dataPlus="{ 'descricaoAppend': 'Manifestar-se sobre habilitação de sucessor' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:B{INTIMAÇÃO} da parte contrária para, em #:B{5(cinco) dias}, manifestar-se sobre pedido de habilitação de sucessores de parte falecida (art. 690 do CPC).
                </data>
            </itemContent>
        </item>  
        
        <item id="atoOrdItManifDepositoVoluntario" label="Manifestar-se sobre depósito voluntário" dataPlus="{ 'descricaoAppend': 'Manifestar-se sobre depósito voluntário' }">            
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        #:B{INTIMAÇÃO} da #:B{parte #{j2.env.PJeVars.processo.polos.parteAtiva}} para, no prazo de 05 (cinco) dias, 
                        manifestar-se sobre #:B{depósito voluntário} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Havendo concordância com o valor depositado:
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>  
    </items>
  </selectorDef>
</Definitions>
"
};