window.j2.res.mod.termoSelSrc.xmlEncode = {      
  load : "<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<Definitions xmlns="http://j2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SeleectorsItemsDefinitions" targetNamespace="http://j2" xsi:schemaLocation="http://j2 ../XML/j2.xsd">
  <selectorDef id="selectorBlocoAssinaturas" grouped="false">
    <eventFire event="signatario.onChange"/>
    <itemFormats>
      <elemento tag="span" scope="NONE"> 
            <textHTML scope="NONE">
                <data>
                    #{textContent}
                </data>
            </textHTML>
        </elemento>
    </itemFormats>
    <groupsDefs>
        
        <!--group label="Ad-hoc">
            <gItem id="termItConclusaoCor2020"/>
        </group-->
        
        <group label="Termos Comuns">
            <gItem id="termItArquivamento"/>
            <gItem id="termItDesarquivamento"/>
            <gItem id="termItEncaminhamento"/>
            <gItem id="termItEncaminhamentoHoraCertaCartaIntimacao"/>
            <gItem id="termItJuntada"/>
            <gItem id="termItJuntadaAlvara"/>
            <gItem id="termItJuntadaCartaPrecatoria"/>
            <gItem id="termItJuntadaCertidaoDivida"/>
            <gItem id="termItRemessaTR"/>
        </group>
        

        
        <group label="AR">
            <gItem id="termItARDevolvido"/>
            <gItem id="termItAREntregue"/>
            <gItem id="termItJuntadaAR"/>
        </group>
        
        <group label="Conclusões">
            <gItem id="termItConclusao"/>
            <gItem id="termItConclusaoPeticao"/>
            <gItem id="termItConclusaoRegularizarMovimentacao"/>
            <gItem id="termItConclusaoRegularizarSuspensao"/>
        </group>     
        
        <group label="SRO">
            <gItem id="termItSRONegativo"/>
            <gItem id="termItSROPositivo"/>
        </group>   
        
    </groupsDefs>
    <items>      
        <item id="termItConclusaoCor2020" label="Conclusão" dataPlus="{ 'titleAppend': 'CONCLUSÃO', 'descricaoAppend': 'Conclusão - Correição 2020' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                     Em virtude da Correição Geral Ordinária/2020, que iniciará em 23/01/2020 (Portaria TJ 45422019), remeto os autos conclusos, no estado em que se encontram, para a Dra Dayna Leão Tajra Reis Teixeira, juíza titular do 2º Juizado Especial Cível de Imperatriz/MA
                </data>
            </itemContent>
        </item>
          
        <item id="termItArquivamento" label="Arquivamento" dataPlus="{ 'titleAppend': 'ARQUIVAMENTO', 'descricaoAppend': 'Arquivamento' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} realizo o #:B{ARQUIVAMENTO} dos presentes autos#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItConclusao" label="Conclusão" dataPlus="{ 'titleAppend': 'CONCLUSÃO', 'descricaoAppend': 'Conclusão' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço #:B{CONCLUSÃO} dos presentes autos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.MM} #:B{#{j2.env.PJeVars.unidade.juiz.nome}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItConclusaoPeticao" label="Conclusão | Petição" dataPlus="{ 'titleAppend': 'CONCLUSÃO', 'descricaoAppend': 'Conclusão' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data}, em razão da #:U{petição #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}}, faço #:B{CONCLUSÃO} dos presentes autos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.MM} #:B{#{j2.env.PJeVars.unidade.juiz.nome}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItConclusaoRegularizarMovimentacao" label="Conclusão | Regularizar Código Decisão|Decisão|Sentença" dataPlus="{ 'titleAppend': 'CONCLUSÃO', 'descricaoAppend': 'Conclusão Regularizar Código Ato Judicial' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>                    
                    #:span!caput{Nesta data}, a fim de regularizar o #:B{código do movimento processual} do(a) última(o) decisão/despacho/sentença proferida nos autos, faço #:B{CONCLUSÃO} dos presentes autos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.MM} #:B{#{j2.env.PJeVars.unidade.juiz.nome}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItConclusaoRegularizarSuspensao" label="Conclusão | Regualizar Suspensão" dataPlus="{ 'titleAppend': 'CONCLUSÃO', 'descricaoAppend': 'Conclusão Regularizar Suspensão' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data}, a fim de regularizar o #:B{código do movimento processual} de suspensão dos autos, conforme OFC-GDJAP - 222018, expedido pela Supervisão dos Juizados Especiais, faço #:B{CONCLUSÃO} dos presentes autos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.MM} #:B{#{j2.env.PJeVars.unidade.juiz.nome}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        
        
        <item id="termItDesarquivamento" label="Desarquivamento" dataPlus="{ 'titleAppend': 'DESARQUIVAMENTO', 'descricaoAppend': 'Desarquivamento' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} realizo o #:B{DESARQUIVAMENTO} dos presentes autos#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItJuntada" label="Juntada" dataPlus="{ 'titleAppend': 'JUNTADA', 'descricaoAppend': 'Juntada' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço #:B{JUNTADA} do(a)(s) #:U{XXXXXdocumentoJuntadoXXXXXXX}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItJuntadaAlvara" label="Juntada Alvará" dataPlus="{ 'titleAppend': 'JUNTADA', 'descricaoAppend': 'Juntada Termo Recebimento Alvará' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço #:B{JUNTADA} do termo de #:U{recebimento do(s) Alvará(s) Judicial(is) #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItJuntadaCertidaoDivida" label="Juntada Certidão de Dívida" dataPlus="{ 'titleAppend': 'JUNTADA', 'descricaoAppend': 'Juntada Termo Recebimento Certidão Dívida' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço #:B{JUNTADA} do termo de #:U{recebimento do(s) Certidão(ões) de Dívida #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        
        <item id="termItJuntadaCartaPrecatoria" label="Juntada Carta Precatória" dataPlus="{ 'titleAppend': 'JUNTADA', 'descricaoAppend': 'Juntada Diligência e Inteiro Teor Carta Precatória' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço #:B{JUNTADA} da #:B{diligência cumprida com finalidade atingida} e inteiro teor da Carta Precatória #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        
        <item id="termItJuntadaAR" label="Juntada Automatizada" dataPlus="{ 'titleAppend': 'JUNTADA DE AVISO DE RECEBIMENTO' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm" >
                        <elemento tag="span" scope="NONE" class="" >Nesta data faço juntada do Aviso de Recebimento nº</elemento>
                        <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>&nbsp;</SPAN>]]></data></textHTML></elemento>
                        <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.ARNum">#:U{XXXNumeroDoARXXX}</elemento>
                        <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>, &nbsp;</SPAN>]]></data></textHTML></elemento>
                        <elemento tag="span" scope="NONE" class="" >referente ao id de expediente nº</elemento>
                        <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>&nbsp;</SPAN>]]></data></textHTML></elemento>
                        <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.ExpedienteNum">#:U{XXXNumeroDoExpedienteXXX}</elemento>
                        <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>,&nbsp;</SPAN>]]></data></textHTML></elemento>
                        <elemento tag="span" scope="NONE" class="" >documento dos autos</elemento>
                        <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>&nbsp;</SPAN>]]></data></textHTML></elemento>
                        <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.processoDoc">#:U{#:B{XXXProcessoDocIdXXX}}</elemento>
                        
                        <elemento tag="span" scope="NONE" class="" >,</elemento>
                        
                        <elemento tag="span" scope="NONE" class="dispBlock AlignCenter" >
                            <elemento tag="span" scope="NONE" class="" >Carta de</elemento>
                            <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>&nbsp;</SPAN>]]></data></textHTML></elemento>
                            <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.DescConteudo">#:B{XXXDescriçãoDoConteúdoXXX}</elemento>
                            <elemento tag="span" scope="NONE" class="" >, destinada à parte</elemento>
                            <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>,&nbsp;</SPAN>]]></data></textHTML></elemento>
                            <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.Destinatario">#:B{XXXParteDestinatáriaDaCartaXXX}</elemento>
                            <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>,&nbsp;</SPAN>]]></data></textHTML></elemento>
                            
                            <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.Resultado">#:B{#:U{frustrada sob o motivo}}</elemento>
                            <elemento tag="span" scope="NONE" class="" ><textHTML scope="NONE"><data><![CDATA[<SPAN>&nbsp;</SPAN>]]></data></textHTML></elemento>
                            <elemento tag="span" scope="NONE" class="" id="termItJuntadaAR.ResultadoComplemento">#:B{#:U{"[Selecione]}}".</elemento>
                        </elemento>
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm" >
                        Do que para constar, lavrei o presente termo.
                    </elemento>
                    <elemento tag="div" scope="NONE" id="termItJuntadaAR.rastreamentoSpan" >
                    </elemento>                    
                </simpleElementsDefs>
            </itemContent>
        </item>       
        <item id="termItRemessaTR" label="Remessa Tumra Recursal" dataPlus="{ 'titleAppend': 'REMESSA' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço #:B{REMESSA} dos presentes autos à #:U{Turma Recursal Única Cível e Criminal de Imperatriz-MA}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        
        <item id="termItARDevolvido" label="devolução | sem leitura" dataPlus="{ 'titleAppend': 'JUNTADA DE AVISO DE RECEBIMENTO' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço juntada do AR registrado sob nº#:B{ XXXCodigoARXXX}, referente à#:B{ XXXTipoCorrespondênciaXXX}  endereçada a parte #:B@termoJuntadaAR.exp.Destinatario{ XXXQualifcParteXXX}, o qual foi #:U{devolvido a este Juizado} sob o motivo#:B{ XXXMotivoDevXXX}, conforme documento anexo  ao presente termo#:span!dot{.}
                </data>
            </itemContent>
        </item>
        
        <item id="termItAREntregue" label="entregue | leitura" dataPlus="{ 'titleAppend': 'JUNTADA DE AVISO DE RECEBIMENTO' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço juntada do AR registrado sob nº#:B{ XXXCodigoARXXX}, referente à#:B{ XXXTipoCorrespondênciaXXX}  endereçada a parte #:B@termoJuntadaAR.exp.Destinatario{ XXXQualifcParteXXX}, o qual foi #:U{#:B{devidamente entregue ao destinatário}} em #:B{ XXXDataDaEntregaXXX}, conforme documento anexo ao presente termo#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItEncaminhamento" label="Encaminhamento" dataPlus="{ 'titleAppend': 'ENCAMINHAMENTO' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} #:B{ENCAMINHO} os presentes autos para ser realizada o(a) XXXXProcedimentoARealizarSecretariaXXX#, conforme o que dispõe a determinação #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItEncaminhamentoHoraCertaCartaIntimacao" label="Encaminhamento Expedição Carta de Intimação" dataPlus="{ 'titleAppend': 'ENCAMIHAMENTO', 'descricaoAppend': 'Encaminhamento para expedição de carta de intimação'  }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data}, em atenção ao teor da certidão do oficial de justiça #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, referente à citação por hora certa,
                    #:B{ENCAMINHO os presentes autos para expedição de carta de intimação}, visando à formalização do ato, na forma prevista no art. 254 do CPC/2015#:span!dot{.}
                </data>
            </itemContent>
        </item>        
        <item id="termItSRONegativo" label="SRO | Negativo" dataPlus="{ 'titleAppend': 'JUNTADA DE SRO - CORREIOS' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço juntada do #:B{#:U{SRO} DA CARTA DE CITAÇÃO} registrado sob nº #:B{XXXNumeroARXXX}, #:B{com resultado negativo}, conforme documento anexo ao presente termo#:span!dot{.}
                </data>
            </itemContent>
        </item>
        <item id="termItSROPositivo" label="SRO | Positivo" dataPlus="{ 'titleAppend': 'JUNTADA DE SRO - CORREIOS' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    #:span!caput{Nesta data} faço juntada do #:B{#:U{SRO} DA CARTA DE CITAÇÃO} registrado sob nº #:B{XXXNumeroARXXX}, o qual foi devidamente entregue ao destinatário em #:B{XXXDataEntregaXXX}, conforme documento anexo ao presente termo#:span!dot{.}
                </data>
            </itemContent>
        </item>
        
        
    </items>
  </selectorDef>
</Definitions>
"
};