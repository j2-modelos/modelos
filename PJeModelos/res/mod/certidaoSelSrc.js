window.j2.res.mod.certidaoSelSrc.xmlEncode = {      
  load : "<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.

https://www.dropbox.com/s/60pxx9xci6rbnw3/Portaria%20Conjunta%205.2017%20-%20cumprimento%20senten%C3%A7a%20PJE.pdf?dl=0

-->
<Definitions xmlns="http://j2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SeleectorsItemsDefinitions" targetNamespace="http://j2" xsi:schemaLocation="http://j2 ../XML/j2.xsd">
  <selectorDef id="selectorBlocoAssinaturas" grouped="false">
    <eventFire event="signatario.onChange"/>
    <itemFormats>
      <elemento tag="p" class="p FntMod Indnt1cm" scope="NONE">
         #{textContent}
      </elemento>
    </itemFormats>
    <groupsDefs>
        <!--group label="Ad Hoc"-->
            <!--gItem id="certSuspensaoExpedicaoMandados"/-->
			      <!--<gItem id="certMandadoAPartir20211020"/>-->
            <!--<gItem id="certItPortariaCOVID19"/>-->
            <!--<gItem id="certItErroPje"/>-->
            <!-- gItem id="certItCorreicao2021"/-->
            <!--<gItem id="certConclusaoCorreicao2020"/>-->
        <!--/group-->           
                    
        <group label="Comuns">
            <gItem id="certItGenerico"/>
            <gItem id="certItArquivamento"/>
            <gItem id="certItDesarquivamento"/>
        </group>
        <group label="Alvara">
            <gItem id="certItAlvaraEntregaParte"/>
            <gItem id="certItAlvaraEntregaAdvogado"/>
            <gItem id="certItAlvaraEntregaAdvogadoHabilitado"/>
            <gItem id="certItAdvogadoHabilitado"/>
            <gItem id="certItAlvaraRemessaEmail"/>
            <gItem id="certItAlvaraCumrpimentoBB"/>
            <gItem id="certItAlvaraProcuracaoSemPoderes"/>
        </group>
        <group label="Análise de Juntadas">
            <gItem id="certItHabilitacaoAutomatica"/>
            <gItem id="certItHabilitacaoManual"/>
            <gItem id="certItHabilitacaoPedidoExclusividade"/>
        </group>
        <group label="Audiência">
            <gItem id="certItAudCancelamento"/>
            <gItem id="certItAudDesignacao"/>
            <gItem id="certItAudRedesignacao"/>
        </group>
        <group label="Carta Precatória">
            
            <gItem id="certItDevolucaoPrecatoria"/>  
            <gItem id="certItDevolucaoPrecatoriaPJe"/> 
            
            <gItem id="certItPrecatoriaDistribuidaPJe"/>      
            
             
            <gItem id="certItPrecatoriaEnviadaMalote"/>       
            <gItem id="certItPrecatoriaParalisada"/>       
            <gItem id="certItJuntadaPrecatoria"/>  
        </group>
        <group label="Conclusão">
            <gItem id="certItConclusao"/>
            <gItem id="certItConclusaoRegularizarAtoJudicial"/>
            <gItem id="certItConclusaoRegularizarSuspensao"/>
        </group>
        <group label="Contadoria">
            <gItem id="certItCustasPendentes"/>
            <gItem id="certItCustasRecolhidas"/> 
        </group>      
        <group label="Execuçção">
            <gItem id="certItSuspensTelemar"/>
            <gItem id="certItADPFCaema"/>
            <gItem id="certItADPFCaemaBloq"/>
            <gItem id="certItDocAusenciaCumSen"/>
        </group>
        <group label="Intimacao">
            <!--gItem id="certItLiminarConcessao"/>
            <gItem id="certItLiminarNaoConcessao"/>
            <gItem id="certItSentenca"/-->
            <gItem id="certItPublicacaoDJe"/>
            <gItem id="certItIntimacaoTelefoneInfrutifera"/>
            <gItem id="certItRemessaExpedienteViaEMail"/>
        </group>
        <group label="Intimação - Não Expedição">
            <!--gItem id="certItNaoIntEndDeconhecido"/-->
            <gItem id="certItNaoIntRevelia"/>
            <gItem id="certItNaoIntNaoCitacao"/>
        </group>
        <group label="Justiça Gratuita">
            <gItem id="certItConclusaoDeliberacaoJusticaGratuita"/>
            <gItem id="certItSemRequerimentoSemJusticaGratuita"/>
        </group>        
        <group label="Outros">
            <!--<gItem id="certItApresentacaoTituloExecutivo"/>-->
            <gItem id="certItEncaminhamentoExpedicaoCartaDeIntimacao"/>            
            <gItem id="certItRemessaPorAR"/>
            <gItem id="certItDesentranhamento"/>
            
        </group>        
        <group label="Prazo">
            <gItem id="certItPrazoSemCump"/>
            <gItem id="certItPrazoAbandono"/>
            <gItem id="certItPrazoInAlbisManifEmbExec"/>
            <gItem id="certItPrazoInAlbis"/>
            <gItem id="certItPrazoRegular"/>
        </group>        
        <group label="RENAJUD">
            <gItem id="certItRENAJUDComAlienBloq"/>
            <gItem id="certItRENAJUDExistencia"/>
            <gItem id="certItRENAJUDInexistencia"/>
            <!--gItem id="certItRENAJUDComAlien"/>
            <gItem id="certItRENAJUDComAlienComBloqueio"/>
            <gItem id="certItRENAJUDComAlienComPenhr"/>
            <gItem id="certItRENAJUDSemAlienComBloq"/>
            <gItem id="certItRENAJUDSemAlienComPenhr"/>
            <gItem id="certItRENAJUDSemAlienSemBloq"/-->
            <gItem id="certItRENAJUDRemocao"/>

        </group>        
        <group label="Retificação de autos">
            <gItem id="certItTelefoneInclusao"/>
            <gItem id="certItRetificacaoOrdemJudicial"/>
            <gItem id="certItRetificacaoOrdinatorio"/>
        </group> 
        <group label="SERASAJUD">
          <gItem id="certSERASAEnvio"/>
          <gItem id="certSERASAResposta"/>
          <gItem id="certSERASAPesquisaEndereco"/>
        </group>
        <group label="SISBAJUD">
            <gItem id="certBloqueio"/>
            <gItem id="certBACENDesbloq"/>
            <gItem id="certPenhoraInfrutifera"/>
            <gItem id="certPenhoraEfetivadaIntegral"/>
            <gItem id="certPenhoraEfetivadaIntegralDesbloqExcedente"/>
            <gItem id="certPenhoraEfetivadaParcial"/>
            <gItem id="certBACENTransf"/>
            <gItem id="certBACENTransfParcialDesbloq"/>
        </group>
        <group label="Tempestividade">
            <gItem id="certItTempestividadeEmbargos"/>
            <gItem id="certItTempestividadeEmbargosIntempest"/>
            <gItem id="certItTempestividadeRecurso"/>
            <gItem id="certItTempestividadeRecursoIntepest"/>
        </group>        
        <group label="Trânsito em Julgado">
            <gItem id="certItTransito1"/>
            <gItem id="certItTransitoCompleta"/>
            <gItem id="certItTransitoAudiencia"/>
        </group> 
        <group label="Videoconferência">
            <gItem id="certItInviabilidadeTecnicaParteAtiva"/>
        </group> 
        <group label="WhatsApp">
            <gItem id="certItWhatsAppLeitura"/>
            <gItem id="certItWhatsAppLeituraArt6"/>
            <gItem id="certItWhatsAppLeituraArt6ccPC142020"/>
            <gItem id="certItWhatsAppLeituraNao"/>
        </group>      
    </groupsDefs>
    <items>
        <item id="certItRemessaExpedienteViaEMail" label="Remessa expediente via e-mail" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nesta data remeti o expediente #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} via e-mail ao jurídico da 
                    parte #{j2.env.PJeVars.processo.polos.partePassiva}.
                </data>
            </itemContent>
        </item> 
        
        
        <!-- CONTADORIA -->
        <item id="certSERASAEnvio" label="Envio" dataPlus="{ 'descricaoAppend': 'SERASAJUD Envio Solicitação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que em cumprimento ao despacho/decisão/sentença de #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, nesta data, foi expedido ofício, via Serasajud, para #:B{INCLUSÃO/EXCLUSÃO} do nome do devedor no cadastro de inadimplentes da Serasa Experian.
                </data>
            </itemContent>
        </item> 
        <item id="certSERASAResposta" label="Resposta" dataPlus="{ 'descricaoAppend': 'SERASAJUD Resposta Solicitação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que, nesta data, faço a juntada da resposta do Serasajud informando o cumprimento da determinação judicial.
                </data>
            </itemContent>
        </item> 
        <item id="certSERASAPesquisaEndereco" label="Pesquisa Endereços" dataPlus="{ 'descricaoAppend': 'SERASAJUD Pesquisa Endereços' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data em consulta aos sistemas #:B{INFOSEG, SIEL, SERASAJUD, RENAJUD e INFOJUD} foram localizados os seguintes endereços da(s) parte(s) #{j2.env.PJeVars.processo.polos.partePassiva}(s):
                </data>
            </itemContent>
        </item> 
        
        <!-- CONTADORIA -->
        <item id="certItCustasPendentes" label="Custas Pendentes" dataPlus="{ 'descricaoAppend': 'Custas Pendentes' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, que a parte Executada foi condenada ao pagamento das custas processuais, conforme acórdão #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que a parte recorrente/Executada pagou as custas processuais de preparo conforme #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, 
                        relativas às custas geradas até a interposição do recurso, tendo havido publicações geradoras de custas após o retorno 
                        dos autos do segundo grau, #:B{de acordo com o art. 55, § único, III da Lei 9.099/95}.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Há, portanto, custas pendentes de pagamento, conforme conta que segue em anexo.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        
        
        <!-- AD-HOC -->
        <item id="certSuspensaoExpedicaoMandados" label="Suspensão de Expedição de Mandados" dataPlus="{ 'descricaoAppend': 'Suspensão de Expedição de Mandados' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que nos termos das Portarias GP 1952021, 2232021 e 282021, #:B{no período de 08/03/2021 a 30/04/2021, as atividades presenciais do TJMA estão suspensas}, assim como a #:B{expedição e cumprimento de mandado de forma presencial} (que não envolvam liberdade pessoal e questão urgente de caráter inadiável), em face das medidas restritivas à disseminação do contágio do Coronavírus.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Desse modo, encaminho os autos para que se #:U{aguarde o retorno da possibilidade de expedição e cumprimento  de mandado de forma presencial}.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
		<item id="certMandadoAPartir20211020" label="Mandados Penhora a partir de 20/10/2021" dataPlus="{ 'descricaoAppend': 'Expedição de mandados a partir de 20/10/2021' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                  Certifico, para os devidos fins, de ordem da Dra Dayna Leão Tajra Reis Teixeira, juíza titular do 2º Juizado Especial Cível de Imperatriz, que #:B{o mandado de penhora pendente será expedido a partir de 20/10/2021}, data em que o quadro de oficiais de justiça da unidade estará completo, visto que atualmente 1(um) dos oficiais de justiça (sr. Ludugero Pereira Sá Neto) está em gozo de licença prêmio regular de 90 dias, estando todo o volume de mandado da unidade a cargo de apenas 1(um) oficial de justiça. 
                </data>
            </itemContent>
        </item>
        <item id="certConclusaoCorreicao2020" label="Paralização | Correição 2020" dataPlus="{ 'descricaoAppend': 'Conclusão - Correição 2020' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico que os presentes autos se mativeram paralizados na Secretaria Judicial deste juízo em razão do acúmulo de serviço em face do reduzido quadro de servidores no final do 2º semestre do ano de 2019.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Desse modo, em virtude da Correição Geral Ordinária/2020, que iniciará em 23/01/2020 (Portaria TJ 45422019), remeto os autos conclusos, no estado em que se encontram, para a Dra Dayna Leão Tajra Reis Teixeira, juíza titular do 2º Juizado Especial Cível de Imperatriz/MA.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        <item id="certItPortariaCOVID19" label="Suspensão Audiências | Portaria Conjunta COVID-19" dataPlus="{ 'descricaoAppend': 'Suspensão Audiência - Portaria Conjunta COVID-19' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico que #:B{a audiência} de Conciliação, Instrução e Julgamento designada no presente feito #:B{não será realizada} tendo em vista o disposto nos arts. 1º e 3º da Portaria Conjunta 182020 do Tribunal de Justiça do Estado do Maranhão, que dispõe sobre medidas temporárias de prevenção ao contágio pelo Coronavírus (COVID-19) no Poder Judiciário do Estado do Maranhão:
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault marginAtoJudicial marginJurisprudenciaA5" >
                        Art. 1º Fica prorrogado para o dia 15 de maio de 2020 o prazo de vigência do regime de plantão extraordinário instituído pelo Conselho Nacional de Justiça através da Resolução 313/2020, e disciplinado na Portaria Conjunta nº 14/2020.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault marginAtoJudicial marginJurisprudenciaA5" >
                        (...)
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault marginAtoJudicial marginJurisprudenciaA5" >
                        Art. 3º Os processos judiciais e administrativos que tramitam em meio eletrônico, terão os prazos processuais retomados, a partir do dia 4 de maio de 2020, #:B{permanecendo vedada a designação de atos presenciais, conforme determinado na Resolução CNJ 314, de 20.04.2020}.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico ainda, que os autos serão encaminhados à Secretaria Judicial para redesignação da audiência com a devida intimação das partes.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
                
        <!-- ANÁLISE DE JUNTADA -->
        <item id="certItHabilitacaoAutomatica" label="Solicitação de habilitação | automática" dataPlus="{ 'descricaoAppend': 'Habilitação advogado via PJe' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                  Certifico nesta data que o(a)(s) advogado(a)(s) #:B{#:span@pessoa-advogado-nomes{#{j2.mod.clsCnstr.SeletorPessoa.selUtil.advogados.nomes}}}
                  solicitou(aram) habilitação via PJe em favor da parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                  #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}, conforme petição 
                  #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>   
        <item id="certItHabilitacaoManual" label="Solicitação de habilitação | manual" dataPlus="{ 'descricaoAppend': 'Habilitação advogado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                  Certifico nesta data que #:U{realizei a habilitação} do(a)(s) advogado(a)(s) 
                  #:B{#:span@pessoa-advogado-nomes{#{j2.mod.clsCnstr.SeletorPessoa.selUtil.advogados.nomes}}}
                  como patrono(a)(s) da parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                  #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}, conforme solicitação em petição 
                  #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>   
        <item id="certItHabilitacaoPedidoExclusividade" label="Solicitação de habilitação | Pedido Publicação Exclusiva" dataPlus="{ 'descricaoAppend': 'Habilitação advogado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                  Certifico nesta data que #:U{realizei a habilitação} do(a)(s) advogado(a)(s) 
                  #:B{#:span@pessoa-advogado-nomes{#{j2.mod.clsCnstr.SeletorPessoa.selUtil.advogados.nomes}}}
                  como patrono(a)(s) da parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                  #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}, conforme solicitação de #:U{publicações exclusivas} em petição 
                  #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>     
             
             
        <item id="certItApresentacaoTituloExecutivo" label="Apresentação Título(s) Executivo(s)" dataPlus="{ 'descricaoAppend': 'Apresentação títulos executivos objeto da lide' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                  Certifico que nesta data compareceu a esta Secretaria Judicial o(a) advogado(a) da parte 
                  #{j2.env.PJeVars.processo.polos.parteAtiva} #:B{#{j2.env.PJeVars.partes.ativa.advogado.nome_}} 
                  a fim de, em cumprimento ao despacho inicial #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, 
                  apresentar o(s) título(s) executivo(s) objeto(s) da lide, oportunidade em que o(s) mesmo(s) 
                  foi(foram) devidamente carimbado(s), digitalizado(s), juntado(s) aos autos e devolvido(s) a(o) mencionado(a) advogado(a).
                </data>
            </itemContent>
        </item>        
        <item id="certItArquivamento" label="Arquivamento" dataPlus="{ 'descricaoAppend': 'Arquivamento' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que realizei o #:B{ARQUIVAMENTO} dos presentes autos.
                </data>
            </itemContent>
        </item>        
        <item id="certItDesarquivamento" label="Desarquivamento" dataPlus="{ 'descricaoAppend': 'Desarquivamento' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que realizei o #:B{ARQUIVAMENTO} dos presentes autos.
                </data>
            </itemContent>
        </item>        
        <item id="certItGenerico" label="Genérica" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que XXXTeorCertidaoXXXX.
                </data>
            </itemContent>
        </item>
        <item id="certItCorreicao2021" label="Correição 2021" dataPlus="{ 'descricaoAppend': 'Correição ordinária' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que no período de #:B{29/11/2021 a 03/12/2021} foi realizada a #:B{Correição Ordinária da CGJ/2021} no 2º Juizado Especial Cível de Imperatriz, cujo #:U{diagnóstico de autos correicionados} segue anexo. 
                </data>
            </itemContent>
        </item>
        <!-- BACENJUD -->
                <item id="certPenhoraEfetivadaIntegral" label="Penhora Integral" dataPlus="{ 'descricaoAppend': 'Penhora SISBAJUD Integral' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que nesta data foi efetivada #:B{integralmente} a penhora online no valor de #:U{#:B@valorBacenjud.certPenhoraEfetivadaIntegral{R$ 0,00 (zero)}} nas contas da parte executada, por meio do sistema #:U{SISBAJUD}, cuja minuta segue anexa.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que a transferência da quantia citada para conta judicial será efetivada após transcurso do prazo de embargos à execução.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        <item id="certPenhoraEfetivadaIntegralDesbloqExcedente" label="Penhora Integral | Desbloqueio Excedente" dataPlus="{ 'descricaoAppend': 'Penhora SISBAJUD Integral | Desbloqueio excedente' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos, fins que nesta data foi efetivada #:B{integralmente} a penhora online no valor de #:U{#:B@valorBacenjud.certPenhoraEfetivadaIntegralDesbloqExcedente{R$ 0,00 (zero)}} nas contas da parte executada, por meio do sistema #:U{SISBAJUD}, cuja minuta segue anexa.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que foi protocolizada a ordem de #:B{desbloqueio do valor excedente}.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, por fim, que a transferência da quantia citada para conta judicial será efetivada após transcurso do prazo de embargos à execução.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        
        <item id="certPenhoraEfetivadaParcial" label="Penhora Parcial" dataPlus="{ 'descricaoAppend': 'Penhora SISBAJUD parcial' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que nesta data foi efetivada #:B{parcialmente} a penhora online no valor de #:U{#:B@valorBacenjud.certPenhoraEfetivadaParcial{R$ 0,00 (zero)}} nas contas da parte executada, por meio do sistema #:U{SISBAJUD}, cuja minuta segue anexa.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que a transferência da quantia citada para conta judicial será efetivada após transcurso do prazo de embargos à execução.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>              
        <item id="certPenhoraInfrutifera" label="Penhora Infrutífera" dataPlus="{ 'descricaoAppend': 'Penhora SISBAJUD infrutífera' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos, fins nesta data que a tentativa de penhora nas contas bancárias da parte executada, por meio do sistema SISBAJUD, cuja minuta segue anexa, #:B{#:U{resultou infrutífera}} devido à ausência de valores.
                </data>
            </itemContent>
        </item>    
        
        <item id="certBACENDesbloq" label="Desbloqueio" dataPlus="{ 'descricaoAppend': 'Desbloqueio SISBAJUD' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos, fins que nesta data foi efetuado #:B{protocolo de desbloqueio} do valor de #:U{#:B@valorBacenjud.certBACENDesbloq{R$ 0,00 (zero)}} nas contas da parte executada, por meio do sistema #:U{SISBAJUD}, cuja minuta segue anexa.
                </data>
            </itemContent>
        </item>    
        
        <!--item id="certBACENTransf" label="Transferência" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data foi efetivada a #:B{transferência} do valor de #:U{#:B@valorBacenjud.certBACENTransf{R$ 0,00 (zero)}} para conta judicial, por meio do sistema #:U{SISBAJUD}, cuja minuta de transferência segue anexa.
                </data>
            </itemContent>
        </item-->    
        
        <item id="certBACENTransf" label="Transferência" dataPlus="{ 'descricaoAppend': 'Transferência SISBAJUD' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que nesta data foi protocolizada a ordem de #:B{transferência} do valor de #:U{#:B@valorBacenjud.certBACENTransf{R$ 0,00 (zero)}} para conta judicial, por meio do sistema #:U{SISBAJUD}, cuja minuta segue anexa.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que a instituição financeira possui prazo para cumprimento da ordem em questão, razão pela qual este juízo aguarda a geração do número da conta judicial correspondente.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item> 
        
        <item id="certBACENTransfParcialDesbloq" label="Transferência Parcial | Desbloqueio Remanescente" dataPlus="{ 'descricaoAppend': 'Transferência parcial SISBAJUD e desbloqueio remanescente' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que nesta data foi protocolizada a ordem de #:B{transferência} do valor 
                        de #:U{#:B@valorBacenjud.certBACENTransfParcialDesbloq{R$ 0,00 (zero)}} #:B{e de desbloqueio do saldo remanescente}, cuja minuta segue anexa.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que a instituição financeira possui prazo para cumprimento da ordem em questão, 
                        razão pela qual este juízo aguarda a geração do número da conta judicial correspondente.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item> 
        
        <item id="certBloqueio" label="Bloqueio" dataPlus="{ 'descricaoAppend': 'Bloqueio SISBAJUD' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data foi protocolada a solicitação de bloqueio de valores nas contas de titularidade da parte #{j2.env.PJeVars.processo.polos.partePassiva} através do sistema SISBAJUD.
                </data>
            </itemContent>
        </item>   
        <!-- FIM BACENJUD -->
                     
                                               
        <item id="certItTransito1" label="Trânsito" dataPlus="{ 'descricaoAppend': 'Trânsito em julgado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a sentença #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} prolatada nos presentes autos #:B{transitou livremente em julgado em #:U{#:span@certDataTransito{XXXDataTransitoXXXX}}}.
                </data>
            </itemContent>
        </item>                
        <item id="certItTransitoCompleta" label="Trânsito Completa" dataPlus="{ 'descricaoAppend': 'Trânsito em julgado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a r. sentença prolatada nos presentes autos #:B{transitou livremente em julgado 
                    em #:U{XXXDataTransitoXXXX}} para a #{j2.env.PJeVars.processo.polos.parteAtiva} #:B{#{j2.env.PJeVars.partes.ativa.nomeUC}}
                    e em #:U{XXXDataTransitoXXXX}} para a #{j2.env.PJeVars.processo.polos.partePassiva} #:B{#{j2.env.PJeVars.partes.passiva.nomeUC}}.
                </data>
            </itemContent>
        </item>  
        
        <item id="certItTransitoAudiencia" label="Trânsito Audiência" dataPlus="{ 'descricaoAppend': 'Trânsito em julgado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a sentença prolatada nos presentes autos #:B{transitou livremente em julgado ao final da Audiência UNA realizada}.
                </data>
            </itemContent>
        </item>  
         
        <item id="certItJuntadaPrecatoria" label="Recebimento de CP cumprida (Pje)" dataPlus="{ 'descricaoAppend': 'Recebimento de CP cumprida (Pje)' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data foi juntada no
                    processo originário o inteiro teor da presente carta precatória
                </data>
            </itemContent>
        </item>  
        
        <item id="certItDevolucaoPrecatoriaPJe" label="Devolução (Pje)" dataPlus="{ 'descricaoAppend': 'Devolução de Carta Precatória (Pje)' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que termos do Provimento nº 42/2019 nesta data procedo à redistribuição da presente missiva ao juízo deprecado cumprida COM/SEM finalidade atingida.
                </data>
            </itemContent>
        </item>  
        
        <item id="certItDevolucaoPrecatoria" label="Devolução (Malote/Email)" dataPlus="{ 'descricaoAppend': 'Devolução de Carta Precatória (Malote/Email)' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que realizei a #:U{#:B{DEVOLUÇÃO}} da presente Carta Precatória ao juízo deprecante.
                </data>
            </itemContent>
        </item>  
        
        <item id="certItPrecatoriaParalisada" label="Paralisada no juízo deprecado" dataPlus="{ 'descricaoAppend': 'Carta Precatória paralisada no juízo deprecado' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que realizei consulta processual dos autos de carta precatória encaminhada ao juízo 
                    deprecado e constatei que a missiva enviada se encontra paralisada desde XXXXDataPralisaçãoXXXX.
                </data>
            </itemContent>
        </item>
        
        <item id="certItPrecatoriaDistribuidaPJe" label="Distribuída via PJe" dataPlus="{ 'descricaoAppend': 'Carta Precatória distribuída via PJe' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nos termos do Provimento nº 42/2019 nesta data a carta precatória de #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi protocolada no(a) XXXjuizodeprecadoXXX sob nº XXXprocessoXXX.
                </data>
            </itemContent>
        </item>
        
        <item id="certItPrecatoriaEnviadaMalote" label="Enviada por Malote" dataPlus="{ 'descricaoAppend': 'Enviada por Malote' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nesta data a carta precatória de #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} fora expedida ao XXXjuizodeprecadoXXX via malote digital (XXXCodigoRastreamentoXXX).
                </data>
            </itemContent>
        </item>
        
        <item id="certItADPFCaemaBloq" label="ADPF Caema - Bloqueio - Conclusão" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            Certifico, para os devidos fins, que o TJMA encaminhou a este juízo do#:span{ }
                        </elemento>
                        <elemento tag="span" scope="NONE" id="potariaSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 5/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/g07gz5w911ctkg9/Of%C3%ADcio%20n%C2%BA%20068-2018%20DJUR%20-%20ADPF%20513.pdf?raw=1', 'popPortaria', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Ofício nº 068/2018 DJUR
                                <elemento tag="img" scope="NONE" id="potariaSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/g07gz5w911ctkg9/Of%C3%ADcio%20n%C2%BA%20068-2018%20DJUR%20-%20ADPF%20513.pdf?raw=1', 'popOficio', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            , com informação sobre a decisão proferida pela Excelentíssima Senhora Ministra #:B{ROSA WEBER}, Relatora da Medida Cautelar na#:span{ }
                        </elemento>    
                        <elemento tag="span" scope="NONE" id="potariaSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 5/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('http://www.stf.jus.br/portal/processo/verProcessoAndamento.asp?incidente=5364100', 'popOficio', 'width=1240, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                #:B{Arguição de Descumprimento de Preceito Fundamental no 513}
                                <elemento tag="img" scope="NONE" id="potariaSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('http://www.stf.jus.br/portal/processo/verProcessoAndamento.asp?incidente=5364100', 'popADPF', 'width=1240, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            , para cumprimento do constante na parte final da decisão: 
                        </elemento>  
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault marginJurisprudencia i" >
                        "(i) #:B{suspender}, até o julgamento do mérito desta ação, os efeitos de quaisquer medidas de execução judicial contra a CAEM em que #:B{desconsiderado a sua} sujeição ao regime previsto no #:B{art 100 da Constituição da República}, com a Imediata liberação dos valores
                        #:BR{}
                        (i1) determinar que se proceda à imediata devolução dos recursos que não tenham sido, até a data de hoje, repassados aos beneficiários das refendas decisões judiciais."
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que nos autos consta #:B{bloqueio} em conta da #{j2.env.PJeVars.partes.passiva.nome} e #:B{transferência} de valor, conforme #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, sem levantamento de valor pela parte #{j2.env.PJeVars.processo.polos.partePassiva}.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Desse modo, faço os autos presentes autos #:B{conclusos} para a Dra. Dayna Leão Tajra Reis Teixeira, juíza titular do 2º Juizado Especial Cível da Comarca de Imperatriz/MA, para deliberação.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        <item id="certItADPFCaema" label="ADPF Caema - Conclusão" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            Certifico, para os devidos fins, que o TJMA encaminhou a este juízo do#:span{ }
                        </elemento>
                        <elemento tag="span" scope="NONE" id="potariaSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 5/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/g07gz5w911ctkg9/Of%C3%ADcio%20n%C2%BA%20068-2018%20DJUR%20-%20ADPF%20513.pdf?raw=1', 'popPortaria', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Ofício nº 068/2018 DJUR
                                <elemento tag="img" scope="NONE" id="potariaSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/g07gz5w911ctkg9/Of%C3%ADcio%20n%C2%BA%20068-2018%20DJUR%20-%20ADPF%20513.pdf?raw=1', 'popOficio', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            , com informação sobre a decisão proferida pela Excelentíssima Senhora Ministra #:B{ROSA WEBER}, Relatora da Medida Cautelar na#:span{ }
                        </elemento>    
                        <elemento tag="span" scope="NONE" id="potariaSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 5/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('http://www.stf.jus.br/portal/processo/verProcessoAndamento.asp?incidente=5364100', 'popOficio', 'width=1240, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                #:B{Arguição de Descumprimento de Preceito Fundamental no 513}
                                <elemento tag="img" scope="NONE" id="potariaSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('http://www.stf.jus.br/portal/processo/verProcessoAndamento.asp?incidente=5364100', 'popADPF', 'width=1240, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            , para cumprimento do constante na parte final da decisão: 
                        </elemento>  
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault marginJurisprudencia i" >
                        "(i) #:B{suspender}, até o julgamento do mérito desta ação, os efeitos de quaisquer medidas de execução judicial contra a CAEM em que #:B{desconsiderado a sua} sujeição ao regime previsto no #:B{art 100 da Constituição da República}, com a Imediata liberação dos valores
                        #:BR{}
                        (i1) determinar que se proceda à imediata devolução dos recursos que não tenham sido, até a data de hoje, repassados aos beneficiários das refendas decisões judiciais."
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Desse modo, faço os autos presentes autos #:B{conclusos} para a Dra. Dayna Leão Tajra Reis Teixeira, juíza titular do 2º Juizado Especial Cível da Comarca de Imperatriz/MA, para deliberação.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        <item id="certItDocAusenciaCumSen" label="CumSen - Ausencia Documentos" dataPlus="{ 'descricaoAppend': 'Ausencia documento Cumprimento de Sentença' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt3cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            Em atenção ao que prevê a#:span{ }
                        </elemento>
                        <elemento tag="span" scope="NONE" id="potariaSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 5/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/60pxx9xci6rbnw3/Portaria%20Conjunta%205.2017.pdf?raw=1', 'popPortaria', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Portaria Conjunta 5/2017 TJMA
                                <elemento tag="img" scope="NONE" id="potariaSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/60pxx9xci6rbnw3/Portaria%20Conjunta%205.2017.pdf?raw=1', 'popPortaria', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            , principalmente os arts. 2º e 4º, #:B{CERTIFICO}, para os devidos fins, que #:B{não consta na petição inicial e/ou nos documentos que instruem o presente cumprimento de sentença} o seguinte:
                        </elemento>    
                    </elemento>
                    <elemento tag="table"  scope="NONE" class="QualfTable width80 CenterAlign">   
                        <HTMLAttribute name="border" value="1"/>
                        <HTMLAttribute name="cellpadding" value="2"/>
                        <HTMLAttribute name="cellspacing" value="0"/>
                        <elemento tag="tbody" scope="NONE">
                            <!-- ITENS DA CERTIDÃO -->
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><HTMLAttribute name="width" value="10%"/><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                I. na petição inicial, nome completo, o número de Inscrição no Cadastro de Pessoas Físicas (CPF) ou no Cadastro Nacional de Pessoa Jurídica (CNPJ) do(s) exequente(s) e do(s) executado(s), observado o disposto no art. 319, §§ 1º a 3º, do NCPC;
                            </elemento></elemento></elemento>
                            
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                II. na petição inicial, os endereços atualizados das partes;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                III. na petição inicial, indicação do(s) nome(s) do(s) advogado(s) ou defensor(es) público(s) das partes para fins de conferência do correto cadastramento e realização da(s) intimação(ões) em conformidade com o art. 513, § 2º, I, II, III e IV, do NCPC;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                IV. na petição inicial, o valor da causa e, se for o caso, demonstrativo discriminado e atualizado do crédito, nos termos da lei, notadamente o disposto nos incisos II, III, IV, V e VI, do art. 524, do Código de Processo Civil, observadas as especificidades de cada modalidade de cumprimento de sentença.
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                § 1º O requerimento dirigido ao juízo competente deverá estar acompanhado de reproduções digitalizadas das seguintes peças do processo, cuja originalidade deverá ser declarada na petição pelo(a) advogado(a) signatário(a), sob sua responsabilidade pessoal (NCPC, art. 522, Parágrafo único), observado o disposto no art. 425, VI, do Código de Processo Civil, considerando-se, como requisitos de autenticidade, integridade e validade jurídica dos documentos apresentados em formato eletrônico, a assinatura digital efetivada no momento do protocolo do peticionamento eletrônico com a utilização de certificado digital emitido por autoridade integrante infraestrutura de chaves públicas unificada nacionalmente da (ICP-Br):
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                a) documentos pessoais das partes;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                b) sentença ou decisão a ser liquidada ou executada;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                c) certidão de interposição de recurso não dotado de efeito suspensivo, quando se tratar de cumprimento provisório de sentença ou decisão;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                d) certidão de trânsito em julgado, quando se tratar de cumprimento definitivo de sentença;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                e) acórdão, se houver;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                 f) decisão de habilitação, se for o caso;
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                g) procuração(ões) outorgada(s) pela(s) parte(s);
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                h) facultativamente, outras peças consideradas necessárias para permitir a exata compreensão da sentença a ser liquidada, ou para demonstrar a existência do crédito, no caso de cumprimento de sentença; e
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                i) documentos que comprovem a data da citação, quando os juros fixados tiverem incidência partir da citação (Súmula 54 STJ).
                            </elemento></elemento></elemento>
                            <elemento tag="tr" scope="NONE" class="QlTbRow"><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1 AlignCenter">(  )</elemento></elemento><elemento tag="td" scope="NONE"><elemento tag="p" scope="NONE" class="p FntMod1">
                                Art. 4º No prazo de 05 (cinco) dias, contado do protocolo previsto no art. 1º desta Portaria, o(a) advogado(a) da parte credora encaminhará petição endereçada aos autos do processo físico referência, comunicando o peticionamento eletrônico do requerimento de liquidação, cumprimento provisório ou definitivo da sentença ou decisão, acompanhada de cópia física do protocolo no PJe-TJMA.
                            </elemento></elemento></elemento>
                            <!-- FIM DOS ITENS DA CETIDÃO -->
                        </elemento>
                    </elemento>   
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt3cm marginAtoJudicial" >
                        #:B{CERTIFICO}, #:B{ainda}, que, nos termos do § 2º do art. 2º da Portaria Conjunta 52017, “os documentos devem ser digitalizados em arquivos no formato PDF (portable document format), com resolução máxima de 300 dpi e formatação A4, não superior a 5,0 megabytes (Mb), em conformidade com o disposto no art. 13, da Resolução nº 52/2013, do TJMA.” e que, conforme o § 3º do mesmo artigo, “o juiz que atuar nos autos do processo eletrônico poderá determinar que, além dos documentos relacionados no § 1º deste artigo, a parte promova a digitalização e juntada aos autos digitais de outras peças do processo autuado em suporte físico que interessem à compreensão e/ou resolução do procedimento instaurado em suporte digital.”
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        
        <item id="certItAlvaraRemessaEmail" label="Remessa via e-mail" dataPlus="{ 'descricaoAppend': 'Remessa Alvará via e-mail' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data foi/foram #:B{enviado(s) o(s) alvará(s) #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, via e-mail, para o Banco do Brasil}, para fins de crédito na conta informada, no prazo de 3(três) dias úteis.
                </data>
            </itemContent>
        </item>   
        
        
        <item id="certItAlvaraCumrpimentoBB" label="Cumprimento Alvará" dataPlus="{ 'descricaoAppend': 'Cumprimento Alvará' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o Banco do Brasil informou a este juízo via e-mail ter dado cumprimento ao(s) Alvará(s) Judicial(is) #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>   
        
        <item id="certItAlvaraProcuracaoSemPoderes" label="Procuração sem poderes específicos" dataPlus="{ 'descricaoAppend': 'Procuração sem poderes específicos para receber e dar quitação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, em atenção ao pedido de expedição de alvará judicial e à 
                    indicação de conta do advogado para fins de crédito destinado ao autor, que #:B{na procuração 
                    constante no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.  não há concessão de poderes específicos para receber e dar quitação},  
                    conforme art. 132, §1º, do Código de Normas da CGJ e da Portaria TJ 14232020, razão pela qual 
                    encaminhei os autos para expedição de ato ordinatório.
                </data>
            </itemContent>
        </item> 
        
        <item id="certItAlvaraEntregaParte" label="Selamento e Entrega a Parte" dataPlus="{ 'descricaoAppend': 'Entrega de Alvará' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o Alvará Judicial #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi devidamente selado com #:B{ato judicial gratuito de nº XXXNumeroDoSeloXXXX} e entregue à Parte Demandante XXXDemandanteXXX.
                </data>
            </itemContent>
        </item>        
        <item id="certItAlvaraEntregaAdvogado" label="Selamento e Entrega ao Advogado" dataPlus="{ 'descricaoAppend': 'Entrega de Alvará' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o Alvará Judicial #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi devidamente selado com #:B{ato judicial gratuito de nº XXXNumeroDoSeloXXXX} e entregue a(o) advogado(a) XXXXAdvogadoXXX.
                </data>
            </itemContent>
        </item>         
        <item id="certItAlvaraEntregaAdvogadoHabilitado" label="Selamento e Entrega ao Advogado Habilitado" dataPlus="{ 'descricaoAppend': 'entrega de Alvará' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o Alvará Judicial #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi devidamente selado com #:B{ato judicial gratuito de nº XXXNumeroDoSeloXXXX} e entregue a(o) advogado(a) XXXXAdvogadoXXX, #:B{advogado(o) devidamente habilitados nos presentes autos por procuração subscrita pela parte demandante}.
                </data>
            </itemContent>
        </item>         
        <item id="certItAdvogadoHabilitado" label="Advogado Habilitado" dataPlus="{ 'descricaoAppend': 'Advogado habilitdo' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que o(a)(s) advogado(a)(s) XXXXXXXAdvogadosXXXXXXX está(ão) devidamente habilitado(a)(s) nos presentes autos, acima epigrafados.
                </data>
            </itemContent>
        </item>  
        <item id="certItLiminarConcessao" label="Liminar concessão" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a parte #:B{#{j2.env.PJeVars.partes.ativa.nome}} compareceu a Secretaria Judicial deste Juizado Especial Cível, tendo sido o(a) mesmo(a) devidamente #:U{#:B{INTIMADO(A)}} da Decisão #:span@docId{}sobre a Concessão da Medida Liminar.
                </data>
            </itemContent>
        </item>        
        <item id="certItLiminarNaoConcessao" label="Liminar - não concessão" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a parte #:B{#{j2.env.PJeVars.partes.ativa.nome}} compareceu a Secretaria Judicial deste Juizado Especial Cível, tendo sido o(a) mesmo(a) devidamente #:B{#:U{INTIMADO(A)}} da Decisão #:span@docId{}sobre a #:B{não} Concessão da Medida Liminar.
                </data>
            </itemContent>
        </item>         
        <item id="certItSentenca" label="Sentença" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a parte #:B{#{j2.env.PJeVars.partes.ativa.nome}} compareceu a Secretaria Judicial deste Juizado Especial Cível, tendo sido o(a) mesmo(a) devidamente #:B{#:U{INTIMADO(A)}} de toodo o teor da Sentenaça #:span@docId{}proferida.
                </data>
            </itemContent>
        </item>                                                 
        <item id="certItNaoIntEndDeconhecido" label="Não intimação endereço desconhecido" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que deixei de expedir intimação a(o) #{j2.env.PJeVars.processo.polos.passivo} em razão de ser deconhecido seu endereço, conforme compulsados os autos.
                </data>
            </itemContent>
        </item>                                                 
        <item id="certItNaoIntRevelia" label="Não intimação por revelia" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que deixei de expedir intimação a(o) #{j2.env.PJeVars.processo.polos.passivo} em razão da decretação de sua #:B{REVELIA} nos presentes autos.
                </data>
            </itemContent>
        </item>
        <item id="certItNaoIntNaoCitacao" label="Não intimação por nao citação" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que deixei de expedir intimação a(o) #{j2.env.PJeVars.processo.polos.passivo} em razão de a(s) mesma(s) não ter(em) sido intimada(s) para os presentes autos.
                </data>
            </itemContent>
        </item>
        <item id="certItSuspensTelemar" label="Suspensão Execução Gupo Oi/Telemar" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que em decisão prolatada nos autos da recuperação judicial n. 
                    0203711-65.2016.8.19.0001 da 7ª Vara Empresarial da Comarca do Rio de Janeiro foi prorrogada a 
                    suspensão das execuções/cumprimento de sentença em desfavor da requerida, sendo o novo prazo de 180 
                    (cento e oitenta) dias úteis, contados de 17/05/2017.
                </data>
            </itemContent>
        </item>
        <item id="certItPublicacaoDJe" label="Publicação diário" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que a #:B{#:U{INTIMAÇÃO #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} }}foi devidamente publicada no Diário da Justiça eletrônico conforme informações abaixo. #:BR{} #:BR{}
                    XXXinformaçõesPublicação
                    #:BR{}
                    #:BR{}
                </data>
            </itemContent>
        </item>
        
        <item id="certItWhatsAppLeitura" label="Leitura" dataPlus="{ 'descricaoAppend': 'Leitura WhatsApp' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a intimação #:B{#:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}} foi devidamente #:B{#:U{lida}} pela parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}} #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} através do aplicativo #:I{WhatsApp} em #:B{#:span@certItWhatsAppLeitura-prazoExtenso{XXXDataXXX}}. 
                </data>
            </itemContent>
        </item>
        
        <item id="certItWhatsAppLeituraNao" label="Sem Leitura" dataPlus="{ 'descricaoAppend': 'Sem Leitura WhatsApp' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que a intimação #:B{#:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}} não foi efetivada em razão da #:B{#:U{ausência de registro de leitura}} 
                    pela parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}} #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} no aplicativo #:I{WhatsApp} no prazo assinalado pelo Portaria conjunta 11/2017. 
                </data>
            </itemContent>
        </item>      
              
        <item id="certItWhatsAppLeituraArt6" label="Leitura Art. 6º" dataPlus="{ 'descricaoAppend': 'Leitura WhatsApp - Art. 6º' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            Certifico nesta data que a intimação #:B{#:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}} 
                            foi considerada como realizadas para a parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}} #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} em #:B{#:span@certItWhatsAppLeituraArt6-prazoExtenso{XXXDataXXX}}, conforme disposição do do Art. 6º 
                            da 
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 11/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/xftvuewiw98lyyj/PORTARIA-CONJUNTA%20-%20112017%20-%20intima%C3%A7%C3%A3o%20por%20WhatsApp.pdf?raw=1', 'popPC112017', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Portaria Conjunta 11/2017
                                <elemento tag="img" scope="NONE" id="docSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/xftvuewiw98lyyj/PORTARIA-CONJUNTA%20-%20112017%20-%20intima%C3%A7%C3%A3o%20por%20WhatsApp.pdf?raw=1', 'popPC112017', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            .
                        </elemento>    
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>      
        <item id="certItWhatsAppLeituraArt6ccPC142020" label="Leitura Art. 6º c/c Portaria Conjunta COVID-19" dataPlus="{ 'descricaoAppend': 'Leitura WhatsApp - Art. 6º c/c Portaria Conjunta COVID-19' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        <elemento tag="span" scope="NONE">
                            Certifico nesta data que a intimação #:B{#:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}} 
                            foi considerada como realizadas para a parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}} #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} em #:B{#:span@certItWhatsAppLeituraArt6ccPC142020-prazoExtenso{XXXDataXXX}}, conforme disposição do do Art. 6º 
                            da 
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 11/2017"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/xftvuewiw98lyyj/PORTARIA-CONJUNTA%20-%20112017%20-%20intima%C3%A7%C3%A3o%20por%20WhatsApp.pdf?raw=1', 'popPC112017', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Portaria Conjunta 11/2017
                                <elemento tag="img" scope="NONE" id="docSpan.view">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/xftvuewiw98lyyj/PORTARIA-CONJUNTA%20-%20112017%20-%20intima%C3%A7%C3%A3o%20por%20WhatsApp.pdf?raw=1', 'popPC112017', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            , cumulado com o Art. 6º, §2º da
                        </elemento>
                        <elemento tag="span" scope="NONE"> 
                            <textHTML scope="NONE">
                                <data>
                                    <![CDATA[<SPAN name="sep">&nbsp;</SPAN>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="NONE" id="docSpan">
                            <HTMLAttribute name="title" value="Abrir Portaria Conjunta 14/2020"/>
                            <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/1ou8ugxoxr3carp/PORTARIA-CONJUNTA%20-%20142020%20-%20Suspens%C3%A3o%20COVID-19%29.pdf?raw=1', 'popPC142020', 'width=780, height=740, scrollbars=yes').focus();"/>
                            <HTMLAttribute name="style" value="cursor: pointer;"/>
                            <elemento tag="u" scope="NONE">
                                Portaria Conjunta 14/2020
                                <elemento tag="img" scope="NONE" id="docSpan.view.142020">
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                    <HTMLAttribute name="style" value="-align: bottom; height: 12px;"/>
                                    <HTMLAttribute name="onclick" value="window.open('https://www.dropbox.com/s/1ou8ugxoxr3carp/PORTARIA-CONJUNTA%20-%20142020%20-%20Suspens%C3%A3o%20COVID-19%29.pdf?raw=1', 'popPC142020', 'width=780, height=740, scrollbars=yes').focus();"/>
                                </elemento>
                            </elemento>
                        </elemento>
                        <elemento tag="span" scope="NONE">
                            .
                        </elemento>    
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>              
        
        <item id="certItTempestividadeEmbargos" label="Embargos - tempestivo" dataPlus="{ 'descricaoAppend': 'Embargos de declaração tempestivos' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que os #:U{EMBARGOS DE DECLARAÇÃO} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foram interpostos #:B{TEMPESTIVAMENTE} pela parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}.
                </data>
            </itemContent>
        </item>       
        <item id="certItTempestividadeEmbargosIntempest" label="Embargos - intempestivo" dataPlus="{ 'descricaoAppend': 'Embargos de declaração intempestivos' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que os #:U{EMBARGOS DE DECLARAÇÃO} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foram interpostos #:B{INTEMPESTIVAMENTE} pela parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}.
                </data>
            </itemContent>
        </item>       
        
        <item id="certItPrazoSemCump" label="Decurso sem Cumpriento" dataPlus="{ 'descricaoAppend': 'Prazo decorrido' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, nesta data, que #:U{#:span@certItPrazoSemCump-prazoExtenso{} decorreu #:I{in albis} o prazo} para a parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                  #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} dar cumprimento à #:B{intimação/determinação #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}}.
                </data>
            </itemContent>
        </item>
        <item id="certItPrazoInAlbisManifEmbExec" label="Decurso Manifestação Embargos à Execução" dataPlus="{ 'descricaoAppend': 'Prazo decorrido' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que  #:B{fluiu sem manifestação o prazo para Embargos à Execução} (art. 915 do CPC/2015), conforme comprovação de intimação contido no  #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>
        <item id="certItPrazoRegular" label="Regularidade Prazo" dataPlus="{ 'descricaoAppend': 'Tramitação regular, prazo em curso' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que os presentes autos se encontram em regular tramitação aguardando decurso de prazo.
                </data>
            </itemContent>
        </item>
        <item id="certItPrazoInAlbis" label="Sem manifestação" dataPlus="{ 'descricaoAppend': 'Prazo decorrido' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que #:U{decorreu #:I{in albis} o prazo} para parte manifestar-se, conforme à #:B{intimação/determinação #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}}.
                </data>
            </itemContent>
        </item>
        
                        
        <item id="certItTempestividadeRecurso" label="Recurso Inominado - tempestivo" dataPlus="{ 'descricaoAppend': 'Recurso Inominado tempestivo' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o #:U{RECURSO INOMINADO} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi interposto #:B{TEMPESTIVAMENTE} pela parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}.
                </data>
            </itemContent>
        </item>   
        <item id="certItTempestividadeRecursoIntepest" label="Recurso Inominado - intempestivo" dataPlus="{ 'descricaoAppend': 'Recurso Inominado intempestivo' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o #:U{RECURSO INOMINADO} #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi interposto #:B{INTEMPESTIVAMENTE} pela parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}}..
                </data>
            </itemContent>
        </item>     
        <item id="certItRemessaPorAR" label="Expediente Rmessa AR" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o expediente sob #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} foi remetida à Empresa de Correios e Telégrafos sob o Aviso de Recebimento abaixo consignado.
                </data>
            </itemContent>
        </item>    
        
        <item id="certItDesentranhamento" label="Desentranhamento" dataPlus="{ 'descricaoAppend': 'Desentranhamento' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que o #:U{documento/expediente XXXXDescriçãoEIdXXXX} foi #:B{DESENTRANHADO} dos presentes autos em razão de erro material praticado no referido documento.
                </data>
            </itemContent>
        </item>  
         
        <item id="certItRetificacaoOrdemJudicial" label="Por ordem judicial" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que em cumprimento à determinação judicial constante no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} 
                    procedi á #:B{#:U{RETIFICAÇÃO}} dos autos realizando XXXXDescricaoXXX.
                </data>
            </itemContent>
        </item>     
        <item id="certItRetificacaoOrdinatorio" label="Por ato ordinatório" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico nesta data que por ser ato meramente ordinatório delegada á Secretaria Judicial - Provimento 01/2007-CGJ-MA -
                    procedi À #:B{#:U{RETIFICAÇÃO}} dos autos realizando XXXXDescricaoXXX.
                </data>
            </itemContent>
        </item>     
                
        <item id="certItAudCancelamento" label="Cancelamento" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nesta data em cumprimento ao que consta no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} realizei o #:B{#:U{CANCELAMENTO} da audiência} de #{j2.env.PJeVars.audiencia.tipo} designada no presente feito para #{j2.env.PJeVars.audiencia.data}.
                </data>
            </itemContent>
        </item>    
          
        <item id="certItAudDesignacao" label="Designação" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nesta data em cumprimento ao que consta no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} realizei a #:B{#:U{DESIGNAÇÃO} da audiência} de #{j2.env.PJeVars.audiencia.tipo} no presente feito para #{j2.env.PJeVars.audiencia.data}.
                </data>
            </itemContent>
        </item>     
         
        <item id="certItAudRedesignacao" label="Redesignação" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nesta data em cumprimento ao que consta no #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} realizei a #:B{#:U{REDESIGNAÇÃO} da audiência} de #{j2.env.PJeVars.audiencia.tipo} no presente feito para #{j2.env.PJeVars.audiencia.data}.
                </data>
            </itemContent>
        </item>      
        
        
        <item id="certItConclusao" label="Para Conclusão" dataPlus="{ 'descricaoAppend': 'Conclusão' }">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que no(s) #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}} consta(m) XXXTextoLivreXXX.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Desse modo, remeto os autos conclusos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.doutor} #:B{#{j2.env.PJeVars.unidade.juiz.nome}} para deliberação.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        <item id="certItConclusaoRegularizarAtoJudicial" label="Para Conclusão | Regularizar decisão/despacho/decisão" dataPlus="{ 'descricaoAppend': 'Conclusão' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Nesta data, remeto os autos conclusos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.doutor} #:B{#{j2.env.PJeVars.unidade.juiz.nome}}, para fins de regularização do #:b{código} do(a) último(a) despacho/decisão/sentença proferido nos autos.
                </data>
            </itemContent>
        </item>   
        <item id="certItConclusaoRegularizarSuspensao" label="Para Conclusão | Regularizar Suspensão" dataPlus="{ 'descricaoAppend': 'Conclusão' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Nesta data, remeto os autos conclusos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.doutor} #:B{#{j2.env.PJeVars.unidade.juiz.nome}}, para fins de regularização do código da suspensão do processo, conforme OFC-GDJAP – 222018, expedido pela Supervisão dos Juizados Especiais.
                </data>
            </itemContent>
        </item>   
        
        <item id="certItErroPje" label="Erro PJe" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que os presentes autos só foram movimentados nesta data em face da #:B{falha apresentada no sistema PJE}, que após o decurso do prazo moveu o processo de forma automática para a tarefa equivocada, qual seja, “analisar manifestação parcial”, ao invés da tarefa correta, que seria “verificar providências a adotar”. 
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que em 15/01/2019 foi comunicado o equívoco ao setor de Suporte ao PJE (tarefa 387810) e solicitadas providências para regularização. 
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>   
        
        <item id="certItPrazoAbandono" label="Abandono" dataPlus="{ 'descricaoAppend': 'Abandono' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico ainda que desde sua intimação, #:U{decorridos mais de 30 (trinta) dias} até a presente data, deixou a parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} de promover o andamento do presente feito.
                </data>
            </itemContent>
        </item>      
        
        <item id="certItIntimacaoTelefoneInfrutifera" label="Intimação por Telefone Infrutífera" dataPlus="{ 'descricaoAppend': 'Intimação via telefone infrutífera' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que nesta data #:B{restou infrutífera} a tentativa de intimação da parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} por telefone no(s) número(s) 
                    #:U{#:span@pessoa-meiosContato-telefone-txt{#{j2.mod.clsCnstr.SeletorPessoa.selected.meiosContato._}}} 
                    indicados pela parte e constante nos autos e sistema PJe.
                </data>
            </itemContent>
        </item>        

        <!-- ITENS RENAJUD -->
        <item id="certItRENAJUDExistencia" label="Existência" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:B{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte #{j2.env.PJeVars.processo.polos.partePassiva} e, na oportunidade, #:B{incluída(s) sua(s) restrição(ões)} veicular, conforme tela em anexo.
                </data>
            </itemContent>
        </item>
        <item id="certItRENAJUDInexistencia" label="Inexistência" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:B{INEXISTÊNCIA} de veículos registrados no CPF/CNPJ da parte executada, conforme tela de consulta em anexo.
                </data>
            </itemContent>
        </item>
        
        <item id="certItRENAJUDSemAlienSemBloq" label="Sem Alienação | Sem Bloqueio" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:B{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte executada e, na oportunidade, #:B{incluída(s) sua(s) restrição(ões)} veicular, conforme tela em anexo.
                </data>
            </itemContent>
        </item>
        
        <item id="certItRENAJUDRemocao" label="Remoção restrição" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data foi realizada #:B{remoção de restrição no sistema RenaJud}, referente aos presentes autos, conforme tela em anexo.
                </data>
            </itemContent>
        </item>
        
        
        <item id="certItRENAJUDSemAlienComBloq" label="Sem Alienação | Com Bloqueio" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:B{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte executada, veículo(s) #:B{já com restrição(ões)} incluída(s) por outro(s) juízo(s).
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico ainda que na oportunidade foi(ram) #:B{incluída(s) sua(s) restrição(ões)} veicular, conforme tela em anexo.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        <item id="certItRENAJUDSemAlienComPenhr" label="Sem Alienação | Com Penhora" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:U{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte executada. Contudo, o(s) mesmo(s) #:U{possui(em) penhora(s)} já efetivada(s) por outras unidades jurisdicionais, motivo pelo qual a #:B{restrição veicular não foi efetivada}.
                </data>
            </itemContent>
        </item>
        <item id="certItRENAJUDComAlien" label="Com Alienação" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:U{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte executada. Contudo, o(s) mesmo(s) possui(em) #:U{alienação fiduciária}, e por tratar-se de hipótese de propriedade resolúvel sob a titularidade da instituição financiadora do bem, a #:B{restrição veicular não foi efetivada}.
                </data>
            </itemContent>
        </item>
        <item id="certItRENAJUDComAlienBloq" label="Com Alienação/Bloqueio" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a existência de veículo(s) registrado(s) no CPF/CNPJ da parte #{j2.env.PJeVars.processo.polos.partePassiva}. Contudo, o(s) mesmo(s) possui(em) alienação fiduciária e, portanto, a #:B{restrição veicular não foi efetivada}.
                </data>
            </itemContent>
        </item>
        <item id="certItRENAJUDComAlienComBloqueio" label="Com Alienação | Com Bloqueio" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:U{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte executada. Contudo, o(s) mesmo(s) #:U{possui(em) bloqueio(s) de outro(s) juízo(s) e alienação fiduciária}, que por tratar-se de hipótese de propriedade resolúvel sob a titularidade da instituição financiadora do bem, a #:B{restrição veicular não foi efetivada}.
                </data>
            </itemContent>
        </item>
        <item id="certItRENAJUDComAlienComPenhr" label="ComAlienação | Com Penhora" dataPlus="">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico para os devidos fins que, em consulta ao sistema #:B{RenaJud}, foi constatada a #:U{existência} de veículo(s) registrado(s) no CPF/CNPJ da parte executada. Contudo, o(s) mesmo(s) #:U{possui(em) penhora(s) já efetivada(s) de outro(s) juízo(s) e alienação fiduciária}, que por tratar-se de hipótese de propriedade resolúvel sob a titularidade da instituição financiadora do bem, a #:B{restrição veicular não foi efetivada}.
                </data>
            </itemContent>
        </item>
        
        <item id="certItSemRequerimentoSemJusticaGratuita" label="Conclusão Deliberação Justiça Gratuita" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que na petição inicial consta(m) pedido de concessão de assistência judiciária gratuita, ainda não apreciado.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Desse modo, remeto os autos conclusos #{j2.env.PJeVars.unidade.juiz.ao} #{j2.env.PJeVars.unidade.juiz.doutor} #:B{#{j2.env.PJeVars.unidade.juiz.nome}} para deliberação.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        
        <item id="certItSemRequerimentoSemJusticaGratuita" label="Sem Requerimento - Sem Justiça Gratuita" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, para os devidos fins, que na petição inicial XXXIdInicialXXX não consta pedido de concessão do benefício da justiça gratuita, razão pela qual na sentença XXXIdSentencaXXX não há deliberação a respeito.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que em face do quanto relatado acima do que consta no AVISOPJE-7VFPSL- 32018, retifiquei a atuação do processo para indicar que #:B{a parte não é beneficiária da justiça gratuita}.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item>
        
        <item id="certItCustasRecolhidas" label="Custas Recolhidas | Sem Custas" dataPlus="">
            <itemContent type="simpleElementsDefs" addtClassStyles="">
                <simpleElementsDefs> 
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, nesta data, que a parte #{j2.env.PJeVars.processo.polos.partePassiva} foi condenCada ao pagamento das custas processuais, conforme acórdão XXXIdAcórdãoXXX.
                    </elemento>
                    <elemento tag="p" scope="NONE" class="p FntModDefault Indnt1cm marginAtoJudicial" >
                        Certifico, ainda, que a parte recorrente/#{j2.env.PJeVars.processo.polos.partePassiva} pagou as custas processuais de preparo conforme XXXIdPreparoXXXX, não tendo havido publicações geradoras de custas após o retorno dos autos do segundo grau. Não há, portanto, custas pendentes de pagamento, razão pela qual encaminho os presentes autos à Secretaria Judicial para arquivamento.
                    </elemento>
                </simpleElementsDefs>
            </itemContent>
        </item> 
        
        <!-- VIDEOCONFERÊNCIA -->
        <item id="certItInviabilidadeTecnicaParteAtiva" label="Inviabilidade Técnica parte #{j2.env.PJeVars.processo.polos.parteAtiva}" dataPlus="{ 'descricaoAppend': 'Inviabilidade Técnica parte #{j2.env.PJeVars.processo.polos.parteAtiva}' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico que entrei em contato com a parte #{j2.env.PJeVars.processo.polos.parteAtiva}, passei informações sobre a possibilidade de 
                    realização da audiência designada nos autos por meio de  videoconferência, e a parte informou o seguinte: “XXXXInformaçõesParteXXX”
                </data>
            </itemContent>
        </item>  
        
        <item id="certItEncaminhamentoExpedicaoCartaDeIntimacao" label="Encaminhamento para expedição de carta de intimação" dataPlus="{ 'descricaoAppend': 'Encaminhamento para Expedição de carta de intimação' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, nesta data, em atenção ao teor da certidão do oficial de justiça do #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}, referente à citação por hora certa,  
                    #:B{encaminhei os autos para expedição de carta de intimação}, visando à formalização do ato, na forma prevista no art. 254 do CPC/2015.
                </data>
            </itemContent>
        </item> 
        
        <item id="certItTelefoneInclusao" label="Inclusão de Telefone" dataPlus="{ 'descricaoAppend': 'Inclusão de contato telefônico' }">
            <itemContent type="plainText" addtClassStyles="">
                <data>
                    Certifico, para os devidos fins, que nesta data efetuei a inclusão do contato telefônico 
                    da parte #:span@pessoa-polo-parte-LCase{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.LCase}}
                    #:B{#:span@selParte{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} 
                    no PJE, qual seja número #:U{#:span@pessoa-meiosContato-telefone-txt{#{j2.mod.clsCnstr.SeletorPessoa.selected.meiosContato._}}} 
                    em atenção à certidão do #:span@docId{#:span@docIdDefaulttext{XXXXIdXXXX}}.
                </data>
            </itemContent>
        </item>        
    </items>
  </selectorDef>
</Definitions>
"
};