window.j2.res.XML.addtionalControlsClsDef.xmlEncode = {      
  load : "<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 ASS: Litigância de má fé
 DOC: 5428980
 MOD: BaseClasses.xml
  
 Contém definições dos módulos bases para modelos
-->
<Definitions id="classeDefs" targetNamespace="http://j2" xmlns="http://j2" xsi:schemaLocation='http://j2 ../XML/j2.xsd' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
    
    <classeDef id="General.DatePicker">
        <versao id="1.0">
            <elemento tag="div" scope="EDT" id="General-DatePicker-Div" >
                <elemento tag="input" scope="EDT" id="General-DatePicker-input" class="p edtCtrl FntDocEdt AlignCenter width100">
                    <HTMLAttribute name="type" value="text"/>
                    <HTMLAttribute name="placeholder" value="Data"/>
                    <HTMLAttribute name="align" value="middle"/>
                </elemento>     
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="WhatsAppInputs">
        <versao id="1.0">
            <elemento tag="div" scope="EDT" id="WhatsAppInputs.Div" >
                <elemento tag="input" scope="EDT" id="ParteNome" class="p edtCtrl FntDocEdt AlignCenter width100">
                    <HTMLAttribute name="type" value="text"/>
                    <HTMLAttribute name="notDotBefore" value="."/>
                    <HTMLAttribute name="placeholder" value="Nome/Nome Fantasia/Razão Social"/>
                    <HTMLAttribute name="align" value="middle"/>
                </elemento>     
                <elemento tag="input" scope="EDT" id="ParteCPF" class="p edtCtrl FntDocEdt AlignCenter width100">
                    <HTMLAttribute name="notDotBefore" value="."/>
                    <HTMLAttribute name="type" value="text"/>
                    <HTMLAttribute name="placeholder" value="CPF"/>
                    <HTMLAttribute name="align" value="middle"/>
                </elemento>            
                <elemento tag="input" scope="EDT" id="ParteWA1" class="p edtCtrl FntDocEdt AlignCenter width100">
                    <HTMLAttribute name="notDotBefore" value="."/>
                    <HTMLAttribute name="type" value="text"/>
                    <HTMLAttribute name="placeholder" value="WhatsApp"/>
                    <HTMLAttribute name="spanOnlyFilled" value="."/>
                    <HTMLAttribute name="align" value="middle"/>
                </elemento>        
                <elemento tag="input" scope="EDT" id="ParteWA2" class="p edtCtrl FntDocEdt AlignCenter width100">
                    <HTMLAttribute name="type" value="text"/>
                    <HTMLAttribute name="placeholder" value="WhatsApp 2"/>
                    <HTMLAttribute name="spanOnlyFilled" value="."/>
                    <HTMLAttribute name="align" value="middle"/>
                    <HTMLAttribute name="disabled" value=""/>
                </elemento>
                <elemento tag="span" scope="EDT" id="buttGenDecWASpan" >
                    <elemento tag="button" id="buttonGenDecWA" class="p FntModeEditor width100 edtCtrl" scope="EDT">
                        <HTMLAttribute name="disabled" value=""/>
                        <elemento tag="p" class="p FntModeEditor width100 AlignCenter" scope="EDT">
                            Gerar Declaração WhatsApp
                        </elemento>
                    </elemento>
                </elemento>    
            </elemento>                                                                                                                                                                                                                                                                                                                                                                                              
        </versao>
    </classeDef>
    
    <classeDef id="ControlesJuntadaAR">
        <versao id="3.0">
            <elemento tag="div" scope="EDT" id="ControlesJuntadaAR.Div" >
                <!--AR.EdtControles#Action"-->
                
                <elemento tag="button" scope="EDT" id="Termo.ControlesAR.PrepararButton" class="p FntModeEditor width100 edtCtrl AlignCenter" >
                    Preparar Termo de Juntada
                </elemento>
                
                <elemento tag="div" scope="EDT" >
                    <HTMLAttribute name="style" value="height:90px;overflow:hidden"/>
                    <elemento tag="div" scope="EDT" id="ControlesJuntadaAR.Div.Edit" class="ControlesJuntadaAR zoomHalf ControlesJuntadaAR.Inactive">
                        <elemento tag="p" scope="EDT" id="buttGenDecWASpan" class="p FntModeEditor width100 AlignCenter zoomedEdtP">
                            Coloar Histórico de AR aqui
                        </elemento>    
                    </elemento>
                </elemento>
                
                <elemento tag="button" scope="EDT" id="ControlesJuntadaAR.ExtrFormButton" class="p FntModeEditor width100 edtCtrl AlignCenter" >
                    <HTMLAttribute name="disabled" value="true"/>
                    Extrair e Formatar Rastreamento
                </elemento>
            </elemento>                                                                                                                                                                                                                                                                                                                                                                                                  
            <!--elemento tag="div" scope="EDT" id="regInShortCuts" class="@Hidden">
                <elemento tag="button" scope="EDT" id="AR.EdtControles#Action" class="regIntIcon">
                    <HTMLAttribute name="title" value="{...}"/>
                    <elemento tag="img" scope="EDT" class="regIntIconHeight">
                        <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2hpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2NDcwRjIzQTIxMjA2ODExODA4MzkwODQwNjdDNDY4QyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo2QzREQUIwMjQ0NjUxMUU2QTA2NzhENEUxN0YyNUFCQyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2QzREQUIwMTQ0NjUxMUU2QTA2NzhENEUxN0YyNUFCQyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QzZFOEI1ODcxMzIwNjgxMTgwODNFNzM0RTc0NUQ1NUUiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NjQ3MEYyM0EyMTIwNjgxMTgwODM5MDg0MDY3QzQ2OEMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4QI/rfAAAEDElEQVR42uybTWgTQRTH335k89VWW21rkeJXD609CEVFPBQFwYP1IHjxIngSoeDBQxUPetEiBUEUb/WuxYP2oGAVBCl6lHqo9FBsxQ8spKYxm+yn8zZN3LTJ7jQrnXzMCw8SupPs+83Om/+bmQq2bUMjmwgNbhwAB8ABcAAcAAfQwCbn33z5noDRR1MgCALgy8NOE79QpfFoxIeJL5W7QM3qcH7oIBw/1FMMYDmpwtM3MyASAOge1kf8TBV36ogXgGQqA0cP7F4PQBQFaIoqTvCCNwDN/cGybMAXszEsiOC63TTektf1eL8hWVo/BCq1SFgGSWSXSjTdBNOygueASgzH063hUzA4sIcZgOsPXsDL6VmIRUKbDwAryfbWOHRtb2EGAAMPUtEGfnYN0wKWhmOa6wAOYHMB6O4PSkhiGkCJGUitNAnGie+naLPPrR3mFpZgW0uMGYDEStq5D1eHHiH+06fZQv4aN4B+4h82pAGUEIyOTzEXQtFwYQqMEJ+kaHaF+N21AGz3G8MwKadCtmPYEujuU5JEt8S3y+oA/EuIjKuO9iY/SVwzhmEsr6iQyer+AAzDgs62Fhi/eQ6aY2EIYZKj7WUh1z6rG1BN6CJELF27Nwmv3s/SKUEk1hwPQyajw/TH+dyjQxERiqKd7Vugb+8OMBkLJLdFCQAcAhuSwgqpmKY/z8Ol20/cScbT/qgaDA32w/2rZ0mRYlQNACyWysll2Su5Yc9j8LQA8Eew1Kyl3SbZYziDRQLRyWwgS3R6Ca81qujRDwQAg2+KhqG7sxXCCl3RqGY16GhrBrDrAADW+gO93TAxRr/850yh5GnJaEbtA8hL3VhE2fAagVUPOSAfTJDlppoFgAoQxz1q/XoAECGzmChS6gAMHufwmblvOQB27QPAzvydUp0hbZq2NwBZEiCRTBMBNFFHD7rtVI3YobqeLQtAKC4zhdW8LvjIX5Np0pMlyW8jpyDv3cVhKQCIZrG4QckvJhM9bM0nSZz3I4rMDEAiqTr6Y7VyxZ74gf2yXtYV2XIpADPEeyl+E/fe7uS1wo2LJ+HE4R5mAC6PPYPnbz9BPOpM1xnix4h/9WmmlQKA2S5N8ZuZ4gwrO1mW3RAQ12qxFGUcuaFeySpUkWS22IqeEoWXVHEwjWgcAAfAAXAAHAAHwAFwABVbrW+f/QcAbAMI2gGB6tjc9vhrePj4HTMAeMI1GqAYCwQgd0DiF9N1QyWE5xSF4ACwqMJDhxiUz2MlrV1rkCR2uRThuzajFPBZwsIY3RWs/I+kBLu6WmmOyuJqymKV5jQ8H+S5K5NSNWfnu9B/+Xoa1/WyGtW+vrxKGqoYQtlFCmf3SpYKCykC/79BLoQ4AA6AA+AAOICGtb8CDACG00BI6aEGLAAAAABJRU5ErkJggg=="/>
                    </elemento>
                </elemento> 
                <elemento tag="button" scope="EDT" id="AR.EdtControles#Action" class="regIntIcon">
                    <HTMLAttribute name="title" value="{...}"/>
                    <elemento tag="img" scope="EDT" class="regIntIconHeight">
                        <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2hpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2NDcwRjIzQTIxMjA2ODExODA4MzkwODQwNjdDNDY4QyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo2QzREQUIwMjQ0NjUxMUU2QTA2NzhENEUxN0YyNUFCQyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2QzREQUIwMTQ0NjUxMUU2QTA2NzhENEUxN0YyNUFCQyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QzZFOEI1ODcxMzIwNjgxMTgwODNFNzM0RTc0NUQ1NUUiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NjQ3MEYyM0EyMTIwNjgxMTgwODM5MDg0MDY3QzQ2OEMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4QI/rfAAAEDElEQVR42uybTWgTQRTH335k89VWW21rkeJXD609CEVFPBQFwYP1IHjxIngSoeDBQxUPetEiBUEUb/WuxYP2oGAVBCl6lHqo9FBsxQ8spKYxm+yn8zZN3LTJ7jQrnXzMCw8SupPs+83Om/+bmQq2bUMjmwgNbhwAB8ABcAAcAAfQwCbn33z5noDRR1MgCALgy8NOE79QpfFoxIeJL5W7QM3qcH7oIBw/1FMMYDmpwtM3MyASAOge1kf8TBV36ogXgGQqA0cP7F4PQBQFaIoqTvCCNwDN/cGybMAXszEsiOC63TTektf1eL8hWVo/BCq1SFgGSWSXSjTdBNOygueASgzH063hUzA4sIcZgOsPXsDL6VmIRUKbDwAryfbWOHRtb2EGAAMPUtEGfnYN0wKWhmOa6wAOYHMB6O4PSkhiGkCJGUitNAnGie+naLPPrR3mFpZgW0uMGYDEStq5D1eHHiH+06fZQv4aN4B+4h82pAGUEIyOTzEXQtFwYQqMEJ+kaHaF+N21AGz3G8MwKadCtmPYEujuU5JEt8S3y+oA/EuIjKuO9iY/SVwzhmEsr6iQyer+AAzDgs62Fhi/eQ6aY2EIYZKj7WUh1z6rG1BN6CJELF27Nwmv3s/SKUEk1hwPQyajw/TH+dyjQxERiqKd7Vugb+8OMBkLJLdFCQAcAhuSwgqpmKY/z8Ol20/cScbT/qgaDA32w/2rZ0mRYlQNACyWysll2Su5Yc9j8LQA8Eew1Kyl3SbZYziDRQLRyWwgS3R6Ca81qujRDwQAg2+KhqG7sxXCCl3RqGY16GhrBrDrAADW+gO93TAxRr/850yh5GnJaEbtA8hL3VhE2fAagVUPOSAfTJDlppoFgAoQxz1q/XoAECGzmChS6gAMHufwmblvOQB27QPAzvydUp0hbZq2NwBZEiCRTBMBNFFHD7rtVI3YobqeLQtAKC4zhdW8LvjIX5Np0pMlyW8jpyDv3cVhKQCIZrG4QckvJhM9bM0nSZz3I4rMDEAiqTr6Y7VyxZ74gf2yXtYV2XIpADPEeyl+E/fe7uS1wo2LJ+HE4R5mAC6PPYPnbz9BPOpM1xnix4h/9WmmlQKA2S5N8ZuZ4gwrO1mW3RAQ12qxFGUcuaFeySpUkWS22IqeEoWXVHEwjWgcAAfAAXAAHAAHwAFwABVbrW+f/QcAbAMI2gGB6tjc9vhrePj4HTMAeMI1GqAYCwQgd0DiF9N1QyWE5xSF4ACwqMJDhxiUz2MlrV1rkCR2uRThuzajFPBZwsIY3RWs/I+kBLu6WmmOyuJqymKV5jQ8H+S5K5NSNWfnu9B/+Xoa1/WyGtW+vrxKGqoYQtlFCmf3SpYKCykC/79BLoQ4AA6AA+AAOICGtb8CDACG00BI6aEGLAAAAABJRU5ErkJggg=="/>
                    </elemento>
                </elemento> 
            </elemento-->
        </versao>
    </classeDef>
    
    <classeDef id="SentencaServicoTerceiro">
        <versao id="1.0">
            <elemento tag="div" id="SentencaServicoTerceiro.div" scope="EDT">
                <elemento tag="div" id="SST:DanoMaterial:Simples" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Valor do dano material fixado em sede de julgamento."/>
                            D.Material 
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="SentencaServicoTerceiro:DanoMaterial:Simples" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="12.354,75"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>

                <elemento tag="div" id="SST:DanoMaterial:dobro" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Valor da repetição do indébito. Calculado automaticamente com base no patamar fixado em dano material."/>
                            D.Material x 2
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="SentencaServicoTerceiro:DanoMaterial:Dobro" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="12.354,75"/>
                            <HTMLAttribute name="size" value="14"/>
                            <HTMLAttribute name="disabled" value="true"/>
                        </elemento>
                    </elemento>
                </elemento>

                <elemento tag="div" id="SST:DanoMoral" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Valor do dano moral fixado em sede de julgamento"/>
                            Dano Moral
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="SentencaServicoTerceiro:DanoMoral" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="12.354,75"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>
                
                <elemento tag="div" id="SST:DanoMoral" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Multa incidente sobre o descumprimento da confirmação da liminar por cada cobrança"/>
                            Multa
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="SentencaServicoTerceiro:MultaCominatoria" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="12.354,75"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
            
        </versao>
    </classeDef>
    <classeDef id="DecisaoCNRCEMAR">
        <versao id="1.0">
            <elemento tag="div" id="DecisaoCNRCEMAR.div" scope="EDT">
                <elemento tag="div" id="DST:Linhas" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Número da Unidade Consumidora objeto da lide."/>
                            Unidade Consumidora
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:UC" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="11630030"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>

                <elemento tag="div" id="DST:Linhas" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Competência da Fatura CNR objeto da lide."/>
                            Competência
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:CNR:competencia" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="05/2018"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>
                
                <elemento tag="div" id="SST:DanoMoral" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Valor da Fatura CNR objeto da lide"/>
                            Valor
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:CNR:valor" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="6.540,74"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
            
        </versao>
    </classeDef>
    <classeDef id="DecisaoServicoTerceiro">
        <versao id="1.0">
            <elemento tag="div" id="DecisaoServicoTerceiro.div" scope="EDT">
                <elemento tag="div" id="DST:DenominacaoServico" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="A denominação do serviço cobrado."/>
                            Denominação 
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="DecisaoServicoTerceiro:Denominacao" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="value" value="Serviços de Terceiros"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>

                <elemento tag="div" id="DST:Linhas" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Linhas objeto da lide"/>
                            Linha(s)
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="DecisaoServicoTerceiro:Linhas" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="(99) 99123-4567"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>

            </elemento>
            
        </versao>
    </classeDef>
    
    <classeDef id="DecisaoTarifaServicosBancarios">
        <versao id="1.0">
            <elemento tag="div" id="DecisaoTarifaServicosBancarios.div" scope="EDT">
                <elemento tag="div" id="DST:DenominacaoServico" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Denominação dos Serviços Bancários objeto da lide."/>
                            Denominacao Serviço 
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:servicos" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="value" value="CESTA DE SERVIÇOS"/>
                            <!--HTMLAttribute name="size" value="14"/-->
                        </elemento>
                    </elemento>
                </elemento>

                <!--elemento tag="div" id="DST:Linhas" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Linhas objeto da lide"/>
                            Linha(s)
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="DecisaoServicoTerceiro:Linhas" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="(99) 99123-4567"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento-->

            </elemento>
            
        </versao>
    </classeDef>
    
    <classeDef id="DecisaoFatoNegativo">
        <versao id="1.0">
            <elemento tag="div" id="DecisaoTarifaServicosBancarios.div" scope="EDT">
                <elemento tag="div" id="DST:DenominacaoServico" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Denominação do cobrança|fato negativo que é pleiteado a suspensão no presente processo."/>
                            Serviço | Cobrança 
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:servicos" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="CESTA DE SERVIÇOS"/>
                            <!--HTMLAttribute name="size" value="14"/-->
                        </elemento>
                    </elemento>
                </elemento>

                <elemento tag="div" id="DST:Linhas" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Informar onde as cobranças são relaizadas: fatura de consumo, fatura de cartão de crédito, extrato bancáiro, boleto bancário."/>
                            Cobrnça em
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:cobrancaEm" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeHolder" value="faturas de consumo"/>
                            <HTMLAttribute name="size" value="14"/>
                            <HTMLAttribute name="list" value="fields:cobrancaEm:list"/>
                        </elemento>
                    </elemento>
                </elemento>

            
            
                <elemento tag="datalist" scope="EDT" id="fields:cobrancaEm:list">
                  <elemento tag="option" value="boleto(s) bancário(s)" scope="EDT" />  
                  <elemento tag="option" value="detalhamento de débito" scope="EDT" />
                  <elemento tag="option" value="fatura(s) de cartão de crédito" scope="EDT" />  
                  <elemento tag="option" value="fatura(s) de consumo(s)" scope="EDT" /> 
                  <elemento tag="option" value="extrato(s) bancário(s)" scope="EDT" />

                </elemento>

                <elemento tag="div" id="SST:DanoMoral" class="dispTabl width100 edtCtrl" scope="EDT">
                    <elemento tag="div" class="dispTablCell width30" scope="EDT">
                        <elemento tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                            <HTMLAttribute name="title" value="Valor da Fatura CNR objeto da lide"/>
                            Multa
                        </elemento>
                    </elemento>
                    <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                        <elemento tag="input" id="fields:multa" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="value" value="200,00"/>
                            <HTMLAttribute name="size" value="14"/>
                        </elemento>
                    </elemento>
                </elemento>
                
            </elemento>
            
        </versao>
    </classeDef>
    
    <classeDef id="DecisaoJuizoAdmissibilidadeAutomatizado">
        <versao id="1.0">
            <elemento tag="div" id="DecisaoJuizoAdmissibilidadeAutomatizado-div" scope="EDT">
                <!--classe id="FieldSet" versao="1.0" scope="EDT">                           
                    <constructs param="newId" value="AJG" type="string"/>
                    <constructs param="fieldLabel" value="AJG" type="string"/>
                    <constructs param="fieldTitle" value="Definir a justiça gratuita ou não para o recorrente" type="string"/-->
                    
                    <classe id="Selector" versao="3.1" scope="EDT">
                        <constructs param="newId" value="juiAdssAJGItens" type="string"/>
                        <constructs param="linkedElement" value="decItJuizoAdmissibilidadeIterativa-span" type="string"/>
                        <!--constructs param="linkedElTag" value="UL" type="string"/-->

                        <constructs param="multiple" value="sim" type="bool"/>
                        <constructs param="onAddAction" value="default" type="string"/>
                        <constructs param="onDelAction" value="default" type="string"/>
                        <constructs param="source" value="#{j2.res.mod.decisaoJuizAdmissSelSrc}" type="bool"/>
                        <!--constructs param="linkedElStyleClasses" value="p unorderedOrderedList FntModDefault paddingLeft35mm" type="string"/-->
                    </classe> 
                <!--/classe-->
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="DespachoCumprimentoSentencaAutomatizado">
        <versao id="1.0">
            <elemento tag="div" id="DespachoCumprimentoSentencaAutomatizado-div" scope="EDT">
                <!--classe id="FieldSet" versao="1.0" scope="EDT">                           
                    <constructs param="newId" value="AJG" type="string"/>
                    <constructs param="fieldLabel" value="AJG" type="string"/>
                    <constructs param="fieldTitle" value="Definir a justiça gratuita ou não para o recorrente" type="string"/-->
                    
                    <classe id="Selector" versao="3.1" scope="EDT">
                        <constructs param="newId" value="CumSenItens" type="string"/>
                        <constructs param="linkedElement" value="despItCumprimentoSentencaIterativo-span" type="string"/>
                        <!--constructs param="linkedElTag" value="UL" type="string"/-->

                        <constructs param="multiple" value="sim" type="bool"/>
                        <constructs param="onAddAction" value="default" type="string"/>
                        <constructs param="onDelAction" value="default" type="string"/>
                        <constructs param="source" value="#{j2.res.mod.despachoCumSenSelSrc}" type="bool"/>
                        <!--constructs param="linkedElStyleClasses" value="p unorderedOrderedList FntModDefault paddingLeft35mm" type="string"/-->
                    </classe> 
                <!--/classe-->
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="SentencaPretensaoResistida">
        <versao id="1.0">
            <elemento tag="div" id="SentencaPretensaoResistida-div" scope="EDT">
                <!--classe id="FieldSet" versao="1.0" scope="EDT">                           
                    <constructs param="newId" value="AJG" type="string"/>
                    <constructs param="fieldLabel" value="AJG" type="string"/>
                    <constructs param="fieldTitle" value="Definir a justiça gratuita ou não para o recorrente" type="string"/-->
                    
                    <classe id="Selector" versao="3.1" scope="EDT">
                        <constructs param="newId" value="sentePretenResistidaItems" type="string"/>
                        <constructs param="linkedElement" value="sentItPretensaoResistida-span" type="string"/>
                        <!--constructs param="linkedElTag" value="UL" type="string"/-->

                        <constructs param="multiple" value="sim" type="bool"/>
                        <constructs param="onAddAction" value="default" type="string"/>
                        <constructs param="onDelAction" value="default" type="string"/>
                        <constructs param="source" value="#{j2.res.mod.sentencaPretensaoResistidaSelSrc}" type="bool"/>
                        <!--constructs param="linkedElStyleClasses" value="p unorderedOrderedList FntModDefault paddingLeft35mm" type="string"/-->
                    </classe> 
                <!--/classe-->
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="DocEditorCoreAddCtrls">        <!-- wa  new -->
        <versao id="3.0">
            <elemento tag="div" id="WS" scope="EDT">
                <elemento tag="div" id="EditTools" scope="EDT" class="EditTools width100">
                    <HTMLAttribute name="contenteditable" value="false"/>
                    <elemento tag="div" id="dialogMessage" class="p WindowEditor" scope="EDT">
                        <elemento tag="div" id="title" scope="EDT" class="richText richHeaderColor pad4px">
                            <!--HTMLAttribute name="style" value="margin: 0;"/-->
                            <elemento tag="p" class="p AlignCenter" scope="EDT">
                                <textHTML scope="EDT">
                                    <!--data>
                                        <![CDATA[#{j2.env.PJeVars.processo.numero} <BR> Editar #{j2.env.modId.id} ]]>
                                    </data-->
                                    <data>
                                        <![CDATA[#{j2.env.PJeVars.processo.numero} <span id="DocEditorCoreAddCtrls-subTitle" style="display:none;"><br><span id="DocEditorCoreAddCtrls-subTitle_"></sapn></span> ]]>
                                    </data>
                                </textHTML>
                            </elemento>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="overflow:auto;" />
                            <elemento tag="dl" scope="EDT">
                                <HTMLAttribute name="style" value="margin: 5px" />
                                <elemento tag="dt" scope="EDT">
                                    <elemento tag="div" id="innerContentDocEditorCore" scope="EDT">
                                        <!-- classe id="IdDoProcesso" versao="3.0"/-->
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerCore">
                                            <innerContent scope="EDT_CORE"/>
                                        </elemento>
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerBottom"/>
                                        <!-- DEFINIDAS EM ORDEM INVERSA/-->
                                        <elemento tag="div" class="width100" scope="EDT">
                                            <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                                            <elemento tag="button" class="p FntModeEditor width100 edtCtrl" id="DocEditorCoreAddCtrls-closeButtonAction" scope="EDT">
                                                <elemento tag="p" class="p FntModeEditor width100 AlignCenter" scope="EDT">
                                                    Fechar
                                                </elemento>
                                            </elemento>
                                        </elemento>

                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="ParteWhatsapp"><!-- wa -->
        <versao id="1.0">
            <elemento tag="table" id="ContatosPartesTable" scope="EDT" class="QualfTable lineHeightUnset">   
                <HTMLAttribute name="border" value=""/>
                <HTMLAttribute name="cellpadding" value="5"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EDT">
                    <!-- Linha do Papel -->
                    <elemento tag="tr" scope="EDT" class="QlTbRow" id="row-papel">
                        <elemento tag="td" scope="EDT">
                            <HTMLAttribute name="colspan" value="4"/>
                            <elemento tag="p" scope="EDT" class="p FntMod1 b u">#:span@pessoa-polo-parte-UCase{XXXXPAPELXXXXX}</elemento>
                        </elemento>
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EDT" class="QlTbRow" id="row-dadosParte">
                        <elemento tag="td" scope="EDT">
                            <HTMLAttribute name="width" value="40%"/>
                            <elemento tag="p" scope="EDT" class="p FntMod1 b">#:span@pessoa-nome{XXXXNomeDaParteXXXXX}</elemento>
                        </elemento>
                    </elemento>
                    <elemento tag="tr" scope="EDT" class="QlTbRow" id="row-dadosParte">
                        <elemento tag="td" scope="EDT">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EDT" class="p FntMod1 AlignCenter">#:span@pessoa-meiosContato-telefone{XXXXTelefoneXXXXX}</elemento>
                        </elemento>  
                    </elemento>
                    <elemento tag="tr" scope="EDT" class="QlTbRow" id="row-dadosParte">
                        <elemento tag="td" scope="EDT">
                            <HTMLAttribute name="width" value="30%"/>
                            <elemento tag="p" scope="EDT" class="p FntMod1 AlignCenter">#:span@pessoa-meiosContato-telefone-whatsappConverted{XXXXWhatsAppXXXXX}</elemento>
                        </elemento>  
                    </elemento>
                    <elemento tag="tr" scope="EDT" class="QlTbRow" id="row-dadosParte">                      
                        <elemento tag="td" scope="EDT">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EDT" class="p FntMod1 AlignCenter">#:span@pessoa-cartaoVisita{XXXXExportarCartaoVisitaXXXXX}</elemento>
                        </elemento>                        
                    </elemento>                                                                              
                </elemento>
            </elemento>   
            
            <classe id="HorizontalBar" versao="1.0"/>
            
            <classe id="Selector" versao="3.2" >
                <constructs param="newId" value="whatsAppMessages" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <!--constructs param="onChange" value="console.log('Missing onChange from certidaoItens (selector)');" type="string"/-->
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="source" value="whatsAppDefaultMessages" type="bool"/>
                <constructs param="linkedElInEDT" value="true" type="bool"/>
                <constructs param="linkedElStyleClasses" value="DivEditLimit" type="string"/>
            </classe>   
            
            
        </versao>
    </classeDef>  
</Definitions>
"
};