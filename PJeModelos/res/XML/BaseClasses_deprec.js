/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


window.j2.res.XML.baseClasses.xmlEncode = {      
  load : "<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 ASS: Litigância de má fé
 DOC: 5428980
 MOD: BaseClasses.xml
  
 Contém definições dos módulos bases para modelos
-->
<Definitions id="classeDefs" targetNamespace="http://j2" xmlns="http://j2" xsi:schemaLocation='http://j2 ../XML/j2.xsd' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>

    <classeDef id="AddtionalControls">
        <versao id="1.0">
            <elemento tag="div" id="modAddtCtrls" scope="EDT_CORE" class="width100 dispILTable"/>
        </versao>    
    </classeDef>
    
    <classeDef id="AdvogadosProcesso">
        <versao id="1.0">
            <elemento tag="p" scope="EXP" class="p Indnt0" id="advogados">
                #:B{#:U{ADVOGADOS}}: #:BR{}
                #{j2.env.PJeVars.partes.ativa.advogado.nomeOAB} #:BR{}
                #{j2.env.PJeVars.partes.passiva.advogado.nomeOAB}
            </elemento>
        </versao>    
    </classeDef>
    
    <classeDef id="AlvaraControls">
        <versao id="1.0">
            <elemento tag="div" scope="EDT_CORE" classBS="container">
                <elemento tag="form" classBS="needs-validation mb-0" id="alvara-deposito-form" scope="EDT">
                    <HTMLAttribute name="novalidate" value=""/>

                    <elemento tag="div" classBS="input-group mb-1" scope="EDT">
                        <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">DJ</elemento>
                        </elemento>
                        <elemento tag="input" id="alvara-deposito-numero" classBS="form-control" scope="EDT">
                            <HTMLAttribute name="type" value="number"/>
                            <HTMLAttribute name="placeholder" value="Conta Judicial"/>
                            <HTMLAttribute name="aria-label" value="Conta Judicial"/>
                            <HTMLAttribute name="aria-describedby" value="Inserir Conta Judicial"/>
                            <HTMLAttribute name="required" value=""/>
                        </elemento>

                        <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">R$</elemento>
                        </elemento>
                        <elemento tag="input" id="alvara-deposito-valor" classBS="form-control" scope="EDT">
                            <HTMLAttribute name="type" value="number"/>
                            <HTMLAttribute name="placeholder" value="1234,56"/>
                            <HTMLAttribute name="aria-label" value="1234,56"/>
                            <HTMLAttribute name="aria-describedby" value="Inserir Valor Depositado na Conta"/>
                            <HTMLAttribute name="min" value="1"/>
                            <HTMLAttribute name="step" value="any"/>
                            <HTMLAttribute name="required" value=""/>
                        </elemento>
                    </elemento>
                    <elemento tag="div" classBS="input-group mb-1" scope="EDT">
                        <!--elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="display: inline-flex;"/-->
                            <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                                <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Σ Parcelas</elemento>
                            </elemento>
                            <elemento tag="select" id="alvara-deposito-somatorioParcelas" classBS="form-control" scope="EDT">
                                <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="0"/>Principal</elemento>
                                <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="2"/>Principal e Sucumbência</elemento>
                                <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="1"/>Sucumbência</elemento>
                            </elemento>       
                        <!--/elemento-->       
                        <!--elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="width:15%;"/>
                            <elemento tag="button" id="alvara-deposito-addAction" scope="EDT" classBS="form-control btn btn-light">
                                <HTMLAttribute name="type" value="button"/>                                                
                                <elemento tag="img" scope="EDT" >
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                                </elemento>
                            </elemento>
                        </elemento-->
                    </elemento>
                </elemento>
            </elemento>    
            
            <classeImp id="SeletorPessoa" versao="1.0-AlvaraDevedor" scope="EDT">
                <constructs param="hideLinkedEleent" value="true" type="bool"/>
                <constructs param="changedId" value="selectorPessoaDevedora" type="string"/>
            </classeImp>
                
            <elemento tag="div" scope="EDT_CORE" classBS="container">
                <elemento tag="form" classBS="needs-validation" id="alvara-deposito-form" scope="EDT">    
                    <elemento tag="div" classBS="input-group mb-1" scope="EDT">
                        <!--elemento tag="select" id = "alvara-deposito-list" classBS="form-control" scope="EDT">
                            <HTMLAttribute name="multiple"/>
                            <HTMLAttribute name="size" size="2"/>
                        </elemento-->                        

                        <elemento tag="table" id = "alvara-deposito-list" classBS="table table-striped table-bordered table-hover table-sm" scope="EDT">
                            <elemento tag="thead" scope="EDT" classBS="thead-light">
                                <elemento tag="tr" scope="EDT">
                                    <elemento tag="th" scope="EDT"><HTMLAttribute name="scope" value="col"/>#</elemento>
                                    <elemento tag="th" scope="EDT"><HTMLAttribute name="scope" value="col"/>Depósito</elemento>
                                    <elemento tag="th" scope="EDT"><HTMLAttribute name="scope" value="col"/>Valor</elemento>
                                    <elemento tag="th" scope="EDT"><HTMLAttribute name="scope" value="col"/>Σ</elemento>
                                    <elemento tag="th" scope="EDT"><HTMLAttribute name="scope" value="col"/></elemento>
                                </elemento>
                            </elemento>
                            <elemento tag="tbody" id="alvara-deposito-list-tbody" scope="EDT">
                                <!--elemento tag="tr" scope="EDT">
                                    <elemento tag="th" scope="EDT"><HTMLAttribute name="scope" value="row"/>1</elemento>
                                    <elemento tag="td" scope="EDT">0.000.000.000.000</elemento>
                                    <elemento tag="td" scope="EDT">R$ 0,00</elemento>
                                    <elemento tag="td" scope="EDT">P</elemento>
                                    <elemento tag="td" scope="EDT">
                                        <elemento tag="img" scope="EDT" >
                                            <HTMLAttribute name="width" value="14px"/>
                                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                                        </elemento>
                                    </elemento>
                                </elemento-->
                            </elemento>
                        </elemento>
                    </elemento>

                
                    <elemento tag="div" scope="EDT" id="alvara-sucumbencia-group" classBS="collapse">
                        <elemento tag="form" classBS="needs-validation" id="alvara-deposito-form" scope="EDT">    
                            <elemento tag="div" classBS="input-group mb-3" scope="EDT">
                                <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                                    <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Sucumbência Acórdão</elemento>
                                </elemento>
                                <elemento tag="input" id="alvara-sucumbencia-valor" classBS="form-control" scope="EDT">
                                    <HTMLAttribute name="type" value="number"/>
                                    <HTMLAttribute name="placeholder" value="20"/>
                                    <HTMLAttribute name="aria-label" value="20"/>
                                    <HTMLAttribute name="aria-describedby" value="Sucumbência Fixada em Acórdão Turma Recursal"/>
                                    <HTMLAttribute name="step" value="5"/>
                                    <HTMLAttribute name="value" value="20"/>
                                </elemento>
                                <elemento tag="div" classBS="input-group-append" scope="EDT">
                                    <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">%</elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                                
                </elemento>
            </elemento>
                
                
            <classeImp id="SeletorPessoa" versao="1.0-Alvara" scope="EDT">
                <constructs param="hideLinkedEleent" value="true" type="bool"/>
            </classeImp>

                             <!--elemento tag="select" id = "alvara-rateio-list" classBS="form-control" scope="EDT_CORE">
                                <HTMLAttribute name="multiple"/>
                                <HTMLAttribute name="size" size="2"/>
                            </elemento-->   
            <elemento tag="div" scope="EDT_CORE" classBS="container">                            
                <elemento tag="form" classBS="needs-validation mb-1" id="alvara-edit-monitor" scope="EDT">
                    <elemento tag="fieldset" scope="EDT" id="alvara-edit-monitor-fieldset">
                        <HTMLAttribute name="disabled" value=""/>
                    
                        <elemento tag="table" id = "alvara-credores-list" classBS="table table-striped table-bordered table-hover table-sm" scope="EDT">
                            <!--classeImp id="AlvaraCredorListedSet" versao="1.0" scope="EDT"/-->
                        </elemento>

                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="AlvaraCorpo">
        <versao id="1.0">
            <elemento tag="p" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                Pelo presente alvará, #:B{ato judicial #:U{#:span@tipoSeloAtoJudicial{gratuito}}} indo por mim devidamente assinado, autorizo ao credor acima 
                identificado e/ou seu patrono judicial, acima indicado, a levantar(em), junto ao Banco do Brasil S/A, a quantia indicada, com seus 
                respectivos acréscimos (juros e atualizações), depositada na Conta Judicial indicada, que se encontra à ordem e 
                disposição do Juízo de Direito deste #{j2.env.PJeVars.unidade.nome} da Comarca de #{j2.env.PJeVars.unidade.comarca}, referente ao processo nº. 
                #{j2.env.PJeVars.processo.numero} formalizado por #{j2.env.PJeVars.partes.ativa.nomeUC} em 
                face de #{j2.env.PJeVars.partes.passiva.nomeUC}.
            </elemento>
            <elemento tag="p" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                A fim de garantir a autenticidade e integridade desta ordem de pagamento, o presente alvará judicial foi assinado eletronicamente, nos moldes da MP n° 2.200-2/2001 de 24/08/2001, que institui a Infraestrutura de Chaves Públicas, cuja autenticidade poderá ser confirmada através do endereço eletrônico https://pje.tjma.jus.br/pje/Processo/ConsultaDocumento/listView.seam.
            </elemento>
            <elemento tag="p" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                Fica advertido o Sr. Gerente do Banco do Brasil, ou quem suas vezes fizer, que, à vista da presente ordem, é obrigatório efetuar o pagamento ao(à) credor(a) supramencionado(a), incontinenti, enquanto o interessado estiver presente na agência, tão logo atendidas as comunicações eletrônicas de certificação.
            </elemento>
            <elemento tag="p" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                O não cumprimento imediato do Alvará implicará a imposição de multa, reversível em favor do credor e executada nos próprios autos onde foi emitida esta ordem.
            </elemento>
            <elemento tag="p" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                #:B{CUMPRA-SE} observadas as formalidades legais. DADO e passado o presente alvará, Secretaria Judicial #{j2.env.PJeVars.unidade.do} 
                #{j2.env.PJeVars.unidade.nomeFormal}, nesta cidade de #{j2.env.PJeVars.unidade.cidade}, Estado do Maranhão, em #{j2.env.PJeVars.data.formatada}. 
                Eu, #{j2.env.PJeVars.usuario.nomex}, #{j2.env.PJeVars.usuario.cargoJ2}, digitei.
            </elemento>
        </versao>
    </classeDef>

    <classeDef id="AlvaraCredorListedSet">
        <versao id="1.0">
            <elemento tag="thead" scope="EDT" classBS="thead-light">
                <elemento tag="tr" scope="EDT">
                    <elemento tag="th" scope="EDT" autoIncrementId="AlvaraCredorListedSet">
                        <HTMLAttribute name="scope" value="col"/>
                        <HTMLAttribute name="colspan" value="3"/>
                        
                        <elemento tag="span" classBS="d-inline-block text-truncate" scope="EDT" >
                            <HTMLAttribute name="style" value="max-width:85%;"/>
                            <elemento tag="img" classBS="collapse align-self-center mb-1" id="alvara-chain" scope="EDT" >
                                <HTMLAttribute name="style" value="padding-right: 5px;"/>
                                <!--HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/-->
                                <HTMLAttribute name="src" value="data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Acc%3D%22http%3A%2F%2Fcreativecommons.org%2Fns%23%22%20xmlns%3Adc%3D%22http%3A%2F%2Fpurl.org%2Fdc%2Felements%2F1.1%2F%22%20xmlns%3Ardf%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%22%20width%3D%2218%22%20height%3D%229%22%20version%3D%221.1%22%3E%3Crect%20id%3D%22backgroundrect%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20x%3D%220%22%20y%3D%220%22%20fill%3D%22none%22%20stroke%3D%22none%22%20class%3D%22%22%20style%3D%22%22%2F%3E%0D%0A%20%0D%0A%20%0D%0A%3Cg%20class%3D%22currentLayer%22%20style%3D%22%22%3E%3Ctitle%3ELayer%201%3C%2Ftitle%3E%3Cpath%20d%3D%22m16.972896259307863%2C1.2804998885989196%20c-1.4849%2C-1.4849%20-3.8891%2C-1.2021%20-5.9397%2C-1.2728000000000002%20c0.1414200000000002%2C0.1414200000000002%200.42426%2C0.2828400000000003%200.6364000000000006%2C0.4949700000000043%20c0.3535500000000003%2C0.3535500000000003%200.6364000000000006%2C0.7778200000000006%200.84853%2C1.2728000000000002%20c1.1314%2C0%202.3335%2C-0.07071100000000002%203.182%2C0.7778200000000006%20c0.42426%2C0.42426%200.70711%2C1.1314%200.7778200000000006%2C1.7678000000000007%20c0%2C1.4142000000000001%20-1.1314%2C2.5456000000000003%20-2.5456000000000003%2C2.5456000000000003%20h-3.677%20c-0.5656800000000006%2C0%20-1.3435000000000001%2C-0.3535500000000003%20-1.7678000000000007%2C-0.7778200000000006%20c-0.98995%2C-0.98995%20-0.84853%2C-2.1213%20-0.42426%2C-3.2527%20h-1.8385%20c-0.4949700000000043%2C1.6263%20-0.42426%2C3.2527%200.84853%2C4.5255%20c0.84853%2C0.84853%201.9799%2C1.2728000000000002%203.0406%2C1.2021%20h3.677%20c1.2728000000000002%2C0%202.4749%2C-0.3535500000000003%203.3941%2C-1.2728000000000002%20c1.4142000000000001%2C-1.6971000000000007%201.3435000000000001%2C-4.4548%20-0.21213%2C-6.0104%20zm-11.597%2C5.5154%20h-1.2728000000000002%20c-0.5656900000000074%2C0%20-1.3435000000000001%2C-0.3535500000000003%20-1.7678000000000007%2C-0.7778200000000006%20c-0.42426%2C-0.42426%20-0.70711%2C-1.1314%20-0.7778200000000006%2C-1.7678000000000007%20c0%2C-1.4142000000000001%201.2021%2C-2.6163%202.5456000000000003%2C-2.5456000000000003%20h3.677%20c0.5656800000000006%2C0%201.3435000000000001%2C0.3535500000000003%201.7678000000000007%2C0.7778200000000006%20c0.98995%2C0.98995%200.7778200000000006%2C2.192%200.42426%2C3.2527%20h1.8385%20c0.49498000000000486%2C-1.6263%200.42426%2C-3.2527%20-0.84853%2C-4.5255%20c-0.84853%2C-0.84853%20-1.9799%2C-1.2728000000000002%20-3.0406%2C-1.2021%20h-3.677%20c-2.4042%2C0%20-4.3134%2C1.9092%20-4.2426%2C4.2426%20c0%2C2.2627%201.9092%2C4.3134%204.1719%2C4.1719%20h2.6870000000000003%20c-0.2828400000000003%2C-0.1414200000000002%20-0.4949700000000043%2C-0.3535500000000003%20-0.70711%2C-0.5656800000000006%20c-0.3535500000000003%2C-0.3535500000000003%20-0.6364000000000006%2C-0.6364000000000006%20-0.7778200000000006%2C-1.0607%20z%22%20id%3D%22svg_1%22%20class%3D%22%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E" />
                                <HTMLAttribute name="title" value="Agrupar, remover alvará"/>
                            </elemento>    
                            <elemento tag="span" scope="EDT" >
                                #{j2.mod.clsCnstr.Alvara.AlvaraEdit.currParsingCredor.nome}
                            </elemento>
                        </elemento>
                        
                                 
                        <elemento tag="img" classBS="navbar-toggler" scope="EDT" >
                            <HTMLAttribute name="data-toggle" value="collapse"/>
                            <HTMLAttribute name="data-target" value="#alvara-credor-grouping-form-#{j2.mod.builder.incIds.AlvaraCredorListedSet}"/>
                            <HTMLAttribute name="style" value="cursor: pointer;float: right;width:38px;"/>
                            <!--HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/-->
                            <HTMLAttribute name="src" value="data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20width%3D%22612%22%20height%3D%22612%22%20style%3D%22enable-background%3Anew%200%200%20612%20612%3B%22%20xml%3Aspace%3D%22preserve%22%3E%3Crect%20id%3D%22backgroundrect%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20x%3D%220%22%20y%3D%220%22%20fill%3D%22none%22%20stroke%3D%22none%22%2F%3E%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%3Cg%20class%3D%22currentLayer%22%20style%3D%22%22%3E%3Ctitle%3ELayer%201%3C%2Ftitle%3E%3Cg%20id%3D%22svg_1%22%20class%3D%22selected%22%20fill%3D%22%236d6d6d%22%20fill-opacity%3D%221%22%3E%0D%0A%09%3Cg%20id%3D%22_x35__22_%22%20fill%3D%22%236d6d6d%22%20fill-opacity%3D%221%22%3E%0D%0A%09%09%3Cg%20id%3D%22svg_2%22%20fill%3D%22%236d6d6d%22%20fill-opacity%3D%221%22%3E%0D%0A%09%09%09%3Cpath%20d%3D%22M76.5%2C191.25h459c42.247%2C0%2C76.5-34.253%2C76.5-76.5s-34.253-76.5-76.5-76.5h-459C34.253%2C38.25%2C0%2C72.503%2C0%2C114.75%20%20%20%20%20S34.253%2C191.25%2C76.5%2C191.25z%20M535.5%2C229.5h-459C34.253%2C229.5%2C0%2C263.753%2C0%2C306s34.253%2C76.5%2C76.5%2C76.5h459%20%20%20%20%20c42.247%2C0%2C76.5-34.253%2C76.5-76.5S577.747%2C229.5%2C535.5%2C229.5z%20M535.5%2C420.75h-459c-42.247%2C0-76.5%2C34.253-76.5%2C76.5%20%20%20%20%20s34.253%2C76.5%2C76.5%2C76.5h459c42.247%2C0%2C76.5-34.253%2C76.5-76.5S577.747%2C420.75%2C535.5%2C420.75z%22%20id%3D%22svg_3%22%20fill%3D%22%236d6d6d%22%20fill-opacity%3D%221%22%2F%3E%0D%0A%09%09%3C%2Fg%3E%0D%0A%09%3C%2Fg%3E%0D%0A%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E" />
                            <HTMLAttribute name="title" value="Agrupar, remover alvará"/>
                        </elemento>                      
                        
                        
                        
                        <elemento tag="form" classBS="needs-validation collapse mb-0 mt-1 ml-2" id="alvara-credor-grouping-form-#{j2.mod.builder.incIds.AlvaraCredorListedSet}" scope="EDT">
                            <HTMLAttribute name="autoIncrementId" value="#{j2.mod.builder.incIds.AlvaraCredorListedSet}"/>
                            <HTMLAttribute name="IdPrefix" value="alvara-credor-grouping-form-"/>
                            <elemento tag="fieldset" id="alvara-credor-grouping-fieldSet" scope="EDT" >
                                <elemento tag="div" classBS="input-group mb-1" scope="EDT">  
                                    <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                                        <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Agrupar:</elemento>
                                    </elemento>
                                    <elemento tag="select" id="alvara-agrupar-selector" classBS="form-control" scope="EDT">
                                        <HTMLAttribute name="disabled" value=""/>
                                        <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="NONE"/>[Alvará Próprio]</elemento>
                                    </elemento> 
                                    
                                    <elemento tag="div" classBS="input-group-append" scope="EDT">
                                        <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">
                                            
                                            <elemento tag="img" id="alvara-delete-action" scope="EDT" classBS="align-self-center">
                                                <HTMLAttribute name="width" value="14px"/>
                                                <HTMLAttribute name="style" value="cursor: pointer"/>
                                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                                                <HTMLAttribute name="title" value="Remover este alvará judicial."/>
                                            </elemento>
                                            
                                        </elemento>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>

                </elemento>
            </elemento>

            <elemento tag="tbody" id="alvara-deposito-list-body" classBS="collapse show" scope="EDT">
                
                <elemento tag="tr" scope="EDT">
                    <elemento tag="td" scope="EDT">
                        <HTMLAttribute name="width" value="3%"/>
                    </elemento>
                    <elemento tag="td" scope="EDT">
                        <HTMLAttribute name="colspan" value="3"/>
                        <classeImp id="AlvaraSeloControl" versao="1.0" scope="EDT"/>
                    </elemento>
                </elemento>

                <elemento tag="tr" scope="EDT">
                    <elemento tag="td" scope="EDT">
                    </elemento>
                    <elemento tag="td" scope="EDT">
                        <classeImp id="AlvaraRateioControl" versao="1.0" scope="EDT"/>
                    </elemento>
                    <elemento tag="td" scope="EDT">
                        <elemento tag="button" id="alvara-deposito-addAction" scope="EDT" classBS="form-control btn btn-light">
                            <HTMLAttribute name="type" value="button"/>                                                
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                            </elemento>
                        </elemento>
                        <elemento tag="button" id="alvara-deposito-addAction" scope="EDT" classBS="form-control btn btn-light collapse">
                            <HTMLAttribute name="type" value="button"/>                                                
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                            </elemento>
                        </elemento>
                    </elemento>

                </elemento>
            </elemento>            
        </versao>
    </classeDef>
    
    <classeDef id="AlvaraSelo">
        <versao id="1.0">
            <elemento tag="div" scope="EXP">
                <HTMLAttribute name="style" value="width: 100%; height: 7mm;"/>
                <elemento tag="div" scope="EXP">
                    <HTMLAttribute name="style" value="padding-left: 70%;"/>
                    <elemento tag="div" scope="EXP">
                        <HTMLAttribute name="style" value="border: 1px solid black; width: 30mm; height: 18mm; margin: auto;"/>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        
        <versao id="2.0">
            <elemento tag="div" scope="EXP">
                <HTMLAttribute name="style" value="width: 100%; height: 7mm;"/>
                <elemento tag="div" scope="EXP">
                    <HTMLAttribute name="style" value="padding-left: 70%;"/>
                    <elemento tag="div" scope="EXP">
                        <HTMLAttribute name="style" value="border: 1px solid #d5d3d3;width: 30mm;height: 18mm;margin: auto;overflow: hidden;border-radius: 10px;"/>
                        <elemento tag="img" scope="EXP">
                            <HTMLAttribute name="src" value="https://pjet.tjma.jus.br/pje/img/imgSign.png"/>
                            <HTMLAttribute name="style" value="width: 100%; margin: -56px 0 0 0; opacity: 0.15; filter:"/>
                        </elemento>
                        <elemento tag="p" class="p FntModLess AlignCenter SeloJudicialMargin" scope="EXP">
                            Selo Judicial
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="AlvaraRateioControl">
        <versao id="1.0">
            <elemento tag="form" classBS="needs-validation mb-0" id="alvara-edit" scope="EDT">
                <elemento tag="fieldset" id="alvara-edit-fieldSet" scope="EDT" >
                    <!--HTMLAttribute name="disabled" value=""/-->

                    <elemento tag="div" classBS="input-group mb-1" scope="EDT">  
                        <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Rateio</elemento>
                        </elemento>
                        <elemento tag="select" id="alvara-rateio-verba" classBS="form-control" scope="EDT">
                            <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="NONE"/>[Selecione]</elemento>
                            <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="0"/>Principal</elemento>
                            <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="1"/>Sucumbência</elemento>
                        </elemento>    
                    <!--/elemento>  

                    <elemento tag="div" classBS="input-group mb-1" scope="EDT">   
                        <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Proporção</elemento>
                        </elemento-->
                        <elemento tag="input" id="alvara-rateio-parcela" classBS="form-control" scope="EDT">
                            <HTMLAttribute name="type" value="number"/>
                            <HTMLAttribute name="placeholder" value="100"/>
                            <HTMLAttribute name="value" value="100"/>
                            <HTMLAttribute name="aria-label" value="100"/>
                            <HTMLAttribute name="aria-describedby" value="Parcela do Rateio para o Alvará Atual"/>
                            <HTMLAttribute name="step" value="10"/>
                        </elemento>
                        <elemento tag="div" classBS="input-group-append" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">%</elemento>
                        </elemento>

                    </elemento>

                </elemento>
            </elemento>            
        </versao>
    </classeDef>
    <classeDef id="AlvaraSeloControl">
        <versao id="1.0">
            <elemento tag="form" classBS="needs-validation mb-0" id="alvara-edit-monitor" scope="EDT">
                <elemento tag="fieldset" scope="EDT" >
                    <!--HTMLAttribute name="disabled" value=""/-->
                    
                    
                    <elemento tag="div" classBS="input-group mb-0" scope="EDT">
                        <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Selo Ato Judicial</elemento>
                        </elemento>
                        <elemento tag="select" id="alvara-seloJudicial" classBS="form-control" scope="EDT">
                            <elemento tag="option" scope="EDT">
                                <HTMLAttribute name="value" value="G"/>Gratuito</elemento>
                            <elemento tag="option" scope="EDT">
                                <HTMLAttribute name="value" value="O"/>Oneroro</elemento>
                        </elemento>  
                    </elemento>  
                    <elemento tag="div" id="alvara-guia-inputGroup" classBS="input-group mb-1 collapse" scope="EDT">
                        <elemento tag="div" classBS="input-group-prepend" scope="EDT">
                            <elemento tag="span" classBS="input-group-text" id="basic-addon1" scope="EDT">Guia</elemento>
                        </elemento>
                        <elemento tag="input" id="alvara-guia-numero" classBS="form-control" scope="EDT">
                            <HTMLAttribute name="type" value="text"/>
                            <HTMLAttribute name="placeholder" value="13.123.456.000.000.987.654-2"/>
                            <HTMLAttribute name="aria-label" value="13.123.456.000.000.987.654-2"/>
                            <HTMLAttribute name="aria-describedby" value="Inserir número da guia de recolhimento custas"/>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="width:15%;"/>
                            <elemento tag="button" id="alvara-guiaNumero-consultaAction" scope="EDT" classBS="form-control btn btn-light">
                                <HTMLAttribute name="type" value="button"/>
                                <elemento tag="img" scope="EDT" >
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                    
                </elemento>
            </elemento>
        </versao>

    </classeDef>
    
    <classeDef id="AlvaraControleOneroso">
        <versao id="1.0">
            <elemento tag="table" id="seloOneroso-table" scope="EXP" class="QualfTable lightBorderBlack Hidden">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha da numero do processo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="70%"/>
                            <elemento tag="p" scope="EXP" class="p FntModBlockOneroso">Realizado recolhimento obrigatório para o pagamento das custas de emissão do alvará judicial (item 4.17 – Tabela anexa à Lei de Custas)</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="30%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModBlockOneroso AlignCenter">VALOR</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="70%"/>
                            <elemento tag="p" scope="EXP" class="p FntModBlockOneroso">N.º GUIA: #:span@seloOnerosoGuia{XXXNumeroGuiaXXXX}</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="30%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModBlockOneroso AlignCenter">#{j2.env.PJeVars.TJMA.FERJ.custas.alvara}</elemento>
                        </elemento>                        
                    </elemento>                                                                                                       
                </elemento>
            </elemento>   
        </versao>
    </classeDef>     
        
    <classeDef id="AmostraBotaoImprimirPJe">
        <versao id="default">
            <textHTML scope="EXP"> 
                <data>
                    <![CDATA[<center><button onclick="window.print();">imprimir</button></span>
                            </center>
                    ]]>
                </data>
            </textHTML>
        </versao>
    </classeDef>

    <classeDef id="AmostraFirmaPje">
        <versao id="default">
            <textHTML scope="EXP"> 
                <data>
                    <![CDATA[<table width="100%">
		      	<tbody><tr>
		      		<td valign="top" width="22px" align="left"><img src="https://pjet.tjma.jus.br/pje/img/imgSign.png" width="22px">
		      		</td>
		      		<td valign="top" width="80%" align="left">
		      			<small>
							Assinado eletronicamente por:
							<b>
		      						ELMO DE OLIVEIRA DE MORAES<br>11/05/2018 20:15:43
                                  	<br>
		      				</b>
		      				https://pjet.tjma.jus.br/pje/Processo/ConsultaDocumento/listView.seam
		      				<br>
		      				ID do documento:
		      				<b>1202120</b>
						</small>	      			
		      		</td>
		      		<td>
		      		</td>
		      		<!-- img id imgCodBarras is set wron path for developing purpose. Original value is as it is without last 'x' in path-->
		      		<td valign="top" align="right"><img id="imgCodBarras" src="/pje/qrCode.pngx">
       	
			        	<span class="text-center">18051120154360500000001178418
						</span>	 			        
		      		</td>
		      	</tr>
	        </tbody></table>
                    ]]>
                </data>    
            </textHTML>
        </versao>
    </classeDef>
            
            
    <classeDef id="AtoJudicial">
        <versao id="1.0">
            <elemento tag="div" id="atoJudicial" scope="EXP">
                <elemento tag="p" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                    XXXXAtoJudicialXXXX
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="AutoSave">
        <versao id="1.0">
            <elemento tag="div" scope="EDT_BOTTOM" id="AutoSave-mainDiv" class="width100 edtCtrl dispFlex">
                <elemento tag="div" scope="EDT" class="width100 edtCtrl dispFlex">
                    <elemento tag="p" scope="EDT" class="p FntDocEdt AlignCenter width100">
                        Rascunho de recuperação salvo em #:span@AutoSave-time{--:--:--}
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="1.1">
            <elemento tag="div" scope="EDT_BOTTOM" id="AutoSave-mainDiv" class="width100 edtCtrl dispFlex">
                <elemento tag="div" scope="EDT" class="width100 edtCtrl dispFlex">
                    <elemento tag="p" scope="EDT" class="p FntDocEdt AlignCenter width100 lineHeightUnset marginTop8px">
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/al/secam.png"/>
                        </elemento>
                        <elemento tag="span" scope="EDT" >
                            <textHTML scope="EDT">
                                <data>
                                    <![CDATA[<span>&nbsp;</span>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="EDT" >
                            <textHTML scope="EDT">
                                <data>
                                    <![CDATA[<span>&nbsp;</span>]]>
                                </data>
                            </textHTML>
                        </elemento>
                        <elemento tag="span" scope="EDT">   
                            Rascunho de recuperação salvo em #:span@AutoSave-time{--:--:--}
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
            <elemento tag="span" scope="PAR">   
                Rascunho de recuperação salvo em #:span@j2-AutoSave-time{--:--:--}
            </elemento>
        </versao>        
    </classeDef>
                    
    <classeDef id="BlocoAssinaturas">
        <versao id="3.0">
            <elemento tag="div" id="BlocoAssinaturas.chancela" scope="EXP"/>
            <elemento tag="p" id="assinatura" scope="EXP" class="p FntModDefault AlignCenter">
                <HTMLAttribute name="j2" value="BlocoAssinaturas-assinatura" />
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B>XXXXAssinaturaXXXX</B><br />
                            XXXXCargoXXXX<br />
                            XXXXMatriculaXXXX
                        ]]>
                    </data>
                </textHTML>
            </elemento>   
            <elemento tag="div" id="divFirmaPje" scope="EXP">
                <HTMLAttribute name="j2divFirmaPje" value="." />
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[<span style="display:none">&nbsp;</span>]]>
                    </data>
                </textHTML>
            </elemento>
            <classeImp id="Selector" versao="3.0" scope="EDT">
                <constructs param="newId" value="signatario" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <constructs param="linkedElement" value="assinatura" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.BlocoAssinaturas.selectorSource}" type="string"/>
            </classeImp>
        </versao>
        
        <versao id="3.1">
            <elemento tag="div" id="BlocoAssinaturas.chancela" scope="EXP"/>
            <elemento tag="p" id="assinatura" scope="EXP" class="p FntModDefault AlignCenter">
                <HTMLAttribute name="j2" value="BlocoAssinaturas-assinatura" />
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B>XXXXAssinaturaXXXX</B><br />
                            XXXXCargoXXXX<br />
                            XXXXMatriculaXXXX
                        ]]>
                    </data>
                </textHTML>
            </elemento>   
            <elemento tag="div" id="divFirmaPje" scope="EXP">
                <HTMLAttribute name="j2divFirmaPje" value="." />
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[<span style="display:none">&nbsp;</span>]]>
                    </data>
                </textHTML>
            </elemento>
        </versao>
        
        <versao id="4.0">
            <elemento tag="div" id="BlocoAssinaturas.chancela" scope="EXP"/>
            <elemento tag="p" id="assinatura" scope="EXP" class="p FntModDefault AlignCenter">
                <HTMLAttribute name="j2" value="BlocoAssinaturas-assinatura" />
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B>XXXXAssinaturaXXXX</B><br />
                            XXXXCargoXXXX<br />
                            XXXXMatriculaXXXX
                        ]]>
                    </data>
                </textHTML>
            </elemento>   
            <elemento tag="div" id="divFirmaPje" scope="EXP">
                <HTMLAttribute name="j2divFirmaPje" value="." />
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[<span style="display:none">&nbsp;</span>]]>
                    </data>
                </textHTML>
            </elemento>
            <classeImp id="Selector" versao="4.0" scope="EDT">
                <constructs param="newId" value="signatario" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <constructs param="linkedElement" value="assinatura" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.BlocoAssinaturas.selectorSource}" type="string"/>
                
                <constructs param="hideLabel" value="true" type="string"/>
            </classeImp>
        </versao>
    </classeDef>
    
    
    
    <classeDef id="BotaoVizualizarImpressao">
        <versao id="default">
            <!-- diferença aqui -->
            <elemento tag="div" scope="EXP" id="BotaoVizualizarImpressao_div" class="CenterAlign PadTop22px AlignCenter">   
                <elemento tag="img" scope="EXP" id="icFormatPrint" class="CursPnt">   
                    <!--HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/-->
                    <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAB3RJTUUH1wkcAAMLaM+GKgAAAAlwSFlzAAAewQAAHsEBw2lUUwAAAARnQU1BAACxjwv8YQUAAAKBSURBVHjajVNfSFNRGP+dc+7+4RgM11ARYkGMbPbQipKoHkKUBtbAniLIzBcn7KnXwhFEryt9kgKToJgUPQg+FhYE+ZCIgTq3B1uyzZxzm9vd7r2dc3KmMaJzOfec7/t9v9/5zne/SwzDQH103/9w2+aw3KQEV7hJ+FOGQaBpNcvWpjE+9/jCCP4a5KDA1Ucf1RcjfhPlCnW3WDMFFS+/5JBKlHdXlped758GKnUOPajGGK2ZGEViS0Eyx7CySRD/9hWeI024fqYNnuNWm+Joen6Qc0jAEGnvOZlawVzsCRKJBH783MVRexVDXc1gJnajoUAkErFxCSpSVhjwaXYSPp8P7e3tmH0zhanXb2ExMRCF6AMDA7ZDApw8yJc0P94srv5uMoqWlhY4nU4sLS0ht6uj89I1niEFJcRcqVTS/f39g1KAk7tbW1snAoGAnVIKnTs3vieg6zrm5+eRyWRxOXgXZsYkRinD8PCw3ePxTPT29naT0dHRhWAw2Ol2uzE2Nob/GaFQCKurq4hGo3GF296Ojg4J9PX1wev1/pO8uLgIl8slZywWO6ZommbmU4LJZFIC2Wy2IVlg8Xgcfr9f2tvb20Sp1WpYW1uTDkHkBUKhUGgoYLfbeU0y+/FiVarVKtbX16WjVCpBCKqq2lBAYMVicT9eiEmBOsFqtWJ6elruy+WyDN7Z2RGpyinaXvRGPV5wFW7o+XyeOhwOeYUTJ0+h2eVumEEmvYGHkQfo6elBKpWSn1rhd56YmZnp4mqdtoth3AucRkmVbQ2dn6hpBqq8yBoP7jp/FrPpNoTDt0Q2Czzk1aG/8c74Z01hvJv+uPa2v9+EEF4HXX8WOsfq+C+Iny8X7LP5swAAAABJRU5ErkJggg=="/>
                </elemento>
            </elemento>
        </versao>
    </classeDef>    
    
    <classeDef id="Cabecalho">
        <versao id="2.0">
            <elemento tag="p" scope="EXP" class="p AlignCenter">   
                <elemento tag="img" scope="EXP">
                    <HTMLAttribute name="src" value="data:image/png;base64,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"/>
                    <HTMLAttribute name="width" value="60"/>
                    <HTMLAttribute name="height" value="60"/>
                </elemento>
            </elemento>
            <elemento tag="p" scope="EXP" id="firma" class="p AlignCenter FntModHeader"> 
                <textHTML scope="EXP">
                    <data>
                       <![CDATA[<b>PODER JUDICIÁRIO
                               <BR>ESTADO DO MARANHÃO
                               <BR>#{j2.env.PJeVars.unidade.comarcaCaixaAlta}          
                               <BR>#{j2.env.PJeVars.unidade.nomeFormalCaixaAlta}</b>]]>
                    </data>
                </textHTML>
            </elemento>  
            <elemento tag="div" scope="EXP" id="CabecEnd">
                <elemento tag="p" scope="EXP" id="forum" class="p AlignCenter FntModHeader"> 
                    #{j2.env.PJeVars.unidade.forum}
                </elemento>            
                <elemento tag="p" scope="EXP"  class="p AlignCenter FntModHeader"> 
                    #{j2.env.PJeVars.unidade.enderecoFormal}
                </elemento>            
                <elemento tag="p" scope="EXP"  class="p AlignCenter FntModHeader"> 
                    #{j2.env.PJeVars.unidade.contatosFormal}
                </elemento>              
            </elemento>                
            <elemento tag="hr" scope="EXP">
                <HTMLAttribute name="size" value="1"/>
            </elemento>

        </versao>
    </classeDef>    
    
    <classeDef id="CertidaoDaContadoria">
        <versao id="1.0">
             <elemento tag="p" id="Corpor" scope="EXP" class="p Indnt3cm marginAtoJudicial FntModDefault">                 
                 Certifico que nesta data procedi a atualização monetária no presente processo, com base na tabela 
                 de Gilberto Melo Engenharia Jurídica / Tabela para Justiça Estadual - Não Expurgada, conforme segue:
            </elemento>    
            
            <elemento tag="div" id="divCorpo" scope="EXP" class="p marginAtoJudicial FntModDefault CenterAlign width90">                 
                 XXXTabelasXXX
            </elemento>    
        </versao>        
    </classeDef>
    
    <classeDef id="CertidaoDivida">
        <versao id="1.0">
             <elemento tag="p" id="Corpor" scope="EXP" class="p Indnt3cm marginAtoJudicial FntModDefault">                 
                 De ordem de Sua Excelência #{j2.env.PJeVars.expediente.deOrdem}, #:B{#:U{CERTIFICO}} em cumprimento à 
                 determinação prolatada nos autos acima epigrafados QUE a parte #{j2.env.PJeVars.processo.polos.partePassiva}
                 #:U{#:B{#{j2.env.PJeVars.partes.passiva.nome}}}, inscrita no CPF nº XXXCPFXXX, ficou obrigadas ao pagamento de quantia certa, 
                 à parte #{j2.env.PJeVars.processo.polos.parteAtiva} #:U{#:B{#{j2.env.PJeVars.partes.ativa.nome}}}, inscrita no CPF nº XXXCPFXXX,
                 razão pela qual foi expedida a presente #:B{#:U{CERTIDÃO DE DÍVIDA}} no valor de 
                 #:B{R$ XXXValorNumeralXXX (XXXValorExtensoXXX)}, atualizado até XXXDataAtualizaçãoXXX, conforme planilha atualizada do débito,
                 nos termos do Enunciado 75 do FONAJE, #:U{como título para futura execução, sem prejuízo da manutenção do 
                 nome do executado no Cartório Distribuidor}. 
            </elemento>         
            <elemento tag="p" id="Corpor" scope="EXP" class="p Indnt3cm marginAtoJudicial FntModDefault">                 
                 Segue como parte integrante desta certidão, as seguintes peças: #:U{cópia da inicial, cópia da sentença, cópia da planilha atualizada do débito e cópia da decisão que determinou a expedição desta}.
            </elemento>    
            <elemento tag="p" id="dadoEPassado" scope="EXP" class="p Indnt3cm marginAtoJudicial FntModDefault">                 
                #:B{O referido é verdade e #:U{dou fé}}. Dado e passado a presente certidão nesta cidade de #{j2.env.PJeVars.unidade.cidade}, 
                Estado do #{j2.env.PJeVars.unidade.UFFormal}, aos #{j2.env.PJeVars.data.dataEHoraAtualFormal}, 
                na Secretaria Judicial deste Juizado. Eu, #{j2.env.PJeVars.usuario.nomex}, #{j2.env.PJeVars.usuario.cargoJ2}, o digitei.
            </elemento>    
        </versao>
        <versao id="2.0">
             <elemento tag="p" id="Corpor" scope="EXP" class="p Indnt3cm marginAtoJudicial FntModDefault">                 
                 USANDO da faculdade que me confere a Lei, CERTIFICO para os devidos fins, em atenção ao requerimento da 
                 parte interessada e à previsão do art. 517, §2º, do CPC/2015, que tramita no #{j2.env.PJeVars.unidade.nomeFormalCaixaAlta} 
                 o processo nº #{j2.env.PJeVars.processo.numero}, vencido pela parte #{j2.env.PJeVars.processo.polos.parteAtiva} 
                 #:U{#:B{#{j2.env.PJeVars.partes.ativa.nome}}}  em desfavor da parte #{j2.env.PJeVars.processo.polos.partePassiva} 
                 #:U{#:B{#{j2.env.PJeVars.partes.passiva.nome}}}, que é devedor(a) nos autos e não efetuou o pagamento voluntário da 
                 obrigação (art. 523 do CPC/2015), conforme informações abaixo.
            </elemento>    
                 
            <elemento tag="p" id="Corpor" scope="EXP" class="p marginAtoJudicial FntModDefault">                 
                 #:B{#{j2.env.PJeVars.processo.polos.parteAtivaUC}/CREDOR}: #:B{#{j2.env.PJeVars.partes.ativa.nome}}, brasileiro(a), 
                XXXEstadoCivilXXX, XXXProfissãoXXX, portador do RG: XXXIdentidadeXXX e cadastrado no CPF/MF sob o nº XXXCPFXXX, 
                residente e domiciliado na XXXEndereçoXXX, CEP: XXXCEPXXX
            </elemento>    
            <elemento tag="p" id="Corpor" scope="EXP" class="p marginAtoJudicial FntModDefault">                 
                #:B{#{j2.env.PJeVars.processo.polos.partePassivaUC}/DEVDOR}: #:B{#{j2.env.PJeVars.partes.passiva.nome}}, brasileiro(a), 
                XXXEstadoCivilXXX, XXXProfissãoXXX, portador do RG: XXXIdentidadeXXX e cadastrado no CPF/MF sob o nº XXXCPFXXX, 
                residente e domiciliado na XXXEndereçoXXX, CEP: XXXCEPXXX
            </elemento>    
            
                        
            <elemento tag="p" id="dadoEPassado" scope="EXP" class="p marginAtoJudicial FntModDefault">                 
                #:B{DISPOSITIVO DA SENTENÇA}: XXXSentençaXXX
            </elemento>    
            <elemento tag="p" id="dadoEPassado" scope="EXP" class="p marginAtoJudicial FntModDefault">                 
                #:B{TRÂNSITO EM JULGADO DA SENTENÇA/ACÓRDÃO}:  XXXDataTransitoXXX
            </elemento>    
            
            
            <elemento tag="p" id="dadoEPassado" scope="EXP" class="p marginAtoJudicial FntModDefault">                 
                #:B{VALOR DA DÍVIDA}: R$ 0,00 (zero)
            </elemento>    
            <elemento tag="p" id="dadoEPassado" scope="EXP" class="p marginAtoJudicial FntModDefault">                 
                #:B{VENCIMENTO DO PRAZO PARA PAGAMENTO}: XXXPrazoVencimentoPagamentoXXX
            </elemento>    
        </versao>        
    </classeDef>
    
    <classeDef id="CartaPrecatoriaJuizosDeprecanteDeprecado">
        <versao id="3.0">
            <elemento tag="table" id="QlfcTable" scope="EXP" class="QualfTable">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha da juízo deprecante -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Juízo Deprecante:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">#{j2.env.PJeVars.unidade.nome}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha juízo deprecado -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Juízo Deprecado:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" id="QualificacaoJuizosDeprecanteDeprecado-juizoDeprecado" scope="EXP" class="p FntMod1 b">XXXXJuízoDeprecadoXXXX</elemento>
                        </elemento>                        
                    </elemento>                                                                                      
                </elemento>
            </elemento>   
            
            <!--- EDT -->
            <elemento tag="input" scope="EDT_CORE" id="CartaPrecatoriaJuizosDeprecanteDeprecado-juizoDeprecado" class="p edtCtrl FntDocEdt AlignCenter width100">
                <HTMLAttribute name="type" value="text"/>
                <HTMLAttribute name="placeholder" value="Juizado Especial Cível e Criminal de Açailândia-MA"/>
                <HTMLAttribute name="align" value="middle"/>
            </elemento>
        </versao>
    </classeDef>   
    
    <classeDef id="CartaPrecatoriaDestinatarioTable">
        <versao id="3.0">
            <elemento tag="table" id="QlfcTable" scope="EXP" class="QualfTable lightBorderBlack">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="100%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 u AlignCenter">PARTE ENVOLVIDA - LOCAL DA DILIGÊNCIA</elemento>
                        </elemento>                   
                    </elemento>
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="100%"/>
                            <classeImp id="DestinatarioExpediente" versao="1.0-mult" scope="EDT">
                                <constructs param="bindSeletorPessoaElement" value="selectorPessoaTextP" type="bool"/>
                                <constructs param="bindSeletorPessoaFormats" value="Indnt0cm" type="bool"/>
                                <constructs param="padraoApresentacao" value="#:B{#{j2.mod.clsCnstr.SeletorPessoa.selected.polo.UCase}}: #:B{#:U{#{j2.mod.clsCnstr.SeletorPessoa.selected.nome}}} #:BR{} #{j2.mod.clsCnstr.SeletorPessoa.selected.endereco._} #:BR{} #{j2.mod.clsCnstr.SeletorPessoa.selected.meiosContato._}" type="string"/>
                                <constructs param="separador" value="#:BR{}" type="string"/>
                            </classeImp>
                        </elemento>
                    </elemento>                                                                                      
                </elemento>
            </elemento>   
        </versao>
    </classeDef>   
        
    <classeDef id="ContatosPartes">
        <versao id="1.0">
            <elemento tag="table" id="ContatosPartesTable" scope="EXP" class="QualfTable lineHeightUnset">   
                <HTMLAttribute name="border" value=""/>
                <HTMLAttribute name="cellpadding" value="5"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha do Papel -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="row-papel">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="colspan" value="4"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b u">#:span@Contatos-Partes-papel{XXXXPAPELXXXXX}</elemento>
                        </elemento>
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="row-dadosParte">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="40%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">#:span@Contatos-Partes-nome{XXXXNomeDaParteXXXXX}</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 AlignCenter">#:span@Contatos-Partes-telefone{XXXXTelefoneXXXXX}</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="30%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 AlignCenter">#:span@Contatos-Partes-whatsApp{XXXXWhatsAppXXXXX}</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 AlignCenter">#:span@Contatos-Partes-exportarContato{XXXXExportarCartaoVisitaXXXXX}</elemento>
                        </elemento>                        
                    </elemento>                                                                                         
                </elemento>
            </elemento>   
        </versao>
    </classeDef>  
    
    <classeDef id="Corpo">
        <versao id="1.0">
            <elemento tag="p" scope="EXP" class="p Indnt3cm" id="singleBody">
                Instância de classe Corpo.
            </elemento>
        </versao>    
    </classeDef>
    
    <classeDef id="CheckBox">
        <versao id="1.0">
            <elemento tag="div" scope="EDT_CORE" id="CheckBox:Div">
                <HTMLAttribute name="style" value="display: flex;"/>
                <elemento tag="div" scope="EDT">
                    <HTMLAttribute name="style" value="float:left;"/>
                    <elemento tag="input" scope="EDT" id="CheckBox:Input" class="">
                        <HTMLAttribute name="type" value="checkbox"/>
                    </elemento>
                </elemento>
                <elemento tag="div" scope="EDT">
                    <HTMLAttribute name="style" value="float:left;"/>
                    <elemento tag="label" scope="EDT" >
                        <elemento tag="p" scope="EDT" id="CheckBox:Label" class="p FntDocEdt AlignJustify width100">
                            [label CheckBox]
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>    
    </classeDef>
    
    <classeDef id="DocEditorCore">
        <versao id="3.0-oj">
            <elemento tag="div" id="WS" scope="EDT">
                <elemento tag="div" id="EditTools" scope="EDT" class="EditTools width100">
                    <HTMLAttribute name="contenteditable" value="false"/>
                    <elemento tag="div" id="dialogMessage" class="p WindowEditor" scope="EDT">
                        <elemento tag="div" id="title" scope="EDT" class="richText richHeaderColor pad4px">
                            <!--HTMLAttribute name="style" value="margin: 0;"/-->
                            <elemento tag="p" class="p AlignCenter" scope="EDT">
                                <textHTML scope="EDT">
                                    <data>
                                        <![CDATA[#{j2.env.PJeVars.processo.numero} <BR> Editar #{j2.env.modId.id} ]]>
                                    </data>
                                </textHTML>
                            </elemento>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="overflow:auto;" />
                            <elemento tag="dl" scope="EDT">
                                <HTMLAttribute name="style" value="margin: 5px" />
                                <elemento tag="dt" scope="EDT">
                                    <elemento tag="div" id="innerContentDocEditorCore" scope="EDT">
                                        <!-- classe id="IdDoProcesso" versao="3.0"/-->
                                        <classeImp id="HorizontalBar" versao="1.0" scope="EDT"/>
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerCore"/>
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerBottom"/>
                                        <!-- DEFINIDAS EM ORDEM INVERSA/-->
                                        <elemento tag="div" class="width100" scope="EDT_BOTTOM">
                                            <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                                            <elemento tag="button" class="p FntModeEditor width100 edtCtrl" onclick="j2.mod.clsCnstr.DocEditorCore.close();" scope="EDT">
                                                <elemento tag="p" class="p FntModeEditor width100 AlignCenter" scope="EDT">
                                                    Fechar
                                                </elemento>
                                            </elemento>
                                        </elemento>
                                        <classeImp id="ReferenciaDocumento" versao="3.0" scope="EDT_BOTTOM"/>
                                        <classeImp id="FerramentasProcesso" versao="2.0-oj" scope="EDT_BOTTOM"/>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="3.0">
            <elemento tag="div" id="WS" scope="EDT">
                <elemento tag="div" id="EditTools" scope="EDT" class="EditTools width100">
                    <HTMLAttribute name="contenteditable" value="false"/>
                    <elemento tag="div" id="dialogMessage" class="p WindowEditor" scope="EDT">
                        <elemento tag="div" id="title" scope="EDT" class="richText richHeaderColor pad4px">
                            <!--HTMLAttribute name="style" value="margin: 0;"/-->
                            <elemento tag="p" class="p AlignCenter" scope="EDT">
                                <textHTML scope="EDT">
                                    <data>
                                        <![CDATA[#{j2.env.PJeVars.processo.numero} <BR> Editar #{j2.env.modId.id} ]]>
                                    </data>
                                </textHTML>
                            </elemento>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="overflow:auto;" />
                            <elemento tag="dl" scope="EDT">
                                <HTMLAttribute name="style" value="margin: 5px" />
                                <elemento tag="dt" scope="EDT">
                                    <elemento tag="div" id="innerContentDocEditorCore" scope="EDT">
                                        <!-- classe id="IdDoProcesso" versao="3.0"/-->
                                        <classeImp id="HorizontalBar" versao="1.0" scope="EDT"/>
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerCore"/>
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerBottom"/>
                                        <!-- DEFINIDAS EM ORDEM INVERSA/-->
                                        <elemento tag="div" class="width100" scope="EDT_BOTTOM">
                                            <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                                            <elemento tag="button" class="p FntModeEditor width100 edtCtrl" onclick="j2.mod.clsCnstr.DocEditorCore.close();" scope="EDT">
                                                <elemento tag="p" class="p FntModeEditor width100 AlignCenter" scope="EDT">
                                                    Fechar
                                                </elemento>
                                            </elemento>
                                        </elemento>
                                        <classeImp id="ReferenciaDocumento" versao="3.0" scope="EDT_BOTTOM"/>
                                        <classeImp id="FerramentasProcesso" versao="2.0" scope="EDT_BOTTOM"/>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="4.0">
            <elemento tag="div" id="WS" scope="EDT">
                <elemento tag="div" id="EditTools" scope="EDT" class="EditTools width100">
                    <HTMLAttribute name="contenteditable" value="false"/>
                    <elemento tag="div" id="dialogMessage" class="p WindowEditor" scope="EDT">
                        <elemento tag="div" id="title" scope="EDT" class="richText richHeaderColor pad4px">
                            <!--HTMLAttribute name="style" value="margin: 0;"/-->
                            <elemento tag="p" class="p AlignCenter" scope="EDT">
                                <textHTML scope="EDT">
                                    <data>
                                        <![CDATA[Editar #{j2.env.modId.id} ]]>
                                    </data>
                                </textHTML>
                            </elemento>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="overflow:auto;" />
                            <elemento tag="dl" scope="EDT">
                                <HTMLAttribute name="style" value="margin: 5px" />
                                <elemento tag="dt" scope="EDT">
                                    <elemento tag="div" id="innerContentDocEditorCore" scope="EDT">
                                        <!-- classe id="IdDoProcesso" versao="3.0"/-->
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerCore"/>
                                        <elemento tag="div" scope="EDT" id="DocEditorInnerBottom"/>
                                        <!-- DEFINIDAS EM ORDEM INVERSA/-->
                                        <elemento tag="div" class="width100" scope="EDT_BOTTOM">
                                            <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                                            <elemento tag="button" class="p FntModeEditor width100 edtCtrl" onclick="j2.mod.clsCnstr.DocEditorCore.close();" scope="EDT">
                                                <elemento tag="p" class="p FntModeEditor width100 AlignCenter" scope="EDT">
                                                    Fechar
                                                </elemento>
                                            </elemento>
                                        </elemento>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="5.0">
            <elemento tag="div" id="WS" scope="EDT">
                <HTMLAttribute name="class" value="container-fluid"/>
            <elemento tag="div" id="WS" scope="EDT">
                <HTMLAttribute name="class" value="container-fluid border border-primary shadow-lg p-3 mb-5 bg-white rounded"/>
                
                <elemento tag="nav" id="title" scope="EDT" >
                    <HTMLAttribute name="class" value="navbar navbar-expand-lg navbar-light bg-light"/>
                    <elemento tag="h3" id="WS" scope="EDT">
                        <textHTML scope="EDT">
                             <data>
                                 <![CDATA[#{j2.env.PJeVars.processo.numeroCurto}]]>
                             </data>
                         </textHTML>
                     </elemento>
                     
                    <!--elemento tag="a" scope="EDT">                    
                        <HTMLAttribute name="class" value="navbar-brand"/>
                        <HTMLAttribute name="href" value="#"/>
                        
                            <elemento tag="img" scope="EDT">
                                <HTMLAttribute name="class" value="d-inline-block align-top"/>
                                <HTMLAttribute name="src" value="data:image/png;base64,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"/>
                                <HTMLAttribute name="style" value="width:30px;height:30px"/>
                            </elemento>
                            <elemento tag="span" scope="EDT">
                                <HTMLAttribute name="class" value="navbar-brand mb-0 h1"/>
                                <textHTML scope="EDT">
                                    <data>
                                        <![CDATA[Editar #{j2.env.modId.id} ]]>
                                    </data>
                                </textHTML>
                            </elemento>
                        </elemento-->    
                    
                        <elemento tag="button" scope="EDT">
                            <HTMLAttribute name="class" value="navbar-toggler"/>
                            <HTMLAttribute name="type" value="button"/>
                            <HTMLAttribute name="data-toggle" value="collapse"/>
                            <HTMLAttribute name="data-target" value="#navbarSupportedContent"/>
                            <HTMLAttribute name="aria-controls" value="navbarSupportedContent"/>
                            <HTMLAttribute name="aria-expanded" value="false"/>
                            <HTMLAttribute name="aria-label" value="Toggle navigation"/>

                            <elemento tag="span" scope="EDT">
                                <HTMLAttribute name="class" value="navbar-toggler-icon"/>
                            </elemento>
                        </elemento>

                        <elemento tag="div" scope="EDT" id="navbarSupportedContent">
                            <HTMLAttribute name="class" value="collapse navbar-collapse"/>

                            <elemento tag="ul" scope="EDT">
                                <HTMLAttribute name="class" value="navbar-nav mr-auto"/>
                                <elemento tag="li" scope="EDT">
                                    <HTMLAttribute name="class" value="nav-item active"/>

                                    <elemento tag="a" scope="EDT">
                                        <HTMLAttribute name="class" value="nav-link"/>
                                        <HTMLAttribute name="href" value="#"/>
                                        Inserir Alertas
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    
                    </elemento>
                
                    <elemento tag="div" scope="EDT">
                        <!--HTMLAttribute name="style" value="overflow:auto;" /-->
                    
                    
                        <elemento tag="div" id="innerContentDocEditorCore" scope="EDT">
                            <!-- classe id="IdDoProcesso" versao="3.0"/-->
                            <elemento tag="div" scope="EDT" id="DocEditorInnerCore"/>
                            <elemento tag="div" scope="EDT" id="DocEditorInnerBottom"/>
                            <!-- DEFINIDAS EM ORDEM INVERSA/-->
                            <elemento tag="div" class="width100" scope="EDT_BOTTOM">
                                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                                <elemento tag="button" onclick="j2.mod.clsCnstr.DocEditorCore.close();" scope="EDT">
                                    <HTMLAttribute name="class" value="btn btn-primary btn-block" />
                                    Fechar
                                </elemento>
                            </elemento>
                        </elemento>
                    
                    
                    </elemento>

                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="Documento">
        <versao id="3.0">
            <classeImp id="j2Data" versao="1.0" scope="EXP"/>
            <classeImp id="DocEditorCore" versao="3.0" scope="EDT"/>
            <!-- value id changed from jecivelExpediente to j2Exp -->
            <elemento tag="div" scope="EXP" id="j2Exp">   
                <innerContent scope="EXP"/>
            </elemento>
            <classeImp id="BotaoVizualizarImpressao" versao="3.0" scope="EXP"/>
            <!--classeImp id="AmostraFirmaPje" versao="3.0" enabled="false" scope="EXP"/-->
            <!--classeImp id="AmostraBotaoImprimirPJe" versao="3.0" enabled="false" scope="EXP"/-->
        </versao>
        <versao id="3.0-oj">
            <classeImp id="j2Data" versao="1.0" scope="EXP"/>
            <classeImp id="DocEditorCore" versao="3.0-oj" scope="EDT"/>
            <!-- value id changed from jecivelExpediente to j2Exp -->
            <elemento tag="div" scope="EXP" id="j2Exp">   
                <innerContent scope="EXP"/>
            </elemento>
            <classeImp id="BotaoVizualizarImpressao" versao="3.0" scope="EXP"/>
            <!--classeImp id="AmostraFirmaPje" versao="3.0" enabled="false" scope="EXP"/-->
            <!--classeImp id="AmostraBotaoImprimirPJe" versao="3.0" enabled="false" scope="EXP"/-->
        </versao>
        <versao id="3.1">
            <classeImp id="DocEditorCore" versao="4.0" scope="EDT"/>
            <!-- value id changed from jecivelExpediente to j2Exp -->
            <elemento tag="div" scope="EXP" id="j2Exp">   
                <innerContent scope="EXP"/>
            </elemento>
        </versao>        
        <versao id="3.2">
            <classeImp id="DocEditorCore" versao="4.0" scope="EDT"/>
            <!-- value id changed from jecivelExpediente to j2Exp -->
            <elemento tag="div" scope="EXP" id="j2Exp">   
                <innerContent scope="EXP"/>
            </elemento>
            <classeImp id="BotaoVizualizarImpressao" versao="3.0" scope="EXP"/>
        </versao>        
        <versao id="4.0">
            <classeImp id="DocEditorCore" versao="5.0" scope="EDT">
                <constructs param="width" value="400" type="int"/>
                <constructs param="height" value="535" type="int"/>
            </classeImp>
            <!-- value id changed from jecivelExpediente to j2Exp -->
            <elemento tag="div" scope="EXP" id="j2Exp">   
                <innerContent scope="EXP"/>
            </elemento>
            <classeImp id="BotaoVizualizarImpressao" versao="3.0" scope="EXP"/>
        </versao>          
    </classeDef>    
    
    <classeDef id="DivisaoEdt">
        <versao id="1.0">
            <elemento tag="div" scope="EDT" id="singleDiv"/>
        </versao>    
    </classeDef>
    
    <classeDef id="DJeControls">
        <versao id="3.0">
            <elemento tag="div" id="DJeControls-Core" scope="EDT_BOTTOM">
                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                
                <elemento tag="div" id="DJeControls-Initial" scope="EDT">
                    <elemento tag="button" id="DJeControls-Activator" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                        Inserir Transcrição
                        <elemento tag="img" scope="EDT" id="DJeControls.View" class="vertAlignBottom">
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/edit.gif"/>
                        </elemento>

                    </elemento>
                </elemento>
                <elemento tag="div" id="DJeControls-Activated" scope="EDT" class="Hidden">

                </elemento>
                
                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="DestinatarioExpediente">
        <versao id="1.0-single">
            <classeImp id="SeletorPessoa" versao="1.0-sel-3.0" scope="EDT">
                <constructs param="hideLinkedEleent" value="false" type="bool"/>
                <!--constructs param="changedId" value="selectorDestinatarioExpediente" type="string"/-->
            </classeImp>
        </versao>    
        <versao id="1.0-mult">
            <classeImp id="SeletorPessoa" versao="1.1-sel-3.0" scope="EDT">
                <constructs param="hideLinkedEleent" value="false" type="bool"/>
                <!--constructs param="changedId" value="selectorDestinatarioExpediente" type="string"/-->
            </classeImp>
        </versao>    
        
        <versao id="1.0-mult-hidden">
            <classeImp id="SeletorPessoa" versao="1.1-sel-3.0" scope="EDT">
                <constructs param="hideLinkedEleent" value="false" type="bool"/>
                <!--constructs param="changedId" value="selectorDestinatarioExpediente" type="string"/-->
                <constructs param="propagateChanges" value="selParte" type="string"/>
            </classeImp>
        </versao>   
    </classeDef>
    
    <classeDef id="DestinatarioExpedienteFrameComunicacao">
        <versao id="1.0">
            <classe id="Corpo" versao="1.0">
                <constructs param="textIndent" value="0cm" type="string"/>
                <constructs param="newId" value="destinatarioExpediente" type="string"/>
                <constructs param="textContent" value="#:span@vocativoPreText{#:B{#:U{DESTINATÁRIO:}}} #:BR{} #:sapn@vocativo{#{j2.env.PJeVars.expediente.destinatario}}" type="string"/>
                <constructs param="styleClasses" value="Indnt0" type="string"/>
            </classe>
            
            <elemento tag="p" scope="EXP" class="p Indnt0 Hiddenxxxxxxxxxxxxx" id="advogados">
                #:B{#:U{ADVOGADOS}}: #:BR{}
                #{j2.env.PJeVars.partes.ativa.advogado.nomeOAB} #:BR{}
                #{j2.env.PJeVars.partes.passiva.advogado.nomeOAB}
            </elemento>

        </versao>    
    </classeDef>
    
    <classeDef id="ExpedienteVinculado"> <!-- ndlg -->
        <versao id="1.0">
            <elemento tag="div" id="ExpedienteVinculado-Core" scope="EDT_CORE">
                
                <elemento tag="button" id="ExpedienteVinculado-ExpedienteOpener" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                    <elemento tag="img" scope="EDT" id="ReferenciaDocumento.View" class="vertAlignBottom">
                        <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                    </elemento>
                    <elemento tag="span" scope="EDT">
                        #:span-ExpedienteVinculado-tipoDocumento@{Citação} id
                        #:span-ExpedienteVinculado-idDoc@{359453} 
                        (Expediente #:span-ExpedienteVinculado-idExpediente@{123456789})
                    </elemento>
                </elemento>
                
                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="TermoDeAudienciaFatos">
        <versao id="1.0">
            <elemento tag="div" id="fatos" scope="EXP">
                <elemento tag="p" scope="EXP" class="p FntModDefault Indnt15mm marginAtoJudicial">
                    Narra a parte demandante que XXXFatosXXXX.
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="FerramentasProcesso">
        <versao id="2.0">
            <!-- editor scope -->
            
        
            <elemento  tag="div" id="FerramentasProcesso.div" scope="EDT_BOTTOM" class="width100">
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso.Alerta" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Alerta
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/al/secam.png"/>
                        </elemento>
                    </elemento>
                </elemento>                     
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso.Tarefa" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Tarefa
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/edit.gif"/>
                        </elemento>
                    </elemento>
                </elemento>                     
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso.Retificar" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Retificar
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/clear_off.gif"/>
                        </elemento>
                    </elemento>
                </elemento>
                <!-- pdf -->
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso-baixarPDF" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Baixar
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACa0lEQVR42o3TXWhSYRgH8P+rU3PWWFtXWwzaTRAsj3OWLa1BCxpE6kQM6q4Ri20yguiiFn1IF1130cW6sVowbB+6CRGRNElJO+esEITZVYLRINTZ1Nw5p6Pk2Jlb9L85h+e874/D87wvwZa0trZ2aLVaHSGkQRBTqf19IJVKpVdWVsLYFlJ7MZvNFo/H81KlUqmxQ9LpdHl8fHxoaWnJsxNApqam3vX19Z3GLslmsygWi+WxsbGhUCjkqQMCgQBDUZR2N6BQKEAmkyGTyZRdLtcV8U+eSYDFxUVGp9PVAUK5DH75I0rJBIQBO4hCCYZhWIfD0V35vAn4/X5ar9dT2wHu/WsIP75D0SCHYL1crUWjUdZisUgBn89H9/T01AP3roOo1ZDdcIurSHUqsVjs/4BfwTeQT7igehEA6TgEnueRz+eRSCRYq9UqBebn52mDwUBtrK+jEAkB8WU0dhtQHL6EPc994I8crU6i0shkMlkPzM3N0YcXvFTxM4P9N+9AecIMLvUN+bPHwd9+iN/9A9WFGo0G8XictdlsUmB2dpbu6uqiuPwaSgE/uJYDkLW3g1y0gD9vg8b9CBzHoampCZFIhB0cHJQCMzMztNFo3OzB2pPHUJ48hZ8XzkEQNzUHP0Cxdx8UCgXC4TBrt9ulgNfrpXt7ezcBPpNB7pUXOfddcRQ8yNVhHLw1IQ6CQDxErNPplALT09O0yWSSTCG/4EchGMTG6ioEuRwt9x9A2dYGsV9vR0dH+yUncXLyKaPXH9PWbt/OEVAqlYojI9ccNP1pYSuAzs7OM2p1YzP+tV0QOPFaf8nlsl9rtT+H1hUgPtiHtAAAAABJRU5ErkJggg=="/>
                        </elemento>
                    </elemento>
                </elemento>
                
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso-baixarPDF-par" scope="PAR">
                    <HTMLAttribute name="style" value="width: 80px;"/>
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="PAR">
                        Baixar
                        <elemento tag="img" scope="PAR" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACa0lEQVR42o3TXWhSYRgH8P+rU3PWWFtXWwzaTRAsj3OWLa1BCxpE6kQM6q4Ri20yguiiFn1IF1130cW6sVowbB+6CRGRNElJO+esEITZVYLRINTZ1Nw5p6Pk2Jlb9L85h+e874/D87wvwZa0trZ2aLVaHSGkQRBTqf19IJVKpVdWVsLYFlJ7MZvNFo/H81KlUqmxQ9LpdHl8fHxoaWnJsxNApqam3vX19Z3GLslmsygWi+WxsbGhUCjkqQMCgQBDUZR2N6BQKEAmkyGTyZRdLtcV8U+eSYDFxUVGp9PVAUK5DH75I0rJBIQBO4hCCYZhWIfD0V35vAn4/X5ar9dT2wHu/WsIP75D0SCHYL1crUWjUdZisUgBn89H9/T01AP3roOo1ZDdcIurSHUqsVjs/4BfwTeQT7igehEA6TgEnueRz+eRSCRYq9UqBebn52mDwUBtrK+jEAkB8WU0dhtQHL6EPc994I8crU6i0shkMlkPzM3N0YcXvFTxM4P9N+9AecIMLvUN+bPHwd9+iN/9A9WFGo0G8XictdlsUmB2dpbu6uqiuPwaSgE/uJYDkLW3g1y0gD9vg8b9CBzHoampCZFIhB0cHJQCMzMztNFo3OzB2pPHUJ48hZ8XzkEQNzUHP0Cxdx8UCgXC4TBrt9ulgNfrpXt7ezcBPpNB7pUXOfddcRQ8yNVhHLw1IQ6CQDxErNPplALT09O0yWSSTCG/4EchGMTG6ioEuRwt9x9A2dYGsV9vR0dH+yUncXLyKaPXH9PWbt/OEVAqlYojI9ccNP1pYSuAzs7OM2p1YzP+tV0QOPFaf8nlsl9rtT+H1hUgPtiHtAAAAABJRU5ErkJggg=="/>
                        </elemento>
                    </elemento>
                </elemento>
                
                <!-- wa -->
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso-whatsappTool" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        WhatsApp
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAC/ElEQVR42pWTa0jTURjG35MOvKLOoc7JxGkXEbx2UROzDzOnaa6lTitDkwxDVxitwswyzKZOqZwQigQJEymEKWmEc25NGF5QyTWRMXNecpHivC3cTv8ZiLc+9Hx74Zzfed73PQ+CA8RisUgxMTEnPD09GRhj88zMzIRMJhuWSqWWvWfRzoLJZNrV1NTw6XR64aRxnqw1/oBDCMExFxr4OLjr1Wr1Cx6P16BSqSz7AHl5eR5VVVUfZQvjYRWj70GzPLsLftzdHz8OSYdAJ++u3NxcjkQiWd8GREdHkzo6OuTNWunJpyNtCP4hErLBryPzII4c2Obl5ZWxDejr6yta97avy5AJkTPJDp6EcqFNpwSlQbMPYmdDwp+YpaCWDyZzudzOLcDS0tJEmqw6QPVzEhUExMP9UA58nh2FXGX9gU7SfKOwIPxqN5lMZiGiH/qjynJdmKQYgRlDDi0WymKuQP+CBghHe8b8Vy4kBzyaItzIzMx0Rnw+PzrpZpbifM9z5LgGQCW5QHd6BYg0XSAclxzogFgtjF2oxQ94d6mouLg4PJ13fSCxqxw5bxAmLBbID06EgvBkuKNqhvZpFVDt3WBufXEXQ5P6Em7fKiIjNpvt9Kap8deZD3zbDZMJWcxmwBYMJVGZcOloLHTPDgOTGgJTqwZ4ONQC/YYJCHD2wj3xZXMurq60rQ71er1EONqeJPk+gMwEwAqxOknxjwReRCp4OLqBhahzFK+gd2EcSoI5mOMeUc9gMAq3AKWCZ6c47IvKG18a0OKGEW3ugCAMcNiVBivYBN8sBghyo+P2s/y16kpBkEAgmNqesU6n03JlQr9F08rWazudWOtVJwQhFD/cdLoA69Xaa3Fxce+2P1J2djYt+17BdO1XCUr0CYe13ybcOzcGU8sGIG6DL8Ubko9EWfdvHBoYzCcyI96VBZFIlHWOldBie8hmnpjHW+uLNBotgXDhhxAyUyiUCSJIna2trY11dXVz+9KoUCguj4yMrIrF4g65XL4J/6E/n8BbOzgWsHcAAAAASUVORK5CYII="/>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
            
            <elemento tag="div" scope="EDT_BOTTOM" class="DivLikeHr"/>
        </versao>    
        
        <versao id="2.0-oj">
            
            
            <!-- editor scope -->
            <elemento  tag="div" id="FerramentasProcesso.div" scope="EDT_BOTTOM" class="width100">
                <elemento  tag="button" class="width33 edtCtrl Hidden" id="FerramentasProcesso.Alerta" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter " scope="EDT">
                        Alerta
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/al/secam.png"/>
                        </elemento>
                    </elemento>
                </elemento>                     
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso.Tarefa" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Tarefa
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/edit.gif"/>
                        </elemento>
                    </elemento>
                </elemento>                     
                <elemento  tag="button" class="width33 edtCtrl Hidden" id="FerramentasProcesso.Retificar" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter " scope="EDT">
                        Retificar
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/clear_off.gif"/>
                        </elemento>
                    </elemento>
                </elemento>
                <!-- pdf -->
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso-baixarPDF" scope="EDT">
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Baixar
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACa0lEQVR42o3TXWhSYRgH8P+rU3PWWFtXWwzaTRAsj3OWLa1BCxpE6kQM6q4Ri20yguiiFn1IF1130cW6sVowbB+6CRGRNElJO+esEITZVYLRINTZ1Nw5p6Pk2Jlb9L85h+e874/D87wvwZa0trZ2aLVaHSGkQRBTqf19IJVKpVdWVsLYFlJ7MZvNFo/H81KlUqmxQ9LpdHl8fHxoaWnJsxNApqam3vX19Z3GLslmsygWi+WxsbGhUCjkqQMCgQBDUZR2N6BQKEAmkyGTyZRdLtcV8U+eSYDFxUVGp9PVAUK5DH75I0rJBIQBO4hCCYZhWIfD0V35vAn4/X5ar9dT2wHu/WsIP75D0SCHYL1crUWjUdZisUgBn89H9/T01AP3roOo1ZDdcIurSHUqsVjs/4BfwTeQT7igehEA6TgEnueRz+eRSCRYq9UqBebn52mDwUBtrK+jEAkB8WU0dhtQHL6EPc994I8crU6i0shkMlkPzM3N0YcXvFTxM4P9N+9AecIMLvUN+bPHwd9+iN/9A9WFGo0G8XictdlsUmB2dpbu6uqiuPwaSgE/uJYDkLW3g1y0gD9vg8b9CBzHoampCZFIhB0cHJQCMzMztNFo3OzB2pPHUJ48hZ8XzkEQNzUHP0Cxdx8UCgXC4TBrt9ulgNfrpXt7ezcBPpNB7pUXOfddcRQ8yNVhHLw1IQ6CQDxErNPplALT09O0yWSSTCG/4EchGMTG6ioEuRwt9x9A2dYGsV9vR0dH+yUncXLyKaPXH9PWbt/OEVAqlYojI9ccNP1pYSuAzs7OM2p1YzP+tV0QOPFaf8nlsl9rtT+H1hUgPtiHtAAAAABJRU5ErkJggg=="/>
                        </elemento>
                    </elemento>
                </elemento>
                                
                <!-- wa -->
                <elemento  tag="button" class="width33 edtCtrl" id="FerramentasProcesso-whatsappTool" scope="EDT">
                    <HTMLAttribute name="profile" value="OJ"/>
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        WhatsApp
                        <elemento tag="img" scope="EDT" id="icFormatPrint">   
                            <HTMLAttribute name="style" value="HEIGHT:16px;vertical-align:middle;padding: 0 0 5px 6px;"/>
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAC/ElEQVR42pWTa0jTURjG35MOvKLOoc7JxGkXEbx2UROzDzOnaa6lTitDkwxDVxitwswyzKZOqZwQigQJEymEKWmEc25NGF5QyTWRMXNecpHivC3cTv8ZiLc+9Hx74Zzfed73PQ+CA8RisUgxMTEnPD09GRhj88zMzIRMJhuWSqWWvWfRzoLJZNrV1NTw6XR64aRxnqw1/oBDCMExFxr4OLjr1Wr1Cx6P16BSqSz7AHl5eR5VVVUfZQvjYRWj70GzPLsLftzdHz8OSYdAJ++u3NxcjkQiWd8GREdHkzo6OuTNWunJpyNtCP4hErLBryPzII4c2Obl5ZWxDejr6yta97avy5AJkTPJDp6EcqFNpwSlQbMPYmdDwp+YpaCWDyZzudzOLcDS0tJEmqw6QPVzEhUExMP9UA58nh2FXGX9gU7SfKOwIPxqN5lMZiGiH/qjynJdmKQYgRlDDi0WymKuQP+CBghHe8b8Vy4kBzyaItzIzMx0Rnw+PzrpZpbifM9z5LgGQCW5QHd6BYg0XSAclxzogFgtjF2oxQ94d6mouLg4PJ13fSCxqxw5bxAmLBbID06EgvBkuKNqhvZpFVDt3WBufXEXQ5P6Em7fKiIjNpvt9Kap8deZD3zbDZMJWcxmwBYMJVGZcOloLHTPDgOTGgJTqwZ4ONQC/YYJCHD2wj3xZXMurq60rQ71er1EONqeJPk+gMwEwAqxOknxjwReRCp4OLqBhahzFK+gd2EcSoI5mOMeUc9gMAq3AKWCZ6c47IvKG18a0OKGEW3ugCAMcNiVBivYBN8sBghyo+P2s/y16kpBkEAgmNqesU6n03JlQr9F08rWazudWOtVJwQhFD/cdLoA69Xaa3Fxce+2P1J2djYt+17BdO1XCUr0CYe13ybcOzcGU8sGIG6DL8Ubko9EWfdvHBoYzCcyI96VBZFIlHWOldBie8hmnpjHW+uLNBotgXDhhxAyUyiUCSJIna2trY11dXVz+9KoUCguj4yMrIrF4g65XL4J/6E/n8BbOzgWsHcAAAAASUVORK5CYII="/>
                        </elemento>
                    </elemento>
                </elemento>
                
            </elemento>
            
            <elemento tag="div" scope="EDT_BOTTOM" class="DivLikeHr"/>
        </versao>    
    </classeDef>   
 
    
    <classeDef id="FieldSet">
        <versao id="1.0">
            <elemento tag="div" id="setField-id" class="dispTabl width100 edtCtrl" scope="EDT">
                <elemento tag="div" class="dispTablCell width30" scope="EDT">
                    <elemento tag="p" id="setField-label-p" class="p FntDocEditor AlignCenter" scope="EDT">
                        <HTMLAttribute name="title" value="XXXDicaXXX"/>
                        <elemento tag="span" id="setField-label-span" scope="EDT">
                            XXXLabelXXX
                        </elemento>
                    </elemento>
                </elemento>
                <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT">
                    <innerContent scope="EDT"/>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="HorizontalBar">
        <versao id="1.0">
            <elemento tag="div" scope="EDT" class="DivLikeHr">
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="HorizontalBarBottom">
        <versao id="1.0">
            <elemento tag="div" scope="EDT_BOTTOM" class="DivLikeHr"/>
        </versao>
    </classeDef>    

    <classeDef id="InputMonetarioCtrl">
        <versao id="1.0">
            <elemento tag="div" id="inputMonetario.Container" class="dispTabl width100 edtCtrl" scope="EDT_CORE"> 
                <elemento tag="div" class="dispTablCell width30" scope="EDT"> 
                    <elemento id="inputMonetario.label" tag="p" class="p FntDocEditor AlignCenter" scope="EDT">
                        Monetário
                    </elemento> 
                </elemento> 
                <elemento tag="div" class="dispTablCell width70 edtCtrl" scope="EDT"> 
                    <elemento id="inputMonetario.input" tag="input" class="p AlignCenter BrdRad3px FntDocEdt width100" scope="EDT"> 
                        <HTMLAttribute name="type" value="text"/> 
                        <HTMLAttribute name="placeHolder" value="12.354,75"/> 
                        <HTMLAttribute name="size" value="14"/> 
                    </elemento> 
                </elemento> 
            </elemento>
        </versao>
    </classeDef>    
    
    <classeDef id="j2Data">
        <versao id="1.0">
            <elemento id="j2Data" tag="div" scope="EXP" class="Hidden">
                <HTMLAttribute name="name" value="ndhe"/>
                <elemento id="j2Data.idProcesso" tag="input" scope="EXP" >
                    <HTMLAttribute name="type" value="text"/>
                </elemento>
                <!--elemento id="j2Data" tag="div" scope="EXP" class="Hidden"/>
                <elemento id="j2Data" tag="div" scope="EXP" class="Hidden"/>
                <elemento id="j2Data" tag="div" scope="EXP" class="Hidden"/>
                <elemento id="j2Data" tag="div" scope="EXP" class="Hidden"/-->
            </elemento>
        </versao>
    </classeDef>    
    
    <classeDef id="LocalEData">
        <versao id="1.0">
            <elemento tag="p" id="LocalEData" scope="EXP" class="p FntMod1 AlignCenter">
                #{j2.env.PJeVars.unidade.cidade}-#{j2.env.PJeVars.unidade.UF}, #{j2.env.PJeVars.data.formatada}
            </elemento>
        </versao>
        <versao id="1.1">
            <elemento tag="p" id="LocalEData" scope="EXP" class="p FntModDefault AlignCenter">
                #{j2.env.PJeVars.unidade.cidade}-#{j2.env.PJeVars.unidade.UF}, #{j2.env.PJeVars.data.system.extenso}
            </elemento>
        </versao>
        <versao id="2.0">
            <elemento tag="p" id="LocalEData" scope="EXP" class="p FntModDefault Indnt3cm marginAtoJudicial">
                #{j2.env.PJeVars.unidade.cidade}-#{j2.env.PJeVars.unidade.UF}, #{j2.env.PJeVars.data.formatada}
            </elemento>
        </versao>
        <versao id="3.0">
            <elemento tag="p" id="LocalEData" scope="EXP" class="p FntModDefault AlignRight">
                #{j2.env.PJeVars.unidade.cidade}-#{j2.env.PJeVars.unidade.UF}, #{j2.env.PJeVars.data.formatada}
            </elemento>
        </versao>
    </classeDef>
        
    <classeDef id="DadoEPassado">
        <versao id="1.0">
            <elemento tag="p" id="dadoEPassado" scope="EXP" class="p Indnt3cm">                 
                Dado e passado o presente mandado nesta cidade de #{j2.env.PJeVars.unidade.cidade}, 
                Estado do #{j2.env.PJeVars.unidade.UFFormal}, aos #{j2.env.PJeVars.data.dataEHoraAtualFormal}, 
                na Secretaria Judicial deste Juizado. Eu, #{j2.env.PJeVars.usuario.nomex}, #{j2.env.PJeVars.usuario.cargoJ2}, o digitei.
            </elemento>    
        </versao>
    </classeDef>
    
    <classeDef id="MandadoDeOrdemJuiz">
        <versao id="1.0">
            <elemento tag="div" scope="EXP" id="deOrdemMandadoTradicional_div">
                <elemento tag="div" scope="EXP">
                    <HTMLAttribute name="style" value="width:100%;display: inline-flex;" />
                    <elemento tag="div" scope="EXP" >
                        <HTMLAttribute name="style" value="width:50%;" />
                        <textHTML scope="EXP">
                            <data>
                                <![CDATA[<span style="display:none">&nbsp;</span>]]>
                            </data>
                        </textHTML>
                    </elemento>
                    <elemento tag="div" scope="EXP" >
                        <HTMLAttribute name="style" value="width:50%;" />
                        <elemento tag="p" id="deOrdemMandadoTradicional" scope="EXP" class="p FntMod1 AlignJustify">
                            DE ORDEM DE SUA EXCELÊNCIA #{j2.env.PJeVars.expediente.deOrdemCaixaAlta}, ESTADO DO MARANHÃO
                            NA FORMA DA LEI, ETC. (ART. 250, VI, CPC)
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="MenuDeAtalhos">
        <versao id="1.0">
            <elemento tag="div" scope="EXP" id="ShortCutMenu.Container" class="pgMenuShortCut">
                <elemento tag="div" scope="EXP" id="ShortCutMenu.Popup" class="ShortCutMenuPopup Hidden">
                    <HTMLAttribute name="ndhe" value="ndhe"/>
                    <elemento tag="div" scope="EXP" id="ShortCutMenu.styles">
                        <textHTML scope="EXP">
                            <data>
                                <![CDATA[<div><span style="display:none">.</span></div>]]>
                            </data>
                        </textHTML>           
                    </elemento>                        
                    <elemento tag="div" scope="EXP" id="ShortCutMenu.Items">
                        <elemento tag="table" scope="EXP" >
                            <HTMLAttribute name="style" value="WIDTH: 120px; BORDER-COLLAPSE: collapse; MARGIN: 0pt; LINE-HEIGHT: 1"/>
                            <elemento tag="tbody" id="ShortCutMenu.Items.tbody" scope="EXP">
                                <elemento tag="tr"  scope="EXP">
                                    <elemento tag="td" scope="EXP">
                                        <textHTML scope="EXP">
                                            <data>
                                                <![CDATA[<div><span style="display:none">.</span></div>]]>
                                            </data>
                                        </textHTML>                                        
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>                    
                </elemento>                
                <elemento tag="img" scope="EXP" class="CursPnt" id="ShortCutMenu.Action">
                    <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAC7mlDQ1BJQ0MgUHJvZmlsZQAAeAGFVM9rE0EU/jZuqdAiCFprDrJ4kCJJWatoRdQ2/RFiawzbH7ZFkGQzSdZuNuvuJrWliOTi0SreRe2hB/+AHnrwZC9KhVpFKN6rKGKhFy3xzW5MtqXqwM5+8943731vdt8ADXLSNPWABOQNx1KiEWlsfEJq/IgAjqIJQTQlVdvsTiQGQYNz+Xvn2HoPgVtWw3v7d7J3rZrStpoHhP1A4Eea2Sqw7xdxClkSAog836Epx3QI3+PY8uyPOU55eMG1Dys9xFkifEA1Lc5/TbhTzSXTQINIOJT1cVI+nNeLlNcdB2luZsbIEL1PkKa7zO6rYqGcTvYOkL2d9H5Os94+wiHCCxmtP0a4jZ71jNU/4mHhpObEhj0cGDX0+GAVtxqp+DXCFF8QTSeiVHHZLg3xmK79VvJKgnCQOMpkYYBzWkhP10xu+LqHBX0m1xOv4ndWUeF5jxNn3tTd70XaAq8wDh0MGgyaDUhQEEUEYZiwUECGPBoxNLJyPyOrBhuTezJ1JGq7dGJEsUF7Ntw9t1Gk3Tz+KCJxlEO1CJL8Qf4qr8lP5Xn5y1yw2Fb3lK2bmrry4DvF5Zm5Gh7X08jjc01efJXUdpNXR5aseXq8muwaP+xXlzHmgjWPxHOw+/EtX5XMlymMFMXjVfPqS4R1WjE3359sfzs94i7PLrXWc62JizdWm5dn/WpI++6qvJPmVflPXvXx/GfNxGPiKTEmdornIYmXxS7xkthLqwviYG3HCJ2VhinSbZH6JNVgYJq89S9dP1t4vUZ/DPVRlBnM0lSJ93/CKmQ0nbkOb/qP28f8F+T3iuefKAIvbODImbptU3HvEKFlpW5zrgIXv9F98LZua6N+OPwEWDyrFq1SNZ8gvAEcdod6HugpmNOWls05Uocsn5O66cpiUsxQ20NSUtcl12VLFrOZVWLpdtiZ0x1uHKE5QvfEp0plk/qv8RGw/bBS+fmsUtl+ThrWgZf6b8C8/UXAeIuJAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAbklEQVQ4EWNgGAUkh4CpqamEsbHxf5hGJhiDGBqk+d+/f8+ZmJgkYeoZYQxCNLLm06dPv4CpJ8oAXJpBhhD0ArpmEJ/oMMCmmegwwKeZYBgQqxlrGBDSDJLHGQbEaEYPA5RYgEnC/EiID0sLFNEANPaK/mnMaAUAAAAASUVORK5CYII="/>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="ModalDialog">
        <versao id="3.0">
            <elemento tag="div" scope="EDT" class="richModalPanel" id="panelContainer">
                <elemento tag="div" scope="EDT" class="richMaskDivOpaque" id="panelDiv"/>
                <elemento tag="div" scope="EDT" class="richPanel">
                    <elemento tag="div" scope="EDT" class="richContainer" id="panelCDiv" >
                        <elemento tag="div" scope="EDT" class="richShadow" id="panelShadowDiv"/>
                        <elemento tag="div" scope="EDT" class="richContent" id="panelContentDiv">
                            <elemento tag="div" scope="EDT" class="richText richControls posAbs">
                                <elemento tag="img" scope="EDT" id="btnDialogClose" >
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/closeMP.gif"/>
                                </elemento>
                            </elemento>
                            <elemento tag="table" scope="EDT" class="richContentTable" id="panelContentTable">
                                <HTMLAttribute name="border" value="0"/>
                                <HTMLAttribute name="cellpadding" value="0"/>
                                <HTMLAttribute name="cellspacing" value="0"/>
                                <elemento tag="tbody" scope="EDT" >
                                    <elemento tag="tr" scope="EDT" >
                                        <HTMLAttribute name="style" value="height: 1%"/>
                                        <elemento tag="td" scope="EDT" class="richHeaderCell">
                                            <elemento scope="EDT" tag="div" class="richText richHeader richHeaderColor" id="panelDialogModalHeader" >Modelos j2</elemento>
                                        </elemento>
                                    </elemento>
                                    <elemento tag="tr" scope="EDT" >
                                        <HTMLAttribute name="style" value="height: 99%"/>
                                        <elemento tag="td" scope="EDT" class="richBody" valign="top">
                                            <innerContent scope="EDT"/>
                                        </elemento>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao> 
    </classeDef>
    
    <classeDef id="ModalDialogContent">
        <versao id="3.0">
            <elemento tag="table" scope="EDT">
                <HTMLAttribute name="width" value="100%"/>
                <HTMLAttribute name="cellspacing" value="5"/>
                <elemento tag="tbody" scope="EDT">
                    <elemento tag="tr" scope="EDT">
                        <elemento tag="td" scope="EDT">
                            <elemento tag="div"  scope="EDT" class="richText fntWeightNormal FntDocEdt" id="panelDialogModalMessage">MENSAGEM NÃO DEFINIDA</elemento>
                        </elemento>
                    </elemento>
                    <elemento tag="tr"  scope="EDT">
                        <elemento tag="td" scope="EDT">
                            <innerContent scope="EDT"/>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="ModalDialogOkCancel">
        <versao id="3.0">
            <elemento tag="div"  scope="EDT" id="j_id56">
                <HTMLAttribute name="style" value="display:flex; width: 100%;"/>
                <elemento tag="div"  scope="EDT" id="j_id56">
                    <HTMLAttribute name="style" value="width: 50%; text-align: center;"/>
                    <elemento tag="input" scope="EDT" id="btnOk" class="richInputButton">			
                        <HTMLAttribute name="type" value="button"/>
                        <HTMLAttribute name="value" value="OK"/>
                    </elemento>
                </elemento>

                <elemento tag="div"  scope="EDT" id="j_id56">
                    <HTMLAttribute name="style" value="width: 50%; text-align: center;"/>
                    <elemento tag="input" scope="EDT" id="btnCancel" class="richInputButton">
                        <HTMLAttribute name="type" value="button"/>
                        <HTMLAttribute name="value" value="Cancelar"/>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="ModalDialogOk">
        <versao id="3.0">
            <elemento tag="div"  scope="EDT" id="j_id56">
                <HTMLAttribute name="style" value="width: 100%; text-align:center"/>
                <elemento tag="input" scope="EDT" id="btnOk" class="richInputButton">			
                    <HTMLAttribute name="type" value="button"/>
                    <HTMLAttribute name="value" value="OK"/>
                    <HTMLAttribute name="onclick" value="alert('clicked!');"/>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="NormalizarFormatacao">
        <versao id="3.0">
            <elemento tag="div" scope="EXP" class="DivEditLimit" id="normalizeFormtas">
                <innerContent scope="EXP"/>
            </elemento>
            <!-- editor scope -->
            <elemento  tag="div" id="normalizeFormatsCtrls" scope="EDT_BOTTOM" class="width100 Hidden">
                <elemento  tag="button" class="width100 edtCtrl" id="normalizeFormatsButton" scope="EDT">
                    <HTMLAttribute name="class" value="j2New"/>
                    <elemento  tag="P" class="p FntDocEdt AlignCenter" scope="EDT">
                        Normalizar Formatação
                    </elemento>
                </elemento>
                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
            </elemento>
        </versao>    
    </classeDef>    
    
    <classeDef id="MeiosDeEncaminhamento">
        <versao id="2.0">
            <elemento tag="select" scope="EDT_CORE" id="Oficio_Meio_Select" class="p edtCtrl FntDocEdt width100">
                <elemento tag="option" scope="EDT" >
                    <HTMLAttribute name="value" value="Oficio.Meio.centralDeMandados"/>
                    Central de Mandados
                </elemento>
                <elemento tag="option" scope="EDT" >
                    <HTMLAttribute name="value" value="Oficio.Meio.correios"/>
                    Correios
                </elemento>
                <elemento tag="option" scope="EDT" >
                    <HTMLAttribute name="value" value="Oficio.Meio.outro"/>
                    MoloteDigital / E-Mail / Digidoc / SerasaJus
                </elemento>
            </elemento>
        </versao>
        <versao id="2.1">
            <elemento tag="select" scope="EDT_CORE" id="Oficio_Meio_Select" class="p edtCtrl FntDocEdt width100">
                <elemento tag="option" scope="EDT" >
                    <HTMLAttribute name="value" value="Oficio.Meio.outro"/>
                    MoloteDigital / E-Mail / PJe / Outro
                </elemento>
                <elemento tag="option" scope="EDT" >
                    <HTMLAttribute name="value" value="Oficio.Meio.correios"/>
                    Correios
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="OficioCorpo">
        <versao id="2.0">                        
            <elemento tag="P" scope="EXP" id="OficioCorpo-cumrimento" class="p FntModDefault Indnt3cm marginAtoJudicial">
                <elemento tag="span" scope="EXP" id="OficioCorpo-cumprimento-tratamento" >
                    Senhor(a)
                </elemento>
                <elemento tag="span" scope="EXP" id="space">
                    <textHTML scope="EXP">
                        <data><![CDATA[<span>&nbsp;</span>]]></data>
                    </textHTML>
                </elemento>                          
                <elemento tag="span" scope="EXP" id="OficioCorpo-cumprimento-cargo" >
                    Gerente
                </elemento>
            </elemento>
            <elemento tag="P" scope="EXP" id="OficioCorpo-Corpo" class="p FntModDefault Indnt3cm marginAtoJudicial">
                <elemento tag="span" scope="EXP" id="OficioCorpo-cumrimento-peloPresente" >
                    Pelo presente,
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-peloPresenteSpace">
                    <textHTML scope="EXP">
                        <data><![CDATA[<span>&nbsp;</span>]]></data>
                    </textHTML>
                </elemento>                          
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-deOrdemSpan" class="Hidden">
                    <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-deOrdem" class="p edtCtrl FntDocEdt AlignCenter width100">
                        de ordem de Sua Excelência #{j2.env.PJeVars.expediente.deOrdem},
                    </elemento>
                    <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-deOrdemSpace">
                        <textHTML scope="EXP">
                            <data><![CDATA[<span>&nbsp;</span>]]></data>
                        </textHTML>
                    </elemento>
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-solicitacaoOrdem" class="p edtCtrl FntDocEdt AlignCenter width100">
                    #:B{#:U{SOLICITO}} a
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-solicitacaoOrdemSpace">
                    <textHTML scope="EXP">
                        <data><![CDATA[<span>&nbsp;</span>]]></data>
                    </textHTML>
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-pronomeTratamento" class="p edtCtrl FntDocEdt AlignCenter width100">
                    Vossa Senhoria
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-que">
                    <textHTML scope="EXP">
                        <data><![CDATA[<span>&nbsp;que&nbsp;</span>]]></data>
                    </textHTML>
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-finalidade">
                    XXXFinalidadeXXX
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-sobPenaResp" class="Hidden">
                    <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-sobPenaResp.text">
                        , #:B{sob pena de sua responsabilização pelo crime de desobediência (art. 330 CP)}
                    </elemento>
                    <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-sobPenaResp-despAnex" class="Hidden">
                        , conforme despacho prolatado anexo
                    </elemento>
                </elemento>
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-dot">
                    .
                </elemento>
            </elemento>   
            
            <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-ParagrafosAdicionais" class="p FntModDefault Indnt3cm marginAtoJudicial Hidden">
                XXX
            </elemento> 
            
            <elemento tag="P" scope="EXP" id="OficioCorpo-Corpo-reverencia" class="p FntModDefault Indnt3cm marginAtoJudicial">
                <elemento tag="span" scope="EXP" id="OficioCorpo-Corpo-reverencia-atenciosamente">
                    Atenciosamente,
                </elemento>
            </elemento> 
            
            <elemento tag="div" scope="EDT_CORE" id="OficioCorpo-Corpo-controls" >    
                <elemento tag="div" scope="EDT">    
                    <elemento tag="select" scope="EDT" id="OficioCorpo-Corpo-controls-solicitacaoOrdem-select" class="p edtCtrl FntDocEdt width100">
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.solicitacaoOrdem.select.solicitacao"/>
                            <HTMLAttribute name="j2Text" value="SOLICITO"/>
                            <HTMLAttribute name="j2QueHide" value="false"/>
                            Solicitação
                        </elemento>
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.solicitacaoOrdem.select.comunicacao"/>
                            <HTMLAttribute name="j2Text" value="COMUNICO"/>
                            <HTMLAttribute name="j2QueHide" value="false"/>
                            Comunicação
                        </elemento>
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.solicitacaoOrdem.select.determinação"/>
                            <HTMLAttribute name="j2Text" value="DETERMINO"/>
                            <HTMLAttribute name="j2QueHide" value="false"/>
                            Determinação
                        </elemento>
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.solicitacaoOrdem.select.encaminhamento"/>
                            <HTMLAttribute name="j2Text" value="ENCAMINHO"/>
                            <HTMLAttribute name="j2QueHide" value="true"/>
                            Encaminhamento
                        </elemento>
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.solicitacaoOrdem.select.requisição"/>
                            <HTMLAttribute name="j2Text" value="REQUISITO"/>
                            <HTMLAttribute name="j2QueHide" value="false"/>
                            Requisição
                        </elemento>
                    </elemento>
                </elemento>
                <elemento tag="div" scope="EDT_CORE" >    
                    <classeImp id="Selector" versao="3.0" >
                        <constructs param="newId" value="OficioCorpo-Corpo-controls-FinalidadesItens" type="string"/>
                        <constructs param="linkedElement" value="OficioCorpo-Corpo-finalidade" type="string"/>
                        <!--constructs param="linkedElTag" value="UL" type="string"/-->
                        <constructs param="multiple" value="nao" type="bool"/>
                        <constructs param="onChange" value="default" type="string"/>
                        <!--constructs param="onAddAction" value="default" type="string"/>
                        <constructs param="onDelAction" value="default" type="string"/>
                        <constructs param="changeList" value="default" type="string"/-->
                        <constructs param="source" value="#{j2.res.mod.oficioSelSrc}" type="bool"/>
                        <!--constructs param="linkedElStyleClasses" value="p unorderedOrderedList FntModDefault paddingLeft35mm" type="string"/-->
                    </classeImp>  
                </elemento>
                <elemento tag="div" scope="EDT_CORE" >        
                    <elemento tag="div" scope="EDT" id="OficioCorpo-Corpo-controls-sobPena">
                        <HTMLAttribute name="style" value="display: flex;"/>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="float:left;"/>
                            <elemento tag="input" scope="EDT" id="OficioCorpo-Corpo-controls-sobPenRespCheck" class="">
                                <HTMLAttribute name="type" value="checkbox"/>
                            </elemento>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="float:left;"/>
                            <elemento tag="span" scope="EDT" id="OficioCorpo-Corpo-controls-sobPenRespLabel">
                                <elemento tag="p" scope="EDT" class="p FntDocEdt AlignJustify width100">
                                    Sob pena crime desobediência
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>

                    <elemento tag="select" scope="EDT" id="OficioCorpo-Corpo-controls-reverencia-select" class="p edtCtrl FntDocEdt width100">
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.reverencia.select.atenciosamente"/>
                            <HTMLAttribute name="j2Text" value="Atenciosamente"/>
                            Atenciosamente
                        </elemento>
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.reverencia.select.respeitosamente"/>
                            <HTMLAttribute name="j2Text" value="Respeitosamente"/>
                            Respeitosamente
                        </elemento>
                        <elemento tag="option" scope="EDT" >
                            <HTMLAttribute name="value" value="OficioCorpo.Corpo.controls.reverencia.select.cordialmente"/>
                            <HTMLAttribute name="j2Text" value="Cordialmente"/>
                            Cordialmente
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    

    
    
    <classeDef id="OficioNumero">
        <versao id="2.0">            
            <classeImp id="Corpo" versao="1.0" scope="EXP">
                <constructs param="newId" value="oficio_numero" type="string"/>
                <constructs param="textContent" value="Ofício nº #:span@oficio_numeroExp{XXXXNumeroXXXX}/#{j2.env.PJeVars.data.ano}/#{j2.env.PJeVars.expediente.expProcIndex} - 2JECIvelItz." type="string"/>
                <constructs param="styleClasses" value="AlignLeft Indnt0cm" type="string"/>
            </classeImp>
            
            <elemento tag="input" scope="EDT_CORE" id="inuNum" class="p edtCtrl FntDocEdt AlignCenter width100">
                <HTMLAttribute name="type" value="number"/>
                <HTMLAttribute name="placeholder" value="número do ofício sem ano"/>
                <HTMLAttribute name="align" value="middle"/>
            </elemento>
        </versao>
        <versao id="2.1">            
            <classeImp id="Corpo" versao="1.0" scope="EXP">
                <constructs param="newId" value="oficio_numero" type="string"/>
                <constructs param="textContent" value="Ofício nº #:span@oficio_numeroExp{XXXXNumeroXXXX}/#{j2.env.PJeVars.data.ano}/#{j2.env.PJeVars.expediente.expProcIndex} - 2JECIvelItz." type="string"/>
                <constructs param="styleClasses" value="AlignLeft Indnt0cm" type="string"/>
            </classeImp>
            
            <elemento tag="input" scope="EDT_CORE" id="inuNum" class="p edtCtrl FntDocEdt AlignCenter width100 Hidden">
                <HTMLAttribute name="type" value="number"/>
                <HTMLAttribute name="placeholder" value="número do ofício sem ano"/>
                <HTMLAttribute name="align" value="middle"/>
            </elemento>
        </versao>
    </classeDef>
                
    <classeDef id="Pagina1">
        <versao id="2.0">
            <elemento tag="div" id="p1" scope="EXP">
                <HTMLAttribute name="j2" value="Pagina" />
                <elemento tag="div" id="CenteringDiv" scope="EXP">
                    <HTMLAttribute name="align" value="center" />
                    <elemento tag="div" scope="EXP" id="textMargins" class="CenterAlign PaperShadow pgMarginA4 paperA4" >
                        <elemento tag="div" scope="EXP" id="PagesSections" class="p fntMod1 paperA4Content MrgShtSetMenu">
                            <!-- reservado para uma futrara classe autônoma aqui -->
                            <!--elemento tag="button" scope="EXP" id="Reloader" class="Hidden">
                                Recarregar Edição
                            </elemento-->
                            <innerContent scope="EXP"/>
                        </elemento>
                        <classeImp id="MenuDeAtalhos" versao="1.0" scope="EXP"/>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="2.0-p">
            <elemento tag="div" id="p1" scope="EXP">
                <HTMLAttribute name="j2" value="Pagina" />
                <elemento tag="div" id="CenteringDiv" scope="EXP">
                    <HTMLAttribute name="align" value="center" />
                    <elemento tag="div" scope="EXP" id="textMargins" class="CenterAlign PaperShadow pgMarginA4 paperA4Paisagem " >
                        <elemento tag="div" scope="EXP" id="PagesSections" class="p fntMod1 paperA4ContentPaisagem  MrgShtSetMenu">
                            <!-- reservado para uma futrara classe autônoma aqui -->
                            <!--elemento tag="button" scope="EXP" id="Reloader" class="Hidden">
                                Recarregar Edição
                            </elemento-->
                            <innerContent scope="EXP"/>
                        </elemento>
                        <classeImp id="MenuDeAtalhos" versao="1.0" scope="EXP"/>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="mediaSNC">
            <elemento tag="div" id="p1" scope="EXP">
                <HTMLAttribute name="j2" value="Pagina" />
                <elemento tag="div" id="CenteringDiv" scope="EXP">
                    <HTMLAttribute name="align" value="center" />
                    <elemento tag="div" scope="EXP" id="textMargins" class="CenterAlign PaperShadow pgMarginA4 paperA4 SNCMedia2017" >
                        <elemento tag="div" scope="EXP" id="PagesSections" class="p fntMod1 paperA4Content MrgShtSetMenu">
                            <!-- reservado para uma futrara classe autônoma aqui -->
                            <elemento tag="img" id="media" scope="EXP">
                                <HTMLAttribute name="style" value="width:100%;margin-bottom:-120px;" />
                                <!--HTMLAttribute name="src" value="/res/img/mediaSNC2018.png" /-->
                                <HTMLAttribute name="src" value="https://www.dropbox.com/s/rgdoqtugzbjv55d/mediaSNC2018.png?raw=1" />
                            </elemento>
                            <!--elemento tag="button" scope="EXP" id="Reloader" class="Hidden">
                                Recarregar Edição
                            </elemento-->
                            <innerContent scope="EXP"/>
                        </elemento>
                        <classeImp id="MenuDeAtalhos" versao="1.0" scope="EXP"/>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="Pagina2toN">
        <versao id="default">
            <elemento tag="div" id="p#{j2.mod.clsCnstr.Pagina2toN.count}" scope="EXP">
                <HTMLAttribute name="j2" value="Pagina" />
                <elemento tag="div" id="CenteringDiv" scope="EXP">
                    <HTMLAttribute name="align" value="center" />
                    <!--elemento tag="div" scope="EXP" id="textMargins" class="CenterAlign  pgMarginA4 paperA4" -->
                    <elemento tag="div" scope="EXP" id="PagesSections" class="p fntMod1 paperA4Content MrgShtSetMenu PaperShadow CenterAlign">
                        <innerContent scope="EXP"/>
                    </elemento>
                    <!--/elemento-->
                </elemento>
            </elemento>
        </versao>
        <versao id="pageAR7">
            <elemento tag="div" id="p#{j2.mod.clsCnstr.Pagina2toN.count}" scope="EXP">
                <HTMLAttribute name="j2" value="Pagina" />
                <elemento tag="div" id="CenteringDiv" scope="EXP">
                    <HTMLAttribute name="align" value="center" />
                    <!--elemento tag="div" scope="EXP" id="textMargins" class="CenterAlign  pgMarginA4 paperA4" -->
                    <elemento tag="div" scope="EXP" id="PagesSections" class="p fntMod1 paperA4Content MrgShtSetMenu PaperShadow CenterAlign pageAR7">
                        <innerContent scope="EXP"/>
                    </elemento>
                    <!--/elemento-->
                </elemento>
            </elemento>
        </versao>
    </classeDef>    
    
    <classeDef id="Popup">
        <versao id="1.0">
            <elemento tag="div" scope="EXP" class="richModalPanelToPopup" id="Popup.panelContainer">
                <!--elemento tag="div" scope="EXP" class="richMaskDivOpaque" id="panelDiv"/-->
                <elemento tag="div" scope="EXP" class="richPanel">
                    <elemento tag="div" scope="EXP" class="richContainer" id="panelCDiv">
                        <elemento tag="div" scope="EXP" class="richShadow" id="panelShadowDiv"/>
                        <elemento tag="div" scope="EXP" class="richContent" id="panelContentDiv">
                            <elemento tag="div" scope="EXP" class="richText richControls posAbs">
                                <elemento tag="img" scope="EXP" id="btnDialogClose" >
                                    <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/closeMP.gif"/>
                                </elemento>
                            </elemento>
                            <elemento tag="table" scope="EXP" class="richContentTable" id="panelContentTable">
                                <HTMLAttribute name="border" value="0"/>
                                <HTMLAttribute name="cellpadding" value="0"/>
                                <HTMLAttribute name="cellspacing" value="0"/>
                                <elemento tag="tbody" scope="EXP" >
                                    <elemento tag="tr" scope="EXP" >
                                        <HTMLAttribute name="style" value="height: 1%"/>
                                        <elemento tag="td" scope="EXP" class="richHeaderCell">
                                            <elemento scope="EXP" tag="div" class="richText richHeader richHeaderColor" id="panelDialogModalHeader" >Modelos j2</elemento>
                                        </elemento>
                                    </elemento>
                                    <elemento tag="tr" scope="EXP" >
                                        <HTMLAttribute name="style" value="height: 99%"/>
                                        <elemento tag="td" scope="EXP" class="richBody" valign="top">
                                            <innerContent scope="EXP"/>
                                        </elemento>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao> 
    </classeDef>
    
    <classeDef id="PopupContent">
        <versao id="3.0">
            <elemento tag="table" scope="EXP">
                <HTMLAttribute name="width" value="100%"/>
                <HTMLAttribute name="cellspacing" value="5"/>
                <elemento tag="tbody" scope="EXP">
                    <elemento tag="tr" scope="EXP">
                        <elemento tag="td" scope="EXP">
                            <elemento tag="div"  scope="EXP" class="richText fntWeightNormal FntDocEdt" id="panelDialogModalMessage">MENSAGEM NÃO DEFINIDA</elemento>
                        </elemento>
                    </elemento>
                    <elemento tag="tr"  scope="EXP">
                        <elemento tag="td" scope="EXP">
                            <innerContent scope="EXP"/>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
        
    <classeDef id="QualificacaoTablePeticaoInicial">
        <versao id="1.0">
            <elemento tag="table" id="QlfcTable" scope="EXP" class="QualfTable">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="15%"/>
                            <HTMLAttribute name="style" value="vertical-align:15%;"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Classe CNJ:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" id="QualificacaoTablePeticaoInicial.classe" scope="EXP" class="p FntMod1">Procedimento de Juizado Especial Cível</elemento>
                        </elemento>                        
                    </elemento>      
                    
                          
                    <!-- linha do polo ativo -->
                    
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="15%"/>
                            <HTMLAttribute name="style" value="vertical-align:15%;"/>
                            <elemento tag="p" id="QualificacaoTablePeticaoInicial.poloAtivo" scope="EXP" class="p FntMod1 b">#{j2.env.PJeVars.processo.polos.ativo}:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" id="QualificacaoTablePeticaoInicial.partesPoloAtivo" scope="EXP" class="p FntMod1">
                                
                                <classeImp id="TermoReclamacao.Qualificacao.PFTemplate" versao="1.0" scope="EDT"/>
                                
                            </elemento>
                        </elemento>                        
                    </elemento>

                    
                    <!-- Linha do polo passivo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="15%"/>
                            <HTMLAttribute name="style" value="vertical-align:15%;"/>
                            <elemento tag="p" id="QualificacaoTablePeticaoInicial.poloPassivo" scope="EXP" class="p FntMod1 b">#{j2.env.PJeVars.processo.polos.passivo}:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" id="QualificacaoTablePeticaoInicial.partesPoloPassivo" scope="EXP" class="p FntMod1">
                                
                                <classeImp id="TermoReclamacao.Qualificacao.PJTemplate" versao="1.0" scope="EDT"/>
                                
                            </elemento>
                        </elemento>                        
                    </elemento>                        
                </elemento>
            </elemento>   
        </versao>
    </classeDef>        
    
    <classeDef id="QualificacaoOfício">
        <versao id="1.0">
            <elemento tag="table" id="QlfcTableOfc" scope="EXP" class="QualfTable">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha da referência -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="3%"/>
                            <HTMLAttribute name="colspan" value="2"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Referência:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="97%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b"></elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha da qualificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="3%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b"></elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="97%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">
                                <innerContent scope="EXP"/>
                            </elemento>
                        </elemento>                        
                    </elemento>
                    <!-- fim das linhas da tabela-->                                                                                            
                </elemento>
            </elemento>   
        </versao>
    </classeDef>    
    
    <classeDef id="QualificacaoTable">
        <versao id="3.0">
            <elemento tag="table" id="QlfcTable" scope="EXP" class="QualfTable">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha da numero do processo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Processo nº:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">#{j2.env.PJeVars.processo.numero}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="classeCNJRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Classe CNJ:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.processo.classe}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="assuntosRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Assuntos CNJ:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.processo.assuntos}</elemento>
                        </elemento>                        
                    </elemento>                    
                    <!-- linha do polo ativo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="QualificacaoTable-poloAtivo-Linha">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">#{j2.env.PJeVars.processo.polos.ativo}:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.partes.ativa.nome}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do polo ativo advogado -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="advPoloAtivoRow" >
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Advogado(a)(s):</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.partes.ativa.advogado.nome}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do polo passivo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="QualificacaoTable-poloPassivo-Linha">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">#{j2.env.PJeVars.processo.polos.passivo}:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.partes.passiva.nome}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do pólo passivo advogado -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="advPoloPassivoRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Advogado(a)(s):</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.partes.passiva.advogado.nome}</elemento>
                        </elemento>                        
                    </elemento>        
                    <!-- linha do horário da audiência -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow" id="audienciaRow">
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="20%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1 b">Audiência:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP">
                            <HTMLAttribute name="width" value="80%"/>
                            <elemento tag="p" scope="EXP" class="p FntMod1">#{j2.env.PJeVars.audiencia.data} - #{j2.env.PJeVars.audiencia.tipo}</elemento>
                        </elemento>                        
                    </elemento>                            
                    <!-- fim das linhas da tabela-->                                                                                            
                </elemento>
            </elemento>   
        </versao>
    </classeDef>   
        
    <classeDef id="QualificacaoTableAlvara">
        <versao id="3.0">
            <elemento tag="table" id="QlfcTable" scope="EXP" class="QualfTable lightBorderBlack">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha da numero do processo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Processo nº:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">#{j2.env.PJeVars.processo.numero}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Classe CNJ:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.processo.classe}</elemento>
                        </elemento>                        
                    </elemento>                
                    <!-- linha do polo ativo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Credor:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="32%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.partes.ativa.nome}</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">CPF/CNPJ:</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="15%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">XXXCpfCnpjXXX</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do polo ativo advogado -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack" id="0">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Advogado(a)(s):</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.partes.ativa.advogado.nome}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do polo passivo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Devedor:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="32%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.partes.passiva.nome}</elemento>
                        </elemento>    
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">CPF/CNPJ:</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="15%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">XXXCpfCnpjXXX</elemento>
                        </elemento>                     
                    </elemento>
                    <!-- Linha do pólo passivo advogado -->
                    <!--elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack" id="0">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Advogado(a)(s):</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.partes.passiva.advogado.nome}</elemento>
                        </elemento>                        
                    </elemento-->        
                    <!-- linha do audiência -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack" >
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Valor:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">R$ XXXValorXXX (XXXValorExtensoXXX)</elemento>
                        </elemento>                        
                    </elemento>                          
                    <!-- linha da conta agência -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Conta Judicial:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="32%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">XXXNumeroDaContaJudicial</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Agência:</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="15%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">XXXCpfCnpjXXX</elemento>
                        </elemento>                        
                    </elemento>  
                    <!-- fim das linhas da tabela-->                                                                                            
                </elemento>
            </elemento>   
        </versao>
        <versao id="3.1">
            <elemento tag="table" id="QlfcTable" scope="EXP" class="QualfTable lightBorderBlack">   
                <HTMLAttribute name="border" value="0"/>
                <HTMLAttribute name="cellpadding" value="2"/>
                <HTMLAttribute name="cellspacing" value="0"/>
                <elemento tag="tbody" scope="EXP">
                    <!-- Linha da numero do processo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Processo nº:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">#{j2.env.PJeVars.processo.numero}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- linha da classificação -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Classe CNJ:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.processo.classe}</elemento>
                        </elemento>                        
                    </elemento>                
                    <!-- linha do polo ativo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Credor:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="32%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.mod.clsCnstr.Alvara.AlvaraEdit.currParsingCredor.nome}</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">CPF/CNPJ:</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="15%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.mod.clsCnstr.Alvara.AlvaraEdit.currParsingCredor.CPFCNPJ}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do polo ativo advogado -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack" id="0">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Advogado(a)(s):</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.mod.clsCnstr.Alvara.AlvaraEdit.currParsingCredor.advogadosFormatado}</elemento>
                        </elemento>                        
                    </elemento>
                    <!-- Linha do polo passivo -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Devedor:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="32%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.mod.clsCnstr.Alvara.AlvaraEdit.currParsingDevedor}</elemento>
                        </elemento>    
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">CPF/CNPJ:</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="15%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.mod.clsCnstr.Alvara.AlvaraEdit.currParsingDevedor.CPFCNPJ}</elemento>
                        </elemento>                     
                    </elemento>
                    <!-- Linha do pólo passivo advogado -->
                    <!--elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack" id="0">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Advogado(a)(s):</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">#{j2.env.PJeVars.partes.passiva.advogado.nome}</elemento>
                        </elemento>                        
                    </elemento-->        
                    <!-- linha do audiência -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack" >
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Valor:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="87%"/>
                            <HTMLAttribute name="colspan" value="3"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">R$ XXXValorXXX (XXXValorExtensoXXX)</elemento>
                        </elemento>                        
                    </elemento>                          
                    <!-- linha da conta agência -->
                    <elemento tag="tr" scope="EXP" class="QlTbRow lightBorderBlack">
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="13%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Conta Judicial:</elemento>
                        </elemento>
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="32%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">XXXNumeroDaContaJudicial</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="10%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault b">Agência:</elemento>
                        </elemento>                        
                        <elemento tag="td" scope="EXP" class="lightBorderBlack">
                            <HTMLAttribute name="width" value="15%"/>
                            <elemento tag="p" scope="EXP" class="p FntModDefault">XXXCpfCnpjXXX</elemento>
                        </elemento>                        
                    </elemento>  
                    <!-- fim das linhas da tabela-->                                                                                            
                </elemento>
            </elemento>   
        </versao>
    </classeDef>     
    
    <classeDef id="QuebraDePagina">
        <versao id="3.0">
            <elemento tag="div" id="quebraPagina" scope="EXP">
                <HTMLAttribute name="style" value="HEIGHT: 30px; PAGE-BREAK-AFTER: always"/>
                <HTMLAttribute name="j2" value="QuebraDePagina"/>
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[<span style="display:none">&nbsp;</span>]]>
                    </data>
                </textHTML>
            </elemento>
        </versao>
    </classeDef>

    <classeDef id="ReferenciaDocumento">
        <versao id="2.0">
            <elemento tag="div" id="ReferenciaDocumento.Core" scope="EDT">
                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                
                <elemento tag="div" id="ReferenciaDocumento.Initial" scope="EDT">
                    <elemento tag="button" id="ReferenciaDocumento.Activator" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">

                        Inserir Referência de Documento
                        <elemento tag="img" scope="EDT" id="ReferenciaDocumento.View" class="vertAlignBottom">
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                        </elemento>

                    </elemento>
                </elemento>
                <elemento tag="div" id="ReferenciaDocumento.Activated" scope="EDT" class="Hidden">
                    <elemento tag="button" id="ReferenciaDocumento.WindowListOpener" scope="EDT" class="p FntModeEditor edtCtrl vertAlignBottom ReferenciaDocumento.ReopenButton AlignCenter">
                        <elemento tag="img" scope="EDT" >
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHSSURBVDjLpZPbSxtREMbzL4pSpYj1VilUmmpQSCKCSLAgihFTo9Eg0TRZY5LdxJgbKYo+2AstLRbU1nfxrlmTdLPJ55nZ+OCjyYGPYQ8zv/PN7DkmAKZGZGoakN5OKSeqPfAPtk9Ca8ew+g4xvPIHQ94DWJZ/Y3DxJ94v/ID54zf0z32BbXFPpToGODZOKrPpUzxX5pmdCgPo5HrUN7kNBtjW/qKe1TORMwDW1SPeeJ0ucMzlcshms0gmkyhqVSQSCVzmdSiKAlmWEQ6HOa/TkakBxMBolUQyFRRIpQruijp/3xR0XN/ruMiXcXar4fRG4/yOsaQBoGmzpa08x0wmg1QqhVgsxoBoNMoQSZIQCATg9/s5r300YQDoV9HS9Cr+l6vspFRzQgBVOCE3j06uVJ3zX47EDIBl6RdvdG9ec6Se4/E4QqEQA4LBIO5FSz6fD16vFx6Ph/PabLIBMM9/541ypYpyzQWpqD2VKiB54YJEq2VowwC8m/tqTFU+50i9RyIR7pUK6WSKbrcbLpcLTqeT85ot6wagf3a/rnvQNCjh8S1Ib6Z3+Wb1fviMLkcWr8bTYsqbPKg2u4JWawQvhsPCdkicLEHUkCQGNPwaGwU8AG9RQVkc+5PeAAAAAElFTkSuQmCC"/>
                        </elemento>
                    </elemento>
                    <elemento tag="select" id="ReferenciaDocumento.SelectMethod" scope="EDT" class="p FntModeEditor width100 edtCtrl ReferenciaDocumento.SelectMethod">
                        <HTMLAttribute name="title" value="Para inserir o id da lista de documentos do processo, é preciso que o id esteja visível na lista de documentos."/>
                        <elemento tag="option" scope="EDT">
                            <HTMLAttribute name="value" value="docAutos"/>O documento visualizado nos autos digitais</elemento>
                        <elemento tag="option" scope="EDT">
                            <HTMLAttribute name="value" value="listSel"/>Id Selecionado na Lista</elemento>
                        <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="docSel"/>Id Selecionado no Documento</elemento>
                        <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="firstId"/>Primeiro Id na Lista</elemento>
                        <elemento tag="option" scope="EDT"><HTMLAttribute name="value" value="idManual"/>Digitar o id</elemento>
                        
                        
                    </elemento>       
                    <elemento tag="div" scope="EDT" id="ReferenciaDocumento.AddIdDiv">
                        <HTMLAttribute name="style" value="width:11%; float:right"/>
                        <elemento tag="button" id="ReferenciaDocumento.AddId" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                            </elemento>
                        </elemento>
                    </elemento>
                    <elemento tag="div" scope="EDT" class="Hidden" id="ReferenciaDocumento.TextIdDiv">
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="width:100%; display: inline-block;"/>
                            <elemento tag="div" scope="EDT">
                                <HTMLAttribute name="style" value="width:88%; display: inline-block;"/>
                                <elemento tag="input" id="ReferenciaDocumento.TextIdInput" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                                    <HTMLAttribute name="type" value="text"/>  
                                </elemento>                          
                            </elemento>
                            <elemento tag="div" scope="EDT">
                                <HTMLAttribute name="style" value="width:11%; float:right"/>
                                <elemento tag="button" id="ReferenciaDocumento.AddIdManual" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                                    <elemento tag="img" scope="EDT" >
                                        <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
        <versao id="3.0">
            <elemento tag="div" id="ReferenciaDocumento.Core" scope="EDT">
                <elemento tag="div" scope="EDT" class="DivLikeHr"/>
                
                <elemento tag="div" id="ReferenciaDocumento.Initial" scope="EDT">
                    <elemento tag="button" id="ReferenciaDocumento.Activator" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">

                        Inserir Referência de Documento
                        <elemento tag="img" scope="EDT" id="ReferenciaDocumento.View" class="vertAlignBottom">
                            <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/view.gif"/>
                        </elemento>

                    </elemento>
                </elemento>
                <elemento tag="div" id="ReferenciaDocumento.Activated" scope="EDT" class="Hidden">
                    <elemento tag="button" id="ReferenciaDocumento.WindowListOpener" scope="EDT" class="p FntModeEditor edtCtrl vertAlignBottom ReferenciaDocumento.ReopenButton AlignCenter">
                        <elemento tag="img" scope="EDT" >
                            <HTMLAttribute name="src" value="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHSSURBVDjLpZPbSxtREMbzL4pSpYj1VilUmmpQSCKCSLAgihFTo9Eg0TRZY5LdxJgbKYo+2AstLRbU1nfxrlmTdLPJ55nZ+OCjyYGPYQ8zv/PN7DkmAKZGZGoakN5OKSeqPfAPtk9Ca8ew+g4xvPIHQ94DWJZ/Y3DxJ94v/ID54zf0z32BbXFPpToGODZOKrPpUzxX5pmdCgPo5HrUN7kNBtjW/qKe1TORMwDW1SPeeJ0ucMzlcshms0gmkyhqVSQSCVzmdSiKAlmWEQ6HOa/TkakBxMBolUQyFRRIpQruijp/3xR0XN/ruMiXcXar4fRG4/yOsaQBoGmzpa08x0wmg1QqhVgsxoBoNMoQSZIQCATg9/s5r300YQDoV9HS9Cr+l6vspFRzQgBVOCE3j06uVJ3zX47EDIBl6RdvdG9ec6Se4/E4QqEQA4LBIO5FSz6fD16vFx6Ph/PabLIBMM9/541ypYpyzQWpqD2VKiB54YJEq2VowwC8m/tqTFU+50i9RyIR7pUK6WSKbrcbLpcLTqeT85ot6wagf3a/rnvQNCjh8S1Ib6Z3+Wb1fviMLkcWr8bTYsqbPKg2u4JWawQvhsPCdkicLEHUkCQGNPwaGwU8AG9RQVkc+5PeAAAAAElFTkSuQmCC"/>
                        </elemento>
                    </elemento>
                    <elemento tag="select" id="ReferenciaDocumento.SelectMethod" scope="EDT" class="p FntModeEditor width100 edtCtrl ReferenciaDocumento.SelectMethod">
                        
                        <elemento tag="option" scope="EDT">
                            <HTMLAttribute name="value" value="docAutos"/>O documento visualizado nos autos digitais</elemento>                        
                    </elemento>       
                    <elemento tag="div" scope="EDT" id="ReferenciaDocumento.AddIdDiv">
                        <HTMLAttribute name="style" value="width:11%; float:right"/>
                        <elemento tag="button" id="ReferenciaDocumento.AddId" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                            </elemento>
                        </elemento>
                    </elemento>
                    <elemento tag="div" scope="EDT" class="Hidden" id="ReferenciaDocumento.TextIdDiv">
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="width:100%; display: inline-block;"/>
                            <elemento tag="div" scope="EDT">
                                <HTMLAttribute name="style" value="width:88%; display: inline-block;"/>
                                <elemento tag="input" id="ReferenciaDocumento.TextIdInput" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                                    <HTMLAttribute name="type" value="text"/>  
                                </elemento>                          
                            </elemento>
                            <elemento tag="div" scope="EDT">
                                <HTMLAttribute name="style" value="width:11%; float:right"/>
                                <elemento tag="button" id="ReferenciaDocumento.AddIdManual" scope="EDT" class="p FntModeEditor width100 edtCtrl AlignCenter">
                                    <elemento tag="img" scope="EDT" >
                                        <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                     <elemento tag="div" scope="EDT" id="ReferenciaDocumento-CheckBox-Div">
                        <HTMLAttribute name="style" value="display: flex; margin-top: 3px;"/>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="float:left;"/>
                            <elemento tag="input" scope="EDT" id="ReferenciaDocumento-CheckBox-Input" class="">
                                <HTMLAttribute name="type" value="checkbox"/>
                            </elemento>
                        </elemento>
                        <elemento tag="div" scope="EDT">
                            <HTMLAttribute name="style" value="float:left;"/>
                            <elemento tag="label" scope="EDT" >
                                <elemento tag="p" scope="EDT" id="ReferenciaDocumento-CheckBox-Label" class="p FntDocEdt AlignJustify width100">
                                    Requisitar vinculação de anexo de documento PJe
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>
        </versao>
    </classeDef>
    
    <classeDef id="Secao">
        <versao id="1.0">
            <elemento tag="div" scope="EXP" id="secao">
                <HTMLAttribute name="name" value="secao"/>
                <innerContent scope="EXP"/>
            </elemento>
        </versao>    
    </classeDef>
                    
    <classeDef id="SeletorAdvertencias">
        <versao id="1.0">
            <elemento tag="div" id="advertencias" scope="EXP">
                <elemento tag="p" scope="EXP" class="p FntModAdvertencias underlined b">
                    ADVERTÊNCIAS
                </elemento>
                <elemento tag="ul" scope="EXP" id="listAdvertencia" class="advertenciaUL FntModAdvertencias"/>
            </elemento>
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="advertenciasItens" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="source" value="advertencias" type="bool"/>
                <constructs param="linkedElement" value="listAdvertencia" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.1">
            <elemento tag="div" id="advertencias" scope="EXP">
                <elemento tag="p" scope="EXP" class="p FntModAdvertencias underlined b">
                    ADVERTÊNCIAS
                </elemento>
                <elemento tag="ul" scope="EXP" id="listAdvertencia" class="advertenciaUL FntModAdvertencias"/>
            </elemento>
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="advertenciasItens" type="string"/>
                <constructs param="initialHidden" value="true" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="source" value="advertencias" type="bool"/>
                <constructs param="linkedElement" value="listAdvertencia" type="string"/>
            </classeImp>    
        </versao>
    </classeDef>
    
    <classeDef id="SeletorOJ">
        <versao id="2.0">
            <elemento tag="p" id="oficialJustica" scope="EXP" class="p FntMod1 AlignRight FntModLess">
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B>Oficial de Justiça:</B>&nbsp;<span id="oficialJusticaText">[indefinido]</span>
                        ]]>
                    </data>
                </textHTML>
            </elemento>           

            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="OJsItems" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="oficialJusticaText" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorOJ.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
        <versao id="3.0">
            <elemento tag="p" id="oficialJustica" scope="EXP" class="p FntModDefault AlignlEFT marginAtoJudicial">
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B><U>Oficial de Justiça:</U></B>&nbsp;<span id="oficialJusticaText">[indefinido]</span>
                        ]]>
                    </data>
                </textHTML>
            </elemento>           

        
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="OJsItems" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="oficialJusticaText" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorOJ.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
    </classeDef>
    
    <classeDef id="SeletorDeOrdem">
        <versao id="2.0">
            <elemento tag="p" id="porOrdemExpediente" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            De Ordem de Sua Excelência o  Juiz de Direito deste Juízo fica Vossa Senhoria, empresa ou ente público através desta <u>devidamente</u>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="DeOrdemDoExpediente" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="porOrdemExpediente" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorDeOrdem.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
    </classeDef>    
    
    <classeDef id="SeletorPessoa">
        <versao id="1.0">
            <elemento tag="p" id="selectorPessoaTextP" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B><span id="selectorPessoaTextSpan">[indefinido]</span></B>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="4.0" scope="EDT" >
                <constructs param="newId" value="Pessoa" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="selectorPessoaTextSpan" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.1">
            <elemento tag="p" id="selectorPessoaTextP" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B><span id="selectorPessoaTextSpan">[indefinido]</span></B>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="4.0" scope="EDT" >
                <constructs param="newId" value="Pessoa" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <!--constructs param="onChange" value="default" type="string"/-->
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="linkedElement" value="selectorPessoaTextSpan" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.0-sel-3.1"><!-- WA -->
            <elemento tag="p" id="selectorPessoaTextP" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <span id="selectorPessoaTextSpan">[indefinido]</span>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="3.1" scope="EDT" >
                <constructs param="newId" value="Pessoa" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="selectorPessoaTextSpan" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.0-sel-3.0">
            <elemento tag="p" id="selectorPessoaTextP" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <span id="selectorPessoaTextSpan">[indefinido]</span>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="Pessoa" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="selectorPessoaTextSpan" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.1-sel-3.0">
            <elemento tag="p" id="selectorPessoaTextP" scope="EXP" class="p Indnt3cm">      
                #:span@selectorPessoaTextSpan{[ Selecionar Desinatário(s) ]}
                <!--textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <span id="selectorPessoaTextSpan">[indefinido]#:span@sep{}</span>
                        ]]>
                    </data>
                </textHTML-->
            </elemento>    
            
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="Pessoa" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <!--constructs param="onChange" value="default" type="string"/-->
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="changeList" value="default" type="string"/>
                <constructs param="linkedElement" value="selectorPessoaTextSpan" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.0-Alvara">
            <elemento tag="p" id="selectorPessoaTextP" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B><span id="selectorPessoaTextSpan">[indefinido]</span></B>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="4.0" scope="EDT" >
                <constructs param="newId" value="Pessoa" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <!--constructs param="onChange" value="default" type="string"/-->
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="linkedElement" value="selectorPessoaText" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
                
                <constructs param="initialDisabled" value="true" type="string"/>
                <constructs param="noDisableAfterAddElement" value="true" type="string"/>
                <constructs param="label" value="Credor" type="string"/>
            </classeImp>    
        </versao>
        <versao id="1.0-AlvaraDevedor">
            <elemento tag="p" id="selectorPessoaDevedoraTextP" scope="EXP" class="p Indnt3cm">                 
                <textHTML scope="EXP">
                    <data>
                        <![CDATA[
                            <B><span id="selectorPessoaDevedoraTextSpan">[indefinido]</span></B>
                        ]]>
                    </data>
                </textHTML>
            </elemento>    
            
            <classeImp id="Selector" versao="4.0" scope="EDT" >
                <constructs param="newId" value="PessoaDevedora" type="string"/>
                <constructs param="multiple" value="sim" type="bool"/>
                <!--constructs param="onChange" value="default" type="string"/-->
                <constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/>
                <constructs param="linkedElement" value="selectorPessoaDevedoraText" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPessoa.selectorSource}" type="string"/>
                
                <constructs param="initialDisabled" value="false" type="string"/>
                <constructs param="noDisableAfterAddElement" value="true" type="string"/>
                <constructs param="label" value="Devedor" type="string"/>
            </classeImp>    
        </versao>
    </classeDef>    


    <classeDef id="SeletorPresidenteAudiencia">
        <versao id="2.0">
            <elemento tag="p" id="presidenteAudiencia" scope="EXP" class="p FntModDefault marginAtoJudicial">                 
            </elemento>    
            
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="PresidenteAudiencia" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="linkedElement" value="presidenteAudiencia" type="string"/>
                <constructs param="manualSource" value="#{j2.mod.clsCnstr.SeletorPresidenteAudiencia.selectorSource}" type="string"/>
            </classeImp>    
        </versao>
    </classeDef>    
            
    <classeDef id="SeletorPrioridade">
        <versao id="1.0">
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="prioridadeExpedientesItems" type="string"/>
                <constructs param="multiple" value="nao" type="bool"/>
                <constructs param="onChange" value="default" type="string"/>
                <!--constructs param="onAddAction" value="default" type="string"/>
                <constructs param="onDelAction" value="default" type="string"/-->
                <constructs param="source" value="prioridadeExpedientesItem" type="bool"/>
            </classeImp>    
        </versao>
    </classeDef>

    <classeDef id="Selector">
        <versao id="3.0">
            <elemento tag="div" scope="EXP" id="SDLinkedElement"/>
            <elemento tag="div" scope="EDT_CORE" class="width100">
                <elemento tag="div" scope="EDT">
                    <HTMLAttribute name="style" value="width:100%;display: inline-flex;"/>
                    <elemento tag="div" scope="EDT" id="SDCtrl">
                        <HTMLAttribute name="style" value="width:90%"/>
                        <elemento tag="select" id = "selector" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <elemento tag="option" scope="EDT"></elemento>
                            <elemento tag="option" scope="EDT">[Carregando...]</elemento>
                        </elemento>                          
                    </elemento>
                    <elemento tag="div" scope="EDT" id="SDAdd">
                        <HTMLAttribute name="style" value="width:9%; float:right"/>
                        <elemento tag="button" id = "selectorAdd" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
           
                <elemento tag="div" scope="EDT" id="SDDel">
                    <elemento tag="select" id = "selectorMonitor" scope="EDT" class="p FntModeEditor width100">
                        <HTMLAttribute name="multiple"/>
                        <HTMLAttribute name="size" size="4"/>
                    </elemento>                        
                    <HTMLAttribute name="style" value="width:100%;"/>
                    <elemento tag="div" scope="EDT" id="">
                        <HTMLAttribute name="style" value="width:9%; float:right"/>
                        <elemento tag="button" id = "selectorDel" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <HTMLAttribute name="disabled" value=""/>
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>                
            </elemento>
        </versao>
        
        <versao id="3.1">
            <elemento tag="div" scope="EXP" id="SDLinkedElement"/>
            <elemento tag="div" scope="EDT" class="width100">
                <elemento tag="div" scope="EDT">
                    <HTMLAttribute name="style" value="width:100%;display: inline-flex;"/>
                    <elemento tag="div" scope="EDT" id="SDCtrl">
                        <HTMLAttribute name="style" value="width:90%"/>
                        <elemento tag="select" id = "selector" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <elemento tag="option" scope="EDT"></elemento>
                            <elemento tag="option" scope="EDT">[Carregando...]</elemento>
                        </elemento>                          
                    </elemento>
                    <elemento tag="div" scope="EDT" id="SDAdd">
                        <HTMLAttribute name="style" value="width:9%; float:right"/>
                        <elemento tag="button" id = "selectorAdd" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
           
                <elemento tag="div" scope="EDT" id="SDDel">
                    <elemento tag="select" id = "selectorMonitor" scope="EDT" class="p FntModeEditor width100">
                        <HTMLAttribute name="multiple"/>
                        <HTMLAttribute name="size" size="4"/>
                    </elemento>                        
                    <HTMLAttribute name="style" value="width:100%;"/>
                    <elemento tag="div" scope="EDT" id="">
                        <HTMLAttribute name="style" value="width:9%; float:right"/>
                        <elemento tag="button" id = "selectorDel" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <HTMLAttribute name="disabled" value=""/>
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>                
            </elemento>
        </versao>    
        
        <versao id="3.2"> <!-- wa -->
            
            <elemento tag="div" scope="EDT_CORE" class="width100">
                <elemento tag="div" scope="EDT">
                    <HTMLAttribute name="style" value="width:100%;display: inline-flex;"/>
                    <elemento tag="div" scope="EDT" id="SDCtrl">
                        <HTMLAttribute name="style" value="width:90%"/>
                        <elemento tag="select" id = "selector" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <elemento tag="option" scope="EDT"></elemento>
                            <elemento tag="option" scope="EDT">[Carregando...]</elemento>
                        </elemento>                          
                    </elemento>
                    <elemento tag="div" scope="EDT" id="SDAdd">
                        <HTMLAttribute name="style" value="width:9%; float:right"/>
                        <elemento tag="button" id = "selectorAdd" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
           
                <elemento tag="div" scope="EDT" id="SDDel">
                    <elemento tag="select" id = "selectorMonitor" scope="EDT" class="p FntModeEditor width100">
                        <HTMLAttribute name="multiple"/>
                        <HTMLAttribute name="size" size="4"/>
                    </elemento>                        
                    <HTMLAttribute name="style" value="width:100%;"/>
                    <elemento tag="div" scope="EDT" id="">
                        <HTMLAttribute name="style" value="width:9%; float:right"/>
                        <elemento tag="button" id = "selectorDel" scope="EDT" class="p FntModeEditor width100 edtCtrl">
                            <HTMLAttribute name="disabled" value=""/>
                            <elemento tag="img" scope="EDT" >
                                <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>                
            </elemento>
                      
            
            <elemento tag="p" class="p FntModeEditor marginTop8px" scope="EDT" id="selectorMessageLabel">
                Mensagem:
            </elemento>
        
            <elemento tag="div" scope="EDT" id="SDLinkedElement">
                <HTMLAttribute name="style" value="height:70px;padding: 5px; overflow-y: scroll; word-break: break-word;"/>
                <HTMLAttribute name="contenteditable" value=""/>
            </elemento>
        </versao>
        
        <versao id="4.0">
            <elemento tag="div" scope="EXP" id="SDLinkedElement"/>
            <elemento tag="div" classBS="container" id="selector-container-" scope="EDT_CORE">

                <elemento tag="form" classBS="needs-validation mb-1" id="selector-form-" scope="EDT">
                    <elemento tag="fieldset" scope="EDT" id="selector-form-fieldset-">

                        <elemento tag="div" id="seletor-inputGroup-" classBS="input-group mb-1" scope="EDT">
                            <!-- LABEL -->
                            <elemento tag="div" classBS="input-group-prepend" id="seletor-label-div-" scope="EDT">
                                <elemento tag="span" classBS="input-group-text" id="seletor-label-text-" scope="EDT">[Texto]</elemento>
                            </elemento>

                            <!-- SELECT -->
                            <!--elemento tag="div" scope="EDT" id="SDCtrl">
                            <HTMLAttribute name="style" value="width:90%"/-->
                            <elemento tag="select" id="selector" classBS="form-control" scope="EDT">
                                <elemento tag="option" scope="EDT"></elemento>
                                <elemento tag="option" scope="EDT">[Carregando...]</elemento>
                            </elemento>                          
                            <!--/elemento-->

                            <!-- ADD BUTTON -->
                            <elemento tag="div" scope="EDT" id="SDAdd">
                                <HTMLAttribute name="style" value=" width:15%"/>
                                <elemento tag="button" id = "selectorAdd" classBS="form-control btn btn-light" scope="EDT">
                                    <HTMLAttribute name="type" value="button"/>
                                    <elemento tag="img" scope="EDT" >
                                        <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/add.gif"/>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>

                        <elemento tag="div" id="SDDel" classBS="input-group mb-1" scope="EDT">
                            <!-- SELECT MONITOR -->
                            <elemento tag="select" id="selectorMonitor" classBS="form-control" scope="EDT">
                                <HTMLAttribute name="multiple"/>
                                <HTMLAttribute name="size" size="4"/>
                                <HTMLAttribute name="class" value="form-control"/>
                            </elemento>                        
                            <!-- DELL BUTTON MONITOR -->
                            <elemento tag="div" scope="EDT" id="">
                                <HTMLAttribute name="style" value="float:right"/>
                                <elemento tag="button" id = "selectorDel" classBS="form-control btn btn-light" scope="EDT" >
                                    <HTMLAttribute name="type" value="button"/>
                                    <HTMLAttribute name="disabled" value=""/>
                                    <elemento tag="img" scope="EDT" >
                                        <HTMLAttribute name="src" value="https://pje.tjma.jus.br/pje/img/remove.png"/>
                                    </elemento>
                                </elemento>
                            </elemento>
                        </elemento>
                    </elemento>
                </elemento>
            </elemento>

        </versao>                
    </classeDef>
        
    <classeDef id="Space">
        <versao id="1.0">
            <elemento tag="span" scope="EXP" id="space">
                <elemento tag="p" scope="EXP" class="p FntModDefault">
                    <textHTML scope="EXP">
                        <data>
                            <![CDATA[<span>&nbsp;</span>]]>
                        </data>
                    </textHTML>
                </elemento>               
            </elemento>               
        </versao>
    </classeDef>
    
    <classeDef id="TermoReclamacao.SeletorParte">
        <versao id="3.0">
            <classeImp id="Selector" versao="3.0" scope="EDT" >
                <constructs param="newId" value="termoReclamacaoFatosItens" type="string"/>
                <!--constructs param="linkedElement" value="fatos" type="string"/-->
                <!--constructs param="linkedElTag" value="P" type="string"/-->
                <constructs param="multiple" value="sim" type="bool"/>
                <!--constructs param="onChange" value="default" type="string"/-->
                <constructs param="onAddAction" value="#{w.j2.mod.clsCnstr.TermoReclamacaoSeletorParte.addAction}" type="string"/>
                <constructs param="onDelAction" value="#{w.j2.mod.clsCnstr.TermoReclamacaoSeletorParte.delAction}" type="string"/>
                <!--constructs param="changeList" value="default" type="string"/-->
                <!--constructs param="linkedElStyleClasses" value="p FntModDefault marginAtoJudicial" type="string"/-->
                <constructs param="newSize" value="4" type="string"/>
                <constructs param="source" value="#{j2.res.mod.termoReclamacaoPartesSelSrc}" type="string"/>
                <constructs param="monitorCreateGroups" value="[{ 'id':'partesPoloAtivo', 'label':'Polo Ativo' }, { 'id':'partesPoloPassivo', 'label':'Polo Passivo' }]" type="j2Json"/>
            </classeImp>    
        </versao>
    </classeDef>    
    
    <classeDef id="TermoReclamacao.Qualificacao.PFTemplate">
        <versao id="1.0">
            
            <elemento tag="span" scope="EXP" class="" id="TermoReclamacao.Qualificacao.PFTemplate">
                #:B{JOSÉ PEREIRA DA SILVA}, brasileiro(a), pessoa física inscrita no CPF nº 111.222.333-44, 
                residente e domiciliado(a) na Rua Principal, nº 123, Vila Nova, Imperatriz, Maranhão. 
                Telefone:  (99) 9123-45678
            </elemento>               
        </versao>
    </classeDef>        
    
    <classeDef id="TermoReclamacao.Qualificacao.PJTemplate">
        <versao id="1.0">
            <elemento tag="span" scope="EXP" class="" id="TermoReclamacao.Qualificacao.PJTemplate">
                #:B{BANCO SAFRA}, pessoa jurídica inscrita no CNPJ nº desconhecido, situado à Rua Álvares de Alencar, 
                nº 345, Parque Regina, Mairiporã, São Paulo
            </elemento>  
            
        </versao>
    </classeDef>        
    
    <classeDef id="Titulo">
        <versao id="3.0">
            <elemento tag="p" id="expTitle" scope="EXP" class="p FntModTitle b AlignCenter pSpacing8pt underlined">TITULO DO EXPEDIENTE</elemento>
        </versao>
        <versao id="3.1">
            <classeImp id="Space" versao="1.0" scope="EXP">
                <constructs param="size" value="1" type="int"/>
            </classeImp>
            <elemento tag="p" id="expTitle" scope="EXP" class="p FntModTitle b AlignCenter pSpacing8pt underlined">TITULO DO EXPEDIENTE</elemento>
            <classeImp id="Space" versao="1.0" scope="EXP">
                <constructs param="size" value="1" type="int"/>
            </classeImp>
        </versao>
    </classeDef>
    
    <classeDef id="VistosEmCorreicao">
        <versao id="1.0">
            <elemento tag="p" id="vistosEmCorreicao" scope="EXP" class="p FntModTitle b AlignCenter underlined AlignRight Hidden">VISTOS EM CORREIÇÃO</elemento>
        </versao>
    </classeDef>
</Definitions>
"
};